import{l as i,c as s,a5 as o,v as e,i as a,a as r}from"./chunks/framework.DJyBczLA.js";const v=JSON.parse('{"title":"GSAP中文文档 - tween 方法 - 激活状态（isActive）","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/tween/methods/is-active.md","filePath":"gsap/tween/methods/is-active.md","lastUpdated":1733646466000}'),l={name:"gsap/tween/methods/is-active.md"};function n(c,t,d,p,h,u){return r(),s("div",null,t[0]||(t[0]=[o('<h1 id="gsap中文文档-tween-方法-激活状态-isactive" tabindex="-1">GSAP中文文档 - tween 方法 - 激活状态（isActive） <a class="header-anchor" href="#gsap中文文档-tween-方法-激活状态-isactive" aria-label="Permalink to &quot;GSAP中文文档 - tween 方法 - 激活状态（isActive）&quot;">​</a></h1><h2 id="激活状态-isactive" tabindex="-1">激活状态（isActive） <a class="header-anchor" href="#激活状态-isactive" aria-label="Permalink to &quot;激活状态（isActive）&quot;">​</a></h2><p>返回动画是否当前处于激活状态（即虚拟播放头正在积极地移动过该实例的时间跨度，并且它没有被暂停，它的任何祖先时间线也没有被暂停）。</p><h3 id="返回值-returns" tabindex="-1">返回值（Returns） <a class="header-anchor" href="#返回值-returns" aria-label="Permalink to &quot;返回值（Returns）&quot;">​</a></h3><ul><li>Boolean <ul><li>如果补间处于激活状态，则返回 <code>true</code>。否则返回 <code>false</code>。</li></ul></li></ul><h3 id="详细信息-details" tabindex="-1">详细信息（Details） <a class="header-anchor" href="#详细信息-details" aria-label="Permalink to &quot;详细信息（Details）&quot;">​</a></h3><p>指示动画是否当前处于激活状态（即虚拟播放头正在积极地移动过该实例的时间跨度，并且它没有被暂停，它的任何祖先时间线也没有被暂停）。例如，如果一个补间正在中间补间，它是激活的，但在它完成后（或在它开始之前），它<strong>不</strong>是激活的。如果它被暂停，或者它被放置在一个被暂停的时间线内（或者它的任何祖先时间线被暂停），<code>isActive()</code> 将返回 <code>false</code>。如果播放头直接位于动画的开始时间上（即使它还没有完全渲染），这也被认为是“激活”。</p><p>您还可以检查 <code>timeline.progress()</code> 或 <code>timeline.totalProgress()</code>，但这些不考虑暂停状态或父时间线的播放头位置。</p><p>在下面的演示中，我们使用 <code>isActive()</code> 确保补间在激活时不能改变其方向。反复点击 <strong>切换补间方向</strong> 按钮，可以看到在盒子移动时点击被忽略。</p>',9),e("iframe",{src:"https://codepen.io/GreenSock/pen/qBBYLqr",width:"100%",height:"400",scrolling:"no",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},null,-1),e("p",null,[a("要获取所有激活的 GSAP 补间的数组，可以使用 "),e("code",null,"gsap.globalTimeline.getChildren().filter(tween => tween.isActive())"),a("。")],-1)]))}const f=i(l,[["render",n]]);export{v as __pageData,f as default};
