import{l as a,c as i,a5 as s,a as t}from"./chunks/framework.DJyBczLA.js";const m=JSON.parse('{"title":"GSAP中文文档 - timeline 方法 - 时间（time）","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/timeline/methods/time.md","filePath":"gsap/timeline/methods/time.md","lastUpdated":1733646466000}'),l={name:"gsap/timeline/methods/time.md"};function n(r,e,p,d,o,h){return t(),i("div",null,e[0]||(e[0]=[s(`<h1 id="gsap中文文档-timeline-方法-时间-time" tabindex="-1">GSAP中文文档 - timeline 方法 - 时间（time） <a class="header-anchor" href="#gsap中文文档-timeline-方法-时间-time" aria-label="Permalink to &quot;GSAP中文文档 - timeline 方法 - 时间（time）&quot;">​</a></h1><h2 id="时间-time" tabindex="-1">时间（time） <a class="header-anchor" href="#时间-time" aria-label="Permalink to &quot;时间（time）&quot;">​</a></h2><p>time 方法用于获取或设置播放头的本地位置（基本上是当前时间），不包括任何重复次数或重复延迟。如果时间轴有一个非零的 <code>repeat</code>，即使 <code>totalTime</code> 继续线性前进（或者如果 <code>yoyo</code> 是 <code>true</code>，<code>time</code> 在前进和后退之间交替），其时间在重复时会回到零。<code>time</code> 永远不会超过持续时间，而 <code>totalTime</code> 反映了包括任何重复和重复延迟在内的总时间。</p><h3 id="方法签名" tabindex="-1">方法签名 <a class="header-anchor" href="#方法签名" aria-label="Permalink to &quot;方法签名&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>time(value: Number): self</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>获取或设置播放头的本地位置（当前时间）。</p><h3 id="参数-parameters" tabindex="-1">参数（Parameters） <a class="header-anchor" href="#参数-parameters" aria-label="Permalink to &quot;参数（Parameters）&quot;">​</a></h3><ul><li><strong>value</strong>: Number <ul><li>要设置的时间值（秒数）。</li></ul></li></ul><h3 id="返回值-returns" tabindex="-1">返回值（Returns） <a class="header-anchor" href="#返回值-returns" aria-label="Permalink to &quot;返回值（Returns）&quot;">​</a></h3><ul><li>self <ul><li>返回实例本身，便于链式调用。</li></ul></li></ul><h3 id="详细信息-details" tabindex="-1">详细信息（Details） <a class="header-anchor" href="#详细信息-details" aria-label="Permalink to &quot;详细信息（Details）&quot;">​</a></h3><ul><li>如果省略参数，<code>time()</code> 方法将返回当前值（getter）。</li><li>如果定义了参数，它将设置值（setter），并返回实例本身以便于链式调用。</li></ul><p>例如，如果一个时间轴实例的 <code>duration</code> 为 2，重复次数为 3，<code>totalTime</code> 将在时间轴的过程中从 0 变化到 8（播放一次然后重复 3 次，总共 4 个周期），而 <code>time</code> 将总共 4 次从 0 变化到 2。</p><h3 id="示例代码-example-code" tabindex="-1">示例代码（Example Code） <a class="header-anchor" href="#示例代码-example-code" aria-label="Permalink to &quot;示例代码（Example Code）&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取当前时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置时间，跳转到新值，就像 seek() 一样</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,15)]))}const u=a(l,[["render",n]]);export{m as __pageData,u as default};
