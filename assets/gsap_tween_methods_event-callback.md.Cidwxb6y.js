import{l as e,a as s,c as i,a5 as l}from"./chunks/framework.DAV8GD4U.js";const c=JSON.parse('{"title":"GSAP中文文档 - tween 方法 - 事件回调（eventCallback）","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/tween/methods/event-callback.md","filePath":"gsap/tween/methods/event-callback.md","lastUpdated":1731921447000}'),t={name:"gsap/tween/methods/event-callback.md"};function n(r,a,p,h,d,k){return s(),i("div",null,a[0]||(a[0]=[l(`<h1 id="gsap中文文档-tween-方法-事件回调-eventcallback" tabindex="-1">GSAP中文文档 - tween 方法 - 事件回调（eventCallback） <a class="header-anchor" href="#gsap中文文档-tween-方法-事件回调-eventcallback" aria-label="Permalink to &quot;GSAP中文文档 - tween 方法 - 事件回调（eventCallback）&quot;">​</a></h1><h2 id="事件回调-eventcallback" tabindex="-1">事件回调（eventCallback） <a class="header-anchor" href="#事件回调-eventcallback" aria-label="Permalink to &quot;事件回调（eventCallback）&quot;">​</a></h2><p>为 GSAP 动画设置或获取特定事件类型的回调函数。</p><h3 id="参数-parameters" tabindex="-1">参数（Parameters） <a class="header-anchor" href="#参数-parameters" aria-label="Permalink to &quot;参数（Parameters）&quot;">​</a></h3><ul><li><strong>type</strong>: String <ul><li>指定事件类型，如 <code>&#39;onComplete&#39;</code>, <code>&#39;onUpdate&#39;</code>, <code>&#39;onStart&#39;</code> 等。</li></ul></li><li><strong>callback</strong>: Function（可选） <ul><li>要设置的回调函数。</li></ul></li><li><strong>params</strong>: Array（可选） <ul><li>传递给回调函数的参数数组。</li></ul></li></ul><h3 id="返回值-returns" tabindex="-1">返回值（Returns） <a class="header-anchor" href="#返回值-returns" aria-label="Permalink to &quot;返回值（Returns）&quot;">​</a></h3><ul><li>Function 或 self <ul><li>如果只提供了第一个参数，返回当前的回调函数（获取器）。</li><li>如果提供了额外的参数，设置回调函数并返回实例本身以便于链式调用（设置器）。</li></ul></li></ul><h3 id="详细信息-details" tabindex="-1">详细信息（Details） <a class="header-anchor" href="#详细信息-details" aria-label="Permalink to &quot;详细信息（Details）&quot;">​</a></h3><p>此方法既作为获取器也作为设置器。省略除第一个参数以外的所有参数返回当前值（获取器），而定义超过第一个参数的值设置该值（设置器），并返回实例本身以便于链式调用，如下所示：</p><h3 id="示例代码-example-code" tabindex="-1">示例代码（Example Code） <a class="header-anchor" href="#示例代码-example-code" aria-label="Permalink to &quot;示例代码（Example Code）&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myAnimation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eventCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onComplete&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, completeHandler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eventCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onUpdate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, updateHandler, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,11)]))}const E=e(t,[["render",n]]);export{c as __pageData,E as default};
