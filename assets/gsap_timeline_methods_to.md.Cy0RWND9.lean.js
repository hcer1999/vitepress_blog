import{l as i,a,c as n,a5 as e}from"./chunks/framework.DAV8GD4U.js";const c=JSON.parse('{"title":"GSAP中文文档 - timeline 方法 - to","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/timeline/methods/to.md","filePath":"gsap/timeline/methods/to.md","lastUpdated":1731921447000}'),t={name:"gsap/timeline/methods/to.md"};function l(p,s,h,r,o,k){return a(),n("div",null,s[0]||(s[0]=[e(`<h1 id="gsap中文文档-timeline-方法-to" tabindex="-1">GSAP中文文档 - timeline 方法 - to <a class="header-anchor" href="#gsap中文文档-timeline-方法-to" aria-label="Permalink to &quot;GSAP中文文档 - timeline 方法 - to&quot;">​</a></h1><h2 id="to" tabindex="-1">to <a class="header-anchor" href="#to" aria-label="Permalink to &quot;to&quot;">​</a></h2><p>to 方法用于在时间轴的末尾（或使用 <code>position</code> 参数在其他地方）添加一个 <code>gsap.to()</code> 补间动画。这是一个便捷方法，与 <code>add( gsap.to(...) )</code> 完成相同的操作，但代码更少。</p><h3 id="方法签名" tabindex="-1">方法签名 <a class="header-anchor" href="#方法签名" aria-label="Permalink to &quot;方法签名&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>to(target: [Object | Array | String], vars: Object, position: [Number | String]): self</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在时间轴的末尾（或使用 <code>position</code> 参数在其他地方）添加一个 <code>gsap.to()</code> 补间动画。</p><h3 id="参数-parameters" tabindex="-1">参数（Parameters） <a class="header-anchor" href="#参数-parameters" aria-label="Permalink to &quot;参数（Parameters）&quot;">​</a></h3><ul><li><p><strong>target</strong>: [Object | Array | String]</p><ul><li>目标对象（或对象数组），其属性将受到影响。这也可以是 CSS 选择器文本，如 &quot;#feature&quot; 或 &quot;h2.author&quot;（GSAP 将选择器字符串传递给 <code>document.querySelectorAll()</code>）。</li></ul></li><li><p><strong>vars</strong>: Object</p><ul><li>一个对象，包含每个属性的结束值，这些属性应该被动画化，以及任何特殊属性，如 <code>onComplete</code>、<code>ease</code> 等。</li></ul></li><li><p><strong>position</strong>: [Number | String]</p><ul><li>默认值为 <code>&quot;+=0&quot;</code>。控制时间轴中的插入点（默认情况下，它在时间轴的末尾）。如果定义了一个尚不存在的标签，它将<strong>自动被添加到时间轴的末尾</strong>。</li></ul></li></ul><h3 id="返回值-returns" tabindex="-1">返回值（Returns） <a class="header-anchor" href="#返回值-returns" aria-label="Permalink to &quot;返回值（Returns）&quot;">​</a></h3><ul><li>self <ul><li>返回实例本身，便于链式调用。</li></ul></li></ul><h3 id="详细信息-details" tabindex="-1">详细信息（Details） <a class="header-anchor" href="#详细信息-details" aria-label="Permalink to &quot;详细信息（Details）&quot;">​</a></h3><p>在时间轴的末尾（或使用 <code>position</code> 参数在其他地方）添加一个 <code>gsap.to()</code> 补间动画。这是一个便捷方法，与 <code>add( gsap.to(...) )</code> 完成相同的操作，但代码更少。例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tween </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tween)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这行代码与前两行代码产生相同的结果（只是更短）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>查看 <code>gsap.to()</code> 文档以了解所有详细信息和 <code>to()</code> 补间动画可用的特殊属性。</strong></p><p>你可以将这些调用链式连接，并使用其他便捷方法如 <code>from()</code>、<code>call()</code>、<code>set()</code> 等，快速构建序列：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//create a timeline that calls myFunction() when it completes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ onComplete: myFunction })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//now we&#39;ll use chaining, but break each step onto a different line for readability...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//tween element&#39;s x from -100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //then tween element&#39;s y to 50</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //then set element&#39;s opacity to 0.5 immediately</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, { opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //then call otherFunction()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(otherFunction)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //finally tween the rotation of all elements with the class &quot;myClass&quot; to 45 and stagger the start times by 0.25 seconds</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.myClass&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stagger: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="在时间轴中定位动画" tabindex="-1">在时间轴中定位动画 <a class="header-anchor" href="#在时间轴中定位动画" aria-label="Permalink to &quot;在时间轴中定位动画&quot;">​</a></h2><p>默认情况下，动画被添加到时间轴的<strong>末尾</strong>，以便它们一个接一个地顺序播放，但你可以使用方法参数来精确控制放置位置。它通常在 <strong>vars</strong> 参数之后，并且使用灵活的语法，具有以下选项：</p><ul><li><strong>绝对时间</strong>（以秒为单位），从时间轴的开始测量，作为一个<strong>数字</strong>，如 <code>3</code></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从时间轴的开始插入恰好3秒的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><strong>标签</strong>，如 <code>&quot;someLabel&quot;</code>。如果标签不存在，它将被添加到时间轴的末尾。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 &quot;someLabel&quot; 标签处插入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;someLabel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>&lt;</code> 表示前一个动画的<strong>开始</strong>。将 <code>&lt;</code> 视为指向前一个动画开始的指针。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在前一个动画的开始处插入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>&gt;</code> 表示前一个动画的<strong>结束</strong>。将 <code>&gt;</code> 视为指向前一个动画结束的指针。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在前一个动画的结束处插入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p>一个复杂的字符串，其中 <code>&quot;+=&quot;</code> 和 <code>&quot;-=&quot;</code> 前缀表示<strong>相对</strong>值。当一个数字跟随 <code>&lt;</code> 或 <code>&gt;</code> 时，它被解释为相对的，所以 <code>&quot;&lt;2&quot;</code> 与 <code>&quot;&lt;+=2&quot;</code> 相同。</p><ul><li><code>&quot;+=1&quot;</code> - 1秒后的时间轴末尾（创建一个间隔）</li><li><code>&quot;-=1&quot;</code> - 1秒前的时间轴末尾（重叠）</li><li><code>&quot;myLabel+=2&quot;</code> - 标签 <code>&quot;myLabel&quot;</code> 后2秒</li><li><code>&quot;&lt;+=3&quot;</code> - 前一个动画开始后3秒</li><li><code>&quot;&lt;3&quot;</code> - 与 <code>&quot;&lt;+=3&quot;</code> 相同（见上文）（当跟随 <code>&lt;</code> 或 <code>&gt;</code> 时，<code>&quot;+=&quot;</code> 被隐含）</li><li><code>&quot;&gt;-0.5&quot;</code> - 前一个动画结束前0.5秒。就像说 &quot;前一个动画的结束加上 -0.5&quot;</li></ul></li><li><p>一个基于<strong>百分比</strong>的复杂字符串。当紧跟 <code>&quot;+=&quot;</code> 或 <code>&quot;-=&quot;</code> 前缀时，百分比基于<strong>被插入动画</strong>的总持续时间。当紧跟 <code>&lt;</code> 或 <code>&gt;</code> 时，它基于<strong>前一个动画</strong>的总持续时间。注意：总持续时间包括 <code>repeats/yoyos</code>。</p><ul><li><code>&quot;-=25%&quot;</code> - 与时间轴末尾重叠25%的插入动画总持续时间</li><li><code>&quot;+=50%&quot;</code> - 超出时间轴末尾50%的插入动画总持续时间，创建一个间隔</li><li><code>&quot;&lt;25%&quot;</code> - 前一个动画的25%（从其开始）。与 <code>&quot;&gt;-75%&quot;</code> 相同，即从前一个动画的<strong>结束</strong>负75%。</li><li><code>&quot;&lt;+=25%&quot;</code> - 插入动画总持续时间的25%过去前一个动画的开始。与 <code>&quot;&lt;25%&quot;</code> 不同，其百分比基于<strong>前一个动画</strong>的总持续时间，而任何紧跟 <code>&quot;+=&quot;</code> 或 <code>&quot;-=&quot;</code> 的都基于<strong>插入动画</strong>的总持续时间。</li><li><code>&quot;myLabel+=30%&quot;</code> - 标签 <code>&quot;myLabel&quot;</code> 后插入动画总持续时间的30%。</li></ul></li></ul><p><strong>百分比值是在 GSAP 3.7.0 中添加的</strong></p><p><strong>前一个动画指的是最近插入的动画，不一定是最接近时间轴末尾的动画。</strong></p><h2 id="位置参数交互式演示" tabindex="-1">位置参数交互式演示 <a class="header-anchor" href="#位置参数交互式演示" aria-label="Permalink to &quot;位置参数交互式演示&quot;">​</a></h2><iframe src="https://codepen.io/GreenSock/pen/PopXddg" width="100%" height="500"></iframe><p>务必阅读<a href="https://gsap.com/resources/position-parameter" target="_blank" rel="noreferrer">位置参数文章</a>，包括交互式时间轴可视化和视频。</p>`,32)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
