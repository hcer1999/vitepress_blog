import{l as a,c as i,a5 as e,a as l}from"./chunks/framework.DJyBczLA.js";const g=JSON.parse('{"title":"GSAP中文文档 - gsap.globalTimeline()","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/gsap/properties/global-timeline.md","filePath":"gsap/gsap/properties/global-timeline.md","lastUpdated":1733646466000}'),n={name:"gsap/gsap/properties/global-timeline.md"};function p(t,s,o,c,d,r){return l(),i("div",null,s[0]||(s[0]=[e(`<h1 id="gsap中文文档-gsap-globaltimeline" tabindex="-1">GSAP中文文档 - gsap.globalTimeline() <a class="header-anchor" href="#gsap中文文档-gsap-globaltimeline" aria-label="Permalink to &quot;GSAP中文文档 - gsap.globalTimeline()&quot;">​</a></h1><p><code>gsap.globalTimeline</code> 是 GSAP 中的根时间轴实例，它控制着 GSAP 中的所有动画，这使得它成为一次性影响所有动画的强大方式。然而，请注意，<code>gsap.delayedCalls()</code> 在技术上也是补间动画，所以如果你对全局时间轴执行 <code>pause()</code> 或 <code>timeScale()</code> 操作，它也会影响 <code>delayedCalls()</code>。如果你想排除这些补间动画，可以查看 <code>gsap.exportRoot()</code>。</p><p>以下是一些操作全局时间轴的示例代码：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将全局时间轴的播放速度设置为正常速度的一半</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.globalTimeline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将全局时间轴的播放速度设置为正常速度的两倍</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.globalTimeline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取当前全局时间轴的时间速率</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentTimeScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.globalTimeline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这段代码展示了如何使用 <code>gsap.globalTimeline</code> 来控制 GSAP 中所有动画的播放速度。通过修改全局时间轴的时间速率，你可以一次性地加快或减慢所有动画的播放速度。</p><p>此外，<code>gsap.globalTimeline</code> 还提供其他控制方法，例如：</p><ul><li><code>gsap.globalTimeline.pause()</code> - 暂停全局时间轴，影响所有动画。</li><li><code>gsap.globalTimeline.play()</code> - 继续播放全局时间轴，影响所有动画。</li><li><code>gsap.globalTimeline.paused()</code> - 如果全局时间轴已暂停，则返回 <code>true</code>；如果正在播放，则返回 <code>false</code>。</li></ul><p>这些方法允许你以编程方式控制 GSAP 动画的全局播放状态。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>请注意，由于全局时间轴用于运行所有其他的补间动画和时间轴，因此 gsap.globalTimeline.isActive() 将始终返回 true，无论当前是否有任何补间动画或时间轴处于激活状态。</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>换句话说，全局时间轴始终处于活跃状态，因为它负责管理 GSAP 中的所有动画。即使当前没有正在播放的动画，全局时间轴仍然存在并准备运行新的动画。这个特性确保了全局时间轴始终可用于控制新的或现有的动画，无论它们何时开始或结束。</p></div>`,10)]))}const k=a(n,[["render",p]]);export{g as __pageData,k as default};
