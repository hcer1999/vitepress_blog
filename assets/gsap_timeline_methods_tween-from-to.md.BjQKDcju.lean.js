import{l as s,c as a,a5 as i,a as n}from"./chunks/framework.DJyBczLA.js";const c=JSON.parse('{"title":"GSAP中文文档 - timeline 方法 - 补间动画从...到...（tweenFromTo）","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/timeline/methods/tween-from-to.md","filePath":"gsap/timeline/methods/tween-from-to.md","lastUpdated":1733646466000}'),t={name:"gsap/timeline/methods/tween-from-to.md"};function l(r,e,o,p,d,h){return n(),a("div",null,e[0]||(e[0]=[i(`<h1 id="gsap中文文档-timeline-方法-补间动画从-到-tweenfromto" tabindex="-1">GSAP中文文档 - timeline 方法 - 补间动画从...到...（tweenFromTo） <a class="header-anchor" href="#gsap中文文档-timeline-方法-补间动画从-到-tweenfromto" aria-label="Permalink to &quot;GSAP中文文档 - timeline 方法 - 补间动画从...到...（tweenFromTo）&quot;">​</a></h1><h2 id="补间动画从-到-tweenfromto" tabindex="-1">补间动画从...到...（tweenFromTo） <a class="header-anchor" href="#补间动画从-到-tweenfromto" aria-label="Permalink to &quot;补间动画从...到...（tweenFromTo）&quot;">​</a></h2><p>tweenFromTo 方法用于创建一个线性补间动画，该动画将播放头从特定的时间或标签擦除到另一个时间或标签，然后停止。</p><h3 id="方法签名" tabindex="-1">方法签名 <a class="header-anchor" href="#方法签名" aria-label="Permalink to &quot;方法签名&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>tweenFromTo(fromPosition: [Number | Label], toPosition: [Number | Label], vars: Object): Tween</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>创建一个线性补间动画，该动画将播放头从特定的时间或标签擦除到另一个时间或标签。</p><h3 id="参数-parameters" tabindex="-1">参数（Parameters） <a class="header-anchor" href="#参数-parameters" aria-label="Permalink to &quot;参数（Parameters）&quot;">​</a></h3><ul><li><p><strong>fromPosition</strong>: [Number | Label]</p><ul><li>时间轴开始播放的起始时间（秒）或标签。</li></ul></li><li><p><strong>toPosition</strong>: [Number | Label]</p><ul><li>时间轴结束播放的目标时间（秒）或标签。</li></ul></li><li><p><strong>vars</strong>: Object</p><ul><li>默认值为 <code>null</code>。一个可选的 vars 对象，将被传递给 Tween 实例。这允许你定义 <code>onComplete</code>、<code>ease</code>、<code>delay</code> 或任何其他 Tween 特殊属性。</li></ul></li></ul><h3 id="返回值-returns" tabindex="-1">返回值（Returns） <a class="header-anchor" href="#返回值-returns" aria-label="Permalink to &quot;返回值（Returns）&quot;">​</a></h3><ul><li>Tween <ul><li>处理时间轴在指定时间和标签之间补间的 Tween 实例。</li></ul></li></ul><h3 id="详细信息-details" tabindex="-1">详细信息（Details） <a class="header-anchor" href="#详细信息-details" aria-label="Permalink to &quot;详细信息（Details）&quot;">​</a></h3><p>创建一个线性补间动画，该动画将播放头从特定的时间或标签擦除到另一个时间或标签，然后停止。如果你计划顺序播放多个播放头补间动画，使用 <code>tweenFromTo()</code> 比 <code>tweenTo()</code> 更好，因为它允许立即确定持续时间，确保后续追加到序列中的补间动画被适当地定位。例如，要使时间轴从标签 &quot;myLabel1&quot; 播放到 &quot;myLabel2&quot;，然后从 &quot;myLabel2&quot; 回到开始（0 时间），只需这样做：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> master </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">master.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tweenFromTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myLabel1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myLabel2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">master.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tweenFromTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myLabel2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果你想对补间动画进行高级控制，比如添加 <code>onComplete</code> 或更改 <code>ease</code> 或添加 <code>delay</code>，只需传入一个带有适当属性的 vars 对象。</p><p>例如，要从开始（0）补间到时间轴上的 5 秒位置，然后调用名为 <code>myFunction</code> 的函数并传入一个引用此时间轴的参数，并使用 <code>strong</code> 缓动，你会这样做：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tweenFromTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  onComplete: myFunction,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  onCompleteParams: [tl],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;strong&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>请记住，这个方法只是创建一个补间动画，补间你时间轴的 <code>time()</code>。所以你可以存储对该补间动画的引用，如果需要，可以随时 <code>kill()</code> 它。</p><p>还要注意，<code>tweenFromTo()</code> 不影响时间轴的 <code>reversed</code> 属性。所以如果你的时间轴正常定向（未反转），并且你补间到一个先于当前时间的时间或标签，它将看起来向后播放，但 <code>reversed</code> 属性不会更改为 true。</p><p>另外请注意，<code>tweenFromTo()</code> 在补间其 <code>time()</code> 之前会立即暂停时间轴，并且在补间完成后不会自动恢复。如果需要恢复播放，可以随时使用 onComplete 调用 <code>resume()</code> 方法。</p><p>像 GSAP 中所有从类型的方法一样，默认情况下 <code>immediateRender</code> 是 <code>true</code>，这意味着时间轴会立即跳转到 &quot;from&quot; 时间/标签，除非你设置 <code>immediateRender: false</code>（像 <code>.tweenFromTo(1, 5, {immediateRender: false})</code>）。</p>`,20)]))}const m=s(t,[["render",l]]);export{c as __pageData,m as default};
