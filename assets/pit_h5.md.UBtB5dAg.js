import{l as i,c as a,a5 as n,a as e}from"./chunks/framework.Cbnp_j6w.js";const E=JSON.parse('{"title":"H5 踩坑记录","description":"","frontmatter":{"outline":2},"headers":[],"relativePath":"pit/h5.md","filePath":"pit/h5.md","lastUpdated":1730284782000}'),t={name:"pit/h5.md"};function p(h,s,l,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="h5-踩坑记录" tabindex="-1">H5 踩坑记录 <a class="header-anchor" href="#h5-踩坑记录" aria-label="Permalink to &quot;H5 踩坑记录&quot;">​</a></h1><h2 id="webview-返回上一页不刷新" tabindex="-1"><code>WebView</code> 返回上一页不刷新 <a class="header-anchor" href="#webview-返回上一页不刷新" aria-label="Permalink to &quot;\`WebView\` 返回上一页不刷新&quot;">​</a></h2><p>为了提升浏览网页的效率加入了缓存机制，导致 <code>WebView</code> 返回上一页时不会刷新</p><h5 id="解决方法" tabindex="-1">解决方法 <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法&quot;">​</a></h5><p>监听 <code>pageshow</code> 事件，<strong>通过 <code>persisted</code> 或 <code>performance.navigation.type</code> 属性</strong>判断当前页面是否通过缓存载入</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onPageShow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.persisted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (window.performance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.performance.navigation.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pageshow&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, onPageShow)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,6)]))}const c=i(t,[["render",p]]);export{E as __pageData,c as default};
