import{_ as e,o as a,c as o,Q as n}from"./chunks/framework.c6ce8c78.js";const h=JSON.parse('{"title":"详解小程序 BackgroundAudioManager 踩坑之旅","description":"","frontmatter":{},"headers":[],"relativePath":"content/docs/17.md","lastUpdated":1697858423000}'),d={name:"content/docs/17.md"},t=n('<h1 id="详解小程序-backgroundaudiomanager-踩坑之旅" tabindex="-1">详解小程序 BackgroundAudioManager 踩坑之旅 <a class="header-anchor" href="#详解小程序-backgroundaudiomanager-踩坑之旅" aria-label="Permalink to &quot;详解小程序 BackgroundAudioManager 踩坑之旅&quot;">​</a></h1><h2 id="本篇涉及到的几个坑-以下-bam-为-backgroundaudiomanager-的缩写" tabindex="-1">本篇涉及到的几个坑（以下 BAM 为 BackgroundAudioManager 的缩写） <a class="header-anchor" href="#本篇涉及到的几个坑-以下-bam-为-backgroundaudiomanager-的缩写" aria-label="Permalink to &quot;本篇涉及到的几个坑（以下 BAM 为 BackgroundAudioManager 的缩写）&quot;">​</a></h2><ul><li>一个误区</li><li>BAM.onStop() 与 BAM.onEnded() 的坑</li><li>BAM.seek() 与 BAM.onSeeked() 的坑</li><li>BAM.onTimeUpdate() 的坑</li><li>在音频页退出小程序暂停音频后返回小程序的坑</li></ul><h3 id="一个误区" tabindex="-1"><strong>一个误区</strong> <a class="header-anchor" href="#一个误区" aria-label="Permalink to &quot;**一个误区**&quot;">​</a></h3><ul><li>BAM.onCanplay()是监听背景音频进入可播放状态事件，并不代表在该事件中，音频就为播放状态。</li></ul><h3 id="bam-onstop-与-bam-onended-的坑" tabindex="-1"><strong>BAM.onStop() 与 BAM.onEnded() 的坑</strong> <a class="header-anchor" href="#bam-onstop-与-bam-onended-的坑" aria-label="Permalink to &quot;**BAM.onStop() 与 BAM.onEnded() 的坑**&quot;">​</a></h3><p>在 BAM.onStop() 与 BAM.onEnded()的回调事件中，audio.src 为空</p><p>BAM.onStop()： 当再次播放音频时，将 data 数据中音频的 src 赋值给 BAM，然后在 onTimeUpdate()事件内跳转到上次暂停的时间点（记得本地缓存音频播放时间哦～）</p><p>BAM.onEnded()：在 BAM.onEnded()回调函数中，将 data 数据中音频的 src 赋值给 BAM，然后在 onTimeUpdate()事件内暂停音频</p><h3 id="bam-seek-与-bam-onseeked-的坑" tabindex="-1"><strong>BAM.seek() 与 BAM.onSeeked() 的坑</strong> <a class="header-anchor" href="#bam-seek-与-bam-onseeked-的坑" aria-label="Permalink to &quot;**BAM.seek() 与 BAM.onSeeked() 的坑**&quot;">​</a></h3><ul><li>设置 src 后立即 seek()失效</li></ul><p>seek 操作最好放在 BAM.onTimeUpdate 事件中。 类似 HTML 的 Audio 元素的 ontimeupdate 方法，建议将 currentTime 的改变都在该方法中进行。</p><ul><li>暂停状态下跳转到指定位置，在 onSeeked()回调中，Android 的 currentTime 是跳转前的时间，而 IOS 是跳转后的时间</li></ul><p>虽然在 onSeeked()回调函数中，Android 获取 currentTime 为跳转前的时间，但若开始播放，还是从指定位置开始播放。所以若有暂停连续跳转并需要获取 currentTime 的需求，可在 onSeeked()回调函数中判断若为 Android 并且为暂停状态时播放。</p><ul><li>开发者工具不走 onSeeked()回调</li></ul><p>如果在 onSeeked()回调里面有特殊操作，记得区分是否是开发者工具～</p><h3 id="bam-ontimeupdate-的坑" tabindex="-1"><strong>BAM.onTimeUpdate() 的坑</strong> <a class="header-anchor" href="#bam-ontimeupdate-的坑" aria-label="Permalink to &quot;**BAM.onTimeUpdate() 的坑**&quot;">​</a></h3><p>在退出小程序后，Android 与 IOS 均不走 onTimeUpdate()事件</p><p>因此若在 onTimeUpdate()事件内实时缓存音频的播放时长会导致在退出小程序暂停后返回拿到的音频缓存时间是退出前的时间。可以在 onPause()与 onEnded()事件中记录暂停时的音频播放时长。（在 onTimeUpdate()事件内所做的操作可根据实际情况考虑节流哦～）</p><h3 id="在音频页退出小程序暂停音频后返回小程序的坑" tabindex="-1"><strong>在音频页退出小程序暂停音频后返回小程序的坑</strong> <a class="header-anchor" href="#在音频页退出小程序暂停音频后返回小程序的坑" aria-label="Permalink to &quot;**在音频页退出小程序暂停音频后返回小程序的坑**&quot;">​</a></h3><p>IOS：BAM.src 为空</p><p>Android：BAM.src 不为空，但 play()失败</p><p>这点与第二点的处理方式相同。当在音频页退出小程序暂停音频后返回，进入 onShow()事件时，将 data 数据中音频的 src 赋值给 BAM，然后在 onTimeUpdate()事件内跳转到上次暂停的时间点</p><p>原本以为可以写的会有很多，最后写下来也就几个点，表达的不也是很清晰，就当学习日记吧</p><p>以上就是本文的全部内容，希望对大家的学习有所帮助，也希望大家多多支持</p>',25),r=[t];function i(l,s,p,c,u,m){return a(),o("div",null,r)}const B=e(d,[["render",i]]);export{h as __pageData,B as default};
