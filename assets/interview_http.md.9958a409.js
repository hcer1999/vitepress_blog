import{_ as o,o as e,c as l,Q as s}from"./chunks/framework.c6ce8c78.js";const y=JSON.parse('{"title":"HTTP 篇","description":"","frontmatter":{},"headers":[],"relativePath":"interview/http.md","lastUpdated":1692074810000}'),a={name:"interview/http.md"},n=s(`<h1 id="http-篇" tabindex="-1">HTTP 篇 <a class="header-anchor" href="#http-篇" aria-label="Permalink to &quot;HTTP 篇&quot;">​</a></h1><h2 id="一-http-状态码知道哪些-分别什么意思" tabindex="-1">一. HTTP 状态码知道哪些？分别什么意思？ <a class="header-anchor" href="#一-http-状态码知道哪些-分别什么意思" aria-label="Permalink to &quot;一. HTTP 状态码知道哪些？分别什么意思？&quot;">​</a></h2><p><strong>1XX：信息状态码</strong></p><ul><li><code>100 Continue</code> 继续，一般在发送 post 请求时，已发送了 http header 之后服务端将返回此信息吗，表示确认，之后再发送具体参数信息</li></ul><p><strong>2XX：成功状态码</strong></p><ul><li><code>200 OK</code> 正常返回信息</li><li><code>201 Created</code> 请求成功并且服务器创建了新的资源</li><li><code>202 Accepted</code> 服务器已接受请求，但尚未处理</li></ul><p><strong>3XX：重定向</strong></p><ul><li><code>301 Moved Permanently</code> 请求的网页已永久移动到新位置</li><li><code>302 Found</code> 临时重定向</li><li><code>303 See Other</code> 临时重定向，且总是使用 GET 请求新的 URL</li><li><code>304 Not Modified</code> 自从上次请求后，请求的网页未修改过</li></ul><p><strong>4XX：客户端错误</strong></p><ul><li><code>400 Bad Request</code> 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求</li><li><code>401 Unauthorized</code> 请求未授权</li><li><code>403 Forbidden</code> 禁止访问</li><li><code>404 Not Found</code> 找不到任何与 URL 相匹配的资源</li></ul><p><strong>5XX：服务器错误</strong></p><ul><li><code>500 Internal Server Error</code> 最常见的服务器端错误</li><li><code>503 Service Unavailable</code> 服务器端暂时无法处理请求（可能是过载或维护）</li></ul><h2 id="二-http-的几种请求方法用途" tabindex="-1">二. HTTP 的几种请求方法用途 <a class="header-anchor" href="#二-http-的几种请求方法用途" aria-label="Permalink to &quot;二. HTTP 的几种请求方法用途&quot;">​</a></h2><p><strong>GET 方法</strong></p><ul><li>发送一个请求来取得服务器上的某一资源</li></ul><p><strong>POST 方法</strong></p><ul><li>向 <code>URL</code> 指定的资源提交数据或附加新的数据</li></ul><p><strong>PUT 方法</strong></p><ul><li>根 <code>POST</code> 方法很像，也是向服务器提交数据。但是他们的不同之处在于 <code>PUT</code> 指定了资源在服务器上的位置，而 <code>POST</code> 没有</li></ul><p><strong>HEAD 方法</strong></p><ul><li>只请求页面的首部</li></ul><p><strong>DELETE 方法</strong></p><ul><li>删除服务器上的某资源</li></ul><p><strong>OPTIONS 方法</strong></p><ul><li>它用于获取当前 <code>URL</code> 所支持的方法。如果请求成功，会有一个 <code>Allow</code> 的头包含类似<code>“GET,POST”</code>这样的信息</li></ul><p><strong>TRACE 方法</strong></p><ul><li><code>TRACE</code> 方法被用于激发一个远程的，应用层的请求消息回路</li></ul><p><strong>CONNECT 方法</strong></p><ul><li>把请求的连接转换到透明的 <code>TCP/IP</code> 通道</li></ul><h2 id="三-http-缓存有哪几种" tabindex="-1">三. HTTP 缓存有哪几种 <a class="header-anchor" href="#三-http-缓存有哪几种" aria-label="Permalink to &quot;三. HTTP 缓存有哪几种&quot;">​</a></h2><blockquote><p>当客户端向服务器请求资源时，会先抵达浏览器缓存，如果浏览器有“要请求资源”的副本，就可以直接从浏览器缓存中提取而不是从原始服务器中提取这个资源。常见的 <code>http</code> 缓存只能缓存 <code>get</code> 请求响应的资源。</p></blockquote><p>详情请看这篇文章：<a href="https://zhuanlan.zhihu.com/p/29750583" target="_blank" rel="noreferrer">缓存机制一二三</a></p><h2 id="四-get-和-post-的区别" tabindex="-1">四. GET 和 POST 的区别 <a class="header-anchor" href="#四-get-和-post-的区别" aria-label="Permalink to &quot;四. GET 和 POST 的区别&quot;">​</a></h2><ul><li><p><code>GET</code>：一般用于信息获取，使用 <code>URL</code> 传递参数，传输过程是透明的，对所发送信息的数量也有限制，一般在 2000 个字符，有的浏览器是 8000 个字符</p></li><li><p><code>POST</code>：一般用于修改服务器上的资源，传输过程是加密的，传输的数据的长度现在 <code>GET</code> 要长</p></li></ul><p>在以下情况中，请使用 <code>POST</code> 请求：</p><ol><li>无法使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（<code>POST</code> 没有数据量限制）</li><li>发送包含未知字符的用户输入时，<code>POST</code> 比 <code>GET</code> 更稳定也更可靠</li></ol><h2 id="五-cookie-与-localstorage-与-sessionstorage-与-session" tabindex="-1">五. Cookie 与 LocalStorage 与 SessionStorage 与 Session <a class="header-anchor" href="#五-cookie-与-localstorage-与-sessionstorage-与-session" aria-label="Permalink to &quot;五. Cookie 与 LocalStorage 与 SessionStorage 与 Session&quot;">​</a></h2><ul><li><p><strong>Cookie</strong></p><ul><li><p>特性</p><ul><li><code>Cookie</code> 非常小，它的大小限制为 <code>4KB</code> 左右</li><li>主要用途是保存登录信息</li><li>一般由服务器生成，可设置失效时间。如果在浏览器端生成 <code>Cookie</code>，默认是关闭浏览器后失效</li><li>每次都会携带在 <code>HTTP</code> 头中，如果使用 <code>cookie</code> 保存过多数据会带来性能问题</li><li>原生 <code>API</code> 不如 <code>storage</code> 友好，需要自己封装函数</li></ul></li><li><p>API</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cookie</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p><strong>localStorage 和 sessionStorage</strong></p><ul><li><p>共同点:</p><ul><li>存储大小均为 <code>5M</code> 左右</li><li>都有同源策略限制</li><li>仅在客户端中保存，不参与和服务器的通信</li></ul></li><li><p>不同点</p><ul><li><strong>数据的存储时间</strong><ul><li><code>localStorage</code>: 存储的数据是永久性的，除非用户人为删除否则会一直存在。</li><li><code>sessionStorage</code>: 与存储数据的脚本所在的标签页的有效期是相同的。一旦窗口或者标签页被关闭，那么所有通过 <code>sessionStorage</code> 存储的数据也会被删除。</li></ul></li><li><strong>作用域</strong><ul><li><code>localStorage</code>: 在同一个浏览器内，同源文档之间共享 <code>localStorage</code> 数据，可以互相读取、覆盖。</li><li><code>sessionStorage</code>: 与 <code>localStorage</code> 一样需要同一浏览器同源文档这一条件。不仅如此，<code>sessionStorage</code> 的作用域还被限定在了窗口中，也就是说，只有同一浏览器、同一窗口的同源文档才能共享数据。</li></ul></li></ul></li><li><p><strong>API</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//sessionStorage用法相同</span></span>
<span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 以&quot;x&quot;为名字存储一个数值</span></span>
<span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 获取数值</span></span>
<span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">key</span><span style="color:#A6ACCD;">(i) </span><span style="color:#676E95;font-style:italic;">// 获取第i对的名字</span></span>
<span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 获取该对的值</span></span>
<span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 全部删除</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul></li></ul>`,38),t=[n];function c(i,p,r,d,u,g){return e(),l("div",null,t)}const C=o(a,[["render",c]]);export{y as __pageData,C as default};
