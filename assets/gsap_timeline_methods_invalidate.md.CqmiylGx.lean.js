import{l as t,c as s,a5 as a,v as i,a as l}from"./chunks/framework.DJyBczLA.js";const m=JSON.parse('{"title":"GSAP中文文档 - timeline 方法 - 使无效（invalidate）","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/timeline/methods/invalidate.md","filePath":"gsap/timeline/methods/invalidate.md","lastUpdated":1733646466000}'),n={name:"gsap/timeline/methods/invalidate.md"};function d(r,e,o,p,c,h){return l(),s("div",null,e[0]||(e[0]=[a('<h1 id="gsap中文文档-timeline-方法-使无效-invalidate" tabindex="-1">GSAP中文文档 - timeline 方法 - 使无效（invalidate） <a class="header-anchor" href="#gsap中文文档-timeline-方法-使无效-invalidate" aria-label="Permalink to &quot;GSAP中文文档 - timeline 方法 - 使无效（invalidate）&quot;">​</a></h1><h2 id="使无效-invalidate" tabindex="-1">使无效（invalidate） <a class="header-anchor" href="#使无效-invalidate" aria-label="Permalink to &quot;使无效（invalidate）&quot;">​</a></h2><p>清除所有子补间的初始化数据（如记录的起始/结束值），这在您想要重新启动时间线而不恢复到任何先前记录的起始值时非常有用。当您对动画调用 <code>invalidate()</code> 时，它将在下一次渲染时重新初始化，并且它的 <code>vars</code> 对象将被重新解析。动画的定时（持续时间、开始时间、延迟）将不受影响。</p><h3 id="方法签名" tabindex="-1">方法签名 <a class="header-anchor" href="#方法签名" aria-label="Permalink to &quot;方法签名&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>invalidate(): self</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>[覆盖] 清除任何内部记录的起始/结束值，这在您想要重新启动动画而不恢复到任何先前记录的起始值时非常有用。</p><h3 id="返回值-returns" tabindex="-1">返回值（Returns） <a class="header-anchor" href="#返回值-returns" aria-label="Permalink to &quot;返回值（Returns）&quot;">​</a></h3><ul><li>self <ul><li>返回实例本身，便于链式调用。</li></ul></li></ul><h3 id="详细信息-details" tabindex="-1">详细信息（Details） <a class="header-anchor" href="#详细信息-details" aria-label="Permalink to &quot;详细信息（Details）&quot;">​</a></h3><p>清除所有子补间的初始化数据（如记录的起始/结束值），这在例如您想要重新启动时间线而不恢复到任何先前记录的起始值时非常有用。当您对动画调用 <code>invalidate()</code> 时，它将在下一次渲染时重新初始化，并且它的 <code>vars</code> 对象将被重新解析。动画的定时（持续时间、开始时间、延迟）将不受影响。</p><p>例如，假设 <code>element.x</code> 是 0，然后您执行 <code>tl.to(element, {duration: 2, x: &quot;+=100&quot;})</code>。它将在 2 秒内从 0 动画到 100。如果您 <code>restart()</code> 那个补间，它将完全相同（从 0 动画到 100）。但是，假设在那个补间运行一次后，您想要清除内部记录的起始/结束值，以便 x 动画到比它现在的位置（在这个例子中是 100）多 100。如果我们现在对那个时间线（或补间）调用 <code>invalidate()</code>，它将在下一次渲染时重新解析起始/结束值，从而使它将 x 从 100 动画到 200。</p><p>当您使时间线无效时，它会自动使所有子元素无效。</p><p>注意：如果您只想在补间每次重复时无效，您可以使用补间的 <code>repeatRefresh: true</code> 特殊属性。</p>',13),i("iframe",{src:"https://www.youtube.com/embed/p1MAs-P_APk?si=500",width:"100%",height:"500",frameborder:"0",allowfullscreen:""},null,-1),a(`<h2 id="示例代码-example-code" tabindex="-1">示例代码（Example Code） <a class="header-anchor" href="#示例代码-example-code" aria-label="Permalink to &quot;示例代码（Example Code）&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使时间线及其所有子补间无效</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,2),i("iframe",{src:"https://codepen.io/GreenSock/pen/ZEzajvN",width:"100%",height:"500",frameborder:"0",allowfullscreen:""},null,-1)]))}const v=t(n,[["render",d]]);export{m as __pageData,v as default};
