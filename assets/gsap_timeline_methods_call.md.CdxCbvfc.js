import{l as n,c as l,a5 as e,v as s,i as a,a as t}from"./chunks/framework.DJyBczLA.js";const u=JSON.parse('{"title":"GSAP中文文档 - timeline 方法 - 调用(call)","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/timeline/methods/call.md","filePath":"gsap/timeline/methods/call.md","lastUpdated":1733646466000}'),p={name:"gsap/timeline/methods/call.md"};function h(r,i,o,k,d,c){return t(),l("div",null,i[0]||(i[0]=[e(`<h1 id="gsap中文文档-timeline-方法-调用-call" tabindex="-1">GSAP中文文档 - timeline 方法 - 调用(call) <a class="header-anchor" href="#gsap中文文档-timeline-方法-调用-call" aria-label="Permalink to &quot;GSAP中文文档 - timeline 方法 - 调用(call)&quot;">​</a></h1><h2 id="调用-call" tabindex="-1">调用（call） <a class="header-anchor" href="#调用-call" aria-label="Permalink to &quot;调用（call）&quot;">​</a></h2><p>向时间线的末尾（或使用 <code>position</code> 参数在其他地方）添加回调 - 这是一个方便的方法，实现的效果与 <code>add(gsap.delayedCall(...))</code> 完全相同，但代码更少。换句话说，以下两行代码产生相同的结果：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">param1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">param2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delayedCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myFunction, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myFunction, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这与在时间线上使用 <code>onComplete</code> 特殊属性不同，因为一旦你添加了回调，它就会保持在原位，而 <code>onComplete</code> 总是在时间线的末尾被调用。</p><h3 id="方法签名" tabindex="-1">方法签名 <a class="header-anchor" href="#方法签名" aria-label="Permalink to &quot;方法签名&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>call(callback: Function, params: Array, position: [Number | String | Label]): self</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>向时间线的末尾（或使用 <code>position</code> 参数在其他地方）添加回调。</p><h3 id="参数-parameters" tabindex="-1">参数（Parameters） <a class="header-anchor" href="#参数-parameters" aria-label="Permalink to &quot;参数（Parameters）&quot;">​</a></h3><ul><li><p><strong>callback</strong>: Function</p><ul><li>要添加到时间线的回调函数。</li></ul></li><li><p><strong>params</strong>: Array</p><ul><li>传递给回调函数的参数数组。</li></ul></li><li><p><strong>position</strong>: [Number | String | Label]（可选）</p><ul><li>指定在时间线中插入回调的位置。</li></ul></li></ul><h3 id="返回值-returns" tabindex="-1">返回值（Returns） <a class="header-anchor" href="#返回值-returns" aria-label="Permalink to &quot;返回值（Returns）&quot;">​</a></h3><ul><li>self <ul><li>返回实例本身，便于链式调用。</li></ul></li></ul><h3 id="详细信息-details" tabindex="-1">详细信息（Details） <a class="header-anchor" href="#详细信息-details" aria-label="Permalink to &quot;详细信息（Details）&quot;">​</a></h3><p>例如，如果一个时间线包含一个1秒的补间，然后你 <code>call(myFunction)</code>，它会被放置在1秒的位置。然后如果你再添加一个1秒的补间，时间线的持续时间现在将是2秒，但 <code>myFunction</code> 回调仍然会在1秒的位置被调用。<code>onComplete</code> 会在末尾（2秒）被调用。</p><p>请记住，你可以将这些调用链式组合，并使用其他方便的方法如 <code>to()</code>, <code>fromTo()</code>, <code>set()</code> 等，快速构建序列：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//create a timeline that calls myFunction() when it completes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ onComplete: myFunction })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//now we&#39;ll use chaining, but break each step onto a different line for readability...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//tween element&#39;s x to 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //then call myCallback()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCallback)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //then set element.opacity to 0.5 immediately</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, { opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //then call otherFunction(&quot;param1&quot;, &quot;param2&quot;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(otherFunction, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //finally tween the rotation of element1, element2, and element3 to 45 and stagger the start times by 0.25 seconds</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([element1, element2, element3], {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stagger: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>默认情况下，调用被添加到时间线的<strong>末尾</strong>，但您可以使用位置参数精确控制它们的位置。它使用灵活的语法，具有以下选项：</p><ul><li><strong>绝对时间</strong>（以秒为单位），从时间线的开始测量，作为一个<strong>数字</strong>，如 <code>3</code></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从时间线的开始处精确插入3秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myFunction, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><strong>标签</strong>，如 <code>&quot;someLabel&quot;</code>。如果标签不存在，它将被添加到时间线的末尾。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 &quot;someLabel&quot; 标签处插入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myFunction, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;someLabel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>&quot;&lt;&quot;</code> 前一个动画的<strong>开始</strong>。将 <code>&lt;</code> 视为指向前一个动画开始的指针。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在前一个动画的开始处插入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myFunction, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>&quot;&gt;&quot;</code> 前一个动画的<strong>结束</strong>。将 <code>&gt;</code> 视为指向前一个动画结束的指针。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在前一个动画的结束处插入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myFunction, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p>一个复杂的字符串，其中 <code>&quot;+=&quot;</code> 和 <code>&quot;-=&quot;</code> 前缀表示<strong>相对</strong>值。当一个数字跟随 <code>&lt;</code> 或 <code>&quot;&gt;&quot;</code> 时，它被解释为相对的，所以 <code>&quot;&lt;2&quot;</code> 与 <code>&quot;&lt;+=2&quot;</code> 相同。示例：</p><ul><li><code>&quot;+=1&quot;</code> - 比时间线结束早1秒（创建间隙）</li><li><code>&quot;-=1&quot;</code> - 比时间线结束晚1秒（重叠）</li><li><code>&quot;myLabel+=2&quot;</code> - 比标签 <code>&quot;myLabel&quot;</code> 晚2秒</li><li><code>&quot;&lt;+=3&quot;</code> - 比前一个动画的开始晚3秒</li><li><code>&quot;&lt;3&quot;</code> - 与 <code>&quot;&lt;+=3&quot;</code> 相同（见上文）（当跟随 <code>&lt;</code> 或 <code>&quot;&gt;&quot;</code> 时，<code>&quot;+=&quot;</code> 是隐含的）</li><li><code>&quot;&gt;-0.5&quot;</code> - 比前一个动画的结束早0.5秒。就像说 &quot;前一个动画的结束加上 -0.5&quot;</li></ul></li><li><p>一个基于<strong>百分比</strong>的复杂字符串。当紧跟 <code>&quot;+=&quot;</code> 或 <code>&quot;-=&quot;</code> 前缀时，百分比是基于<strong>被插入动画</strong>的总持续时间。当紧跟 <code>&lt;</code> 或 <code>&quot;&gt;&quot;</code> 时，它是基于<strong>前一个动画</strong>的总持续时间。注意：总持续时间包括重复/悠悠。示例：</p><ul><li><code>&quot;-=25%&quot;</code> - 与时间线结束重叠，重叠部分为插入动画总持续时间的25%</li><li><code>&quot;+=50%&quot;</code> - 超过时间线结束，超过部分为插入动画总持续时间的50%，创建间隙</li><li><code>&quot;&lt;25%&quot;</code> - 从前一个动画的开始25%处。与 <code>&quot;&gt;-75%&quot;</code> 相同，即从前一个动画的结束处负75%</li><li><code>&quot;&lt;+=25%&quot;</code> - 从前一个动画的开始处插入动画总持续时间的25%。与 <code>&quot;&lt;25%&quot;</code> 不同，后者的百分比是基于前一个动画的总持续时间，而任何紧跟 <code>&quot;+=&quot;</code> 或 <code>&quot;-=&quot;</code> 的都基于插入动画的总持续时间。</li><li><code>&quot;myLabel+=30%&quot;</code> - 从标签 <code>&quot;myLabel&quot;</code> 处插入动画总持续时间的30%</li></ul></li></ul><p><strong>基于百分比的值是在 GSAP 3.7.0 中添加的</strong></p><p><strong>“前一个动画”</strong> 指的是最近插入的动画，而不一定是最接近时间线末尾的动画。</p><h2 id="位置参数交互式演示" tabindex="-1">位置参数交互式演示 <a class="header-anchor" href="#位置参数交互式演示" aria-label="Permalink to &quot;位置参数交互式演示&quot;">​</a></h2>`,29),s("iframe",{src:"https://codepen.io/GreenSock/pen/PopXddg",width:"100%",height:"800",scrolling:"no",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},null,-1),s("p",null,[a("务必阅读我们的教程"),s("a",{href:"https://gsap.com/resources/position-parameter/",target:"_blank",rel:"noreferrer"},"《理解位置参数》"),a(" ，其中包含交互式时间线可视化和视频。")],-1)]))}const g=n(p,[["render",h]]);export{u as __pageData,g as default};
