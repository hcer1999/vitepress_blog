import{l as a,c as i,a5 as s,v as e,a as n}from"./chunks/framework.DJyBczLA.js";const E=JSON.parse('{"title":"GSAP中文文档 - 补间动画（Tween）","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/tween/start.md","filePath":"gsap/tween/start.md","lastUpdated":1733646466000}'),d={name:"gsap/tween/start.md"};function r(l,t,o,p,h,k){return n(),i("div",null,t[0]||(t[0]=[s(`<h1 id="gsap中文文档-补间动画-tween" tabindex="-1">GSAP中文文档 - 补间动画（Tween） <a class="header-anchor" href="#gsap中文文档-补间动画-tween" aria-label="Permalink to &quot;GSAP中文文档 - 补间动画（Tween）&quot;">​</a></h1><p>Tween 是执行所有动画工作的实体 - 可以将其视为一个<strong>高性能属性设置器</strong>。您提供目标（您想要动画的对象）、持续时间以及您想要动画的任何属性，当其播放头移动到新位置时，它会计算出该点的属性值，并相应地应用它们。</p><p><strong>创建 Tween 的方法</strong>（所有这些方法都返回一个 Tween 实例）：</p><ul><li><a href="/vitepress_blog/gsap/gsap/methods/to">gsap.to()</a></li><li><a href="/vitepress_blog/gsap/gsap/methods/from">gsap.from()</a></li><li><a href="/vitepress_blog/gsap/gsap/methods/from-to">gsap.fromTo()</a></li></ul><p>对于简单的动画，上述方法就足够了！例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 1 秒内旋转并移动具有 &quot;box&quot; 类的元素（&quot;x&quot; 是 translateX() 变换的快捷方式）。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">27</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,6),e("iframe",{src:"https://codepen.io/GreenSock/pen/wvwEOZL",width:"100%",height:"400",scrolling:"no",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},null,-1),s(`<p>由于 GSAP 可以动画化任何对象的任何属性，您<strong>不仅限于 CSS 属性或 DOM 对象</strong>。尽情发挥。您可能会对 GSAP 能够动画化的事项数量以及它“就是能工作”感到惊讶。</p><p>您可以使用 <code>delay</code> 特殊属性进行基本的序列化，但 Timelines 使序列化和复杂的编排变得更加容易。Timeline 就像一个容器，可以容纳多个 Tween 实例（和/或其他 Timelines），您可以在时间上定位它们并将它们作为一个整体进行控制。有关详细信息，请参见 <a href="#">Timeline 文档</a>。</p><p>要稍后控制 Tween 实例，请将其赋值给一个变量（GSAP 方便地面向对象）：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tween </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;elastic&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在我们可以控制它！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">progress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,4),e("iframe",{src:"https://codepen.io/GreenSock/pen/OJLgdyg",width:"100%",height:"400",scrolling:"no",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},null,-1),s(`<div class="info custom-block"><p class="custom-block-title">INFO</p><p>要简单地启动动画并让它们运行，无需使用变量。Tween 默认情况下会立即播放（尽管您可以设置 <code>delay</code> 或 <code>paused</code> 值），当它们完成后，它们会自动清理自己。随意调用 <code>gsap.to()</code>，不必担心清理。</p></div><p><strong>参数</strong></p><ol><li><strong>targets</strong> - 您想要动画化属性的对象。这可以是像 <code>&quot;.class&quot;</code>, <code>&quot;#id&quot;</code> 等选择器文本（GSAP 在内部使用 <code>document.querySelectorAll()</code>），也可以是元素的直接引用、通用对象，甚至是对象数组。</li><li><strong>vars</strong> - 一个包含您想要动画化的所有属性/值的对象，以及任何特殊属性，如 <code>ease</code>, <code>duration</code>, <code>delay</code>, 或 <code>onComplete</code>（如下所列）。</li></ol><h2 id="特殊属性" tabindex="-1">特殊属性 <a class="header-anchor" href="#特殊属性" aria-label="Permalink to &quot;特殊属性&quot;">​</a></h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>callbackScope</td><td>用于所有回调（onStart, onUpdate, onComplete 等）的作用域。</td></tr><tr><td>data</td><td>将任意数据分配给此属性（一个字符串，一个对象的引用，任何东西），它会附加到 tween 实例本身，以便您稍后可以像 <code>yourTween.data</code> 一样引用它。</td></tr><tr><td>delay</td><td>动画应该开始之前的延迟时间（以秒为单位）。</td></tr><tr><td>duration</td><td>动画的持续时间（以秒为单位）。默认值：<code>0.5</code>。</td></tr><tr><td>ease</td><td>控制动画期间的变化率，赋予它特定的感觉。例如，<code>&quot;elastic&quot;</code> 或 <code>&quot;strong.inOut&quot;</code>。查看 <a href="#">Ease Visualizer</a> 了解所有选项。<code>ease</code> 可以是一个字符串（最常见的）或是一个接受一个介于 0 和 1 之间的进度值并返回一个转换后的、标准化的值的函数。默认值：<code>&quot;power1.out&quot;</code>。</td></tr><tr><td>id</td><td>允许您（可选地）为您的 tween 实例分配一个唯一标识符，以便您稍后可以使用 <code>gsap.getById()</code> 找到它，并且它会在 GSDevTools 中以该 id 显示。</td></tr><tr><td>immediateRender</td><td>通常，tween 会等到下一个更新周期（tick）才进行第一次渲染，除非您指定了延迟。设置 <code>immediateRender: true</code> 可以强制它在实例化时立即渲染。默认值：对于 to() tweens 是 <code>false</code>，对于 from() 和 fromTo() tweens 或任何具有 scrollTrigger 应用的 tweens 是 <code>true</code>。</td></tr><tr><td>inherit</td><td>通常，tweens 会继承其父时间线的 <code>defaults</code> 对象（如果定义了的话），但您可以通过设置 <code>inherit: false</code> 在每个 tween 基础上禁用此行为。</td></tr><tr><td>lazy</td><td>当 tween 首次渲染并读取其起始值时，GSAP 会尝试将值的写入延迟到当前“tick”的最后，这可以提高性能，因为它避免了浏览器不喜欢的读写/读写布局破坏。要为特定 tween 禁用延迟渲染，请设置 <code>lazy: false</code>。在大多数情况下，没有必要设置 <code>lazy</code>。要了解更多信息，请观看此视频。默认值：<code>true</code>（零持续时间的 tweens 除外）。</td></tr><tr><td>onComplete</td><td>当动画完成时调用的函数。</td></tr><tr><td>onCompleteParams</td><td>传递给 onComplete 函数的参数数组。例如，<code>gsap.to(&quot;.class&quot;, {x:100, onComplete:myFunction, onCompleteParams:[&quot;param1&quot;, &quot;param2&quot;]});</code>。</td></tr><tr><td>onRepeat</td><td>每次动画进入新的迭代周期（重复）时调用的函数。显然，这只在您设置非零 <code>repeat</code> 时发生。</td></tr><tr><td>onRepeatParams</td><td>传递给 onRepeat 函数的参数数组。</td></tr><tr><td>onReverseComplete</td><td>当动画从反向到达其开始时调用的函数（不包括重复）。</td></tr><tr><td>onReverseCompleteParams</td><td>传递给 onReverseComplete 函数的参数数组。</td></tr><tr><td>onStart</td><td>当动画开始时调用的函数（当其时间从 0 变为其他值时，如果 tween 多次重启，这种情况可能会发生多次）。</td></tr><tr><td>onStartParams</td><td>传递给 onStart 函数的参数数组。</td></tr><tr><td>onUpdate</td><td>每次动画更新时调用的函数（在移动其播放头的每个“tick”上）。</td></tr><tr><td>onUpdateParams</td><td>传递给 onUpdate 函数的参数数组。</td></tr><tr><td>overwrite</td><td>如果为 <code>true</code>，则所有相同目标的 tweens 将立即被杀死，无论它们影响哪些属性。如果为 <code>&quot;auto&quot;</code>，则当 tween 第一次渲染时，它会寻找任何活动的动画中的冲突（影响相同目标的相同属性）并仅杀死其他 tweens 的<strong>这些部分</strong>。不冲突的部分保持不变。如果为 <code>false</code>，则不采用任何覆盖策略。默认值：<code>false</code>。</td></tr><tr><td>paused</td><td>如果为 <code>true</code>，则动画将在创建后立即暂停。默认值：<code>false</code>。</td></tr><tr><td>repeat</td><td>动画应该重复的次数。所以 <code>repeat: 1</code> 将播放总共两次迭代。默认值：<code>0</code>。<code>repeat: -1</code> 将无限重复。</td></tr><tr><td>repeatDelay</td><td>重复之间的等待时间（以秒为单位）。默认值：<code>0</code>。</td></tr><tr><td>repeatRefresh</td><td>设置 <code>repeatRefresh: true</code> 会导致重复的 tween 在每次完整迭代（不包括 yoyo 的）时 <code>invalidate()</code> 并重新记录其起始/结束值。这在您使用动态值（相对的、随机的或基于函数的）时很有用。例如，<code>x: &quot;random(-100, 100)&quot;</code> 将在每次重复时获得一个新的随机 x 值。<code>duration</code>, <code>delay</code> 和 <code>stagger</code> 并不刷新。</td></tr><tr><td>reversed</td><td>如果为 <code>true</code>，则动画将从其播放头反转开始，这意味着它将朝向其开始移动。由于播放头从 0 开始，因此反转的 tween 最初会<strong>看起来</strong>暂停，因为其播放头不能向后移动超过开始。</td></tr><tr><td>runBackwards</td><td>如果为 <code>true</code>，则动画将反转其起始和结束值（这就是 from() tween 在内部做的），尽管 ease 不会被翻转。换句话说，您可以通过设置 <code>runBackwards: true</code> 将 <code>to()</code> tween 变成 <code>from()</code>。</td></tr><tr><td>stagger</td><td>如果定义了多个目标，您可以通过设置像 <code>stagger: 0.1</code>（每个开始时间之间 0.1 秒）的值来轻松地错开开始时间。或者您可以使用 stagger 对象获得更高级的错开。更多信息，请参见 <a href="#">stagger 文档</a>。</td></tr><tr><td>startAt</td><td>为任何属性定义起始值（即使它们不进行动画化）。例如，<code>startAt: {x: -100, opacity: 0}</code></td></tr></tbody></table><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h2><p>插件为 GSAP 的核心添加了额外的功能。一些插件使得使用渲染库如 PIXI.js 或 EaselJS 更加容易，而其他插件则增加了如形变 SVG 形状、添加拖放功能等超能力。这使得 GSAP 核心保持相对小巧，并且只在需要时添加功能。<a href="#">查看所有插件列表</a>。</p><h2 id="基于函数的值" tabindex="-1">基于函数的值 <a class="header-anchor" href="#基于函数的值" aria-label="Permalink to &quot;基于函数的值&quot;">​</a></h2><p>通过使用函数为任何值，您可以获得<strong>非常动态的动画</strong>，并且该函数将<strong>在 tween 第一次渲染时</strong>为每个目标调用一次，并且该函数返回的任何值将用作该值。这在应用条件逻辑或随机化事物时非常有用（尽管 GSAP 也有内置的随机化功能...向下滚动以获取更多信息）。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正常值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 基于函数的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>该函数传递三个参数：</p><ol><li>index - 目标在数组中的索引。例如，如果有 3 个 <code>&lt;div&gt;</code> 元素具有 &quot;box&quot; 类，并且您 <code>gsap.to(&quot;.box&quot;, ...)</code>，则该函数将被调用 3 次（每个目标一次）；索引首先是 <code>0</code>，然后是 <code>1</code>，最后是 <code>2</code>。</li><li>target - 目标本身（本例中的 <code>&lt;div&gt;</code> 元素）</li><li>targets - 目标数组（与 <code>tween.targets()</code> 相同）</li></ol><h2 id="随机值" tabindex="-1">随机值 <a class="header-anchor" href="#随机值" aria-label="Permalink to &quot;随机值&quot;">​</a></h2><p>通过像 <code>&quot;random(-100, 100)&quot;</code> 这样的字符串定义随机值范围，或像 <code>&quot;random([red, blue, green])&quot;</code> 这样的字符串定义数组，GSAP 将为每个目标<strong>相应地</strong>替换一个随机值！这使得高级随机效果变得简单。您甚至可以有一个随机数字四舍五入到任何数字的最接近增量！例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;random(-100, 100, 5)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为每个目标选择一个介于 -100 和 100 之间的随机数字，四舍五入到最接近的 5！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>或者使用数组样式的值，GSAP 将随机选择其中之一：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;random([0, 100, 200, 500])&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 随机选择一个值（0, 100, 200, 或 500）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>还有一个 <code>gsap.utils.random()</code> 函数，如果您更喜欢直接使用。</p><h2 id="相对值" tabindex="-1">相对值 <a class="header-anchor" href="#相对值" aria-label="Permalink to &quot;相对值&quot;">​</a></h2><p>使用 <code>&quot;+=&quot;</code> 或 <code>&quot;-=&quot;</code> 前缀来表示相对值。例如，<code>gsap.to(&quot;.class&quot;, {x:&quot;-=20&quot;});</code> 将使 <code>x</code> 动画比开始时<strong>少</strong> 20 像素。<code>{x:&quot;+=20&quot;}</code> 将<strong>添加</strong> 20。</p><h2 id="交错" tabindex="-1">交错 <a class="header-anchor" href="#交错" aria-label="Permalink to &quot;交错&quot;">​</a></h2><p>如果定义了多个目标，您可以通过设置像 <code>stagger: 0.1</code>（每个开始时间之间 0.1 秒）的值来轻松地错开（偏移）每个目标的开始时间。或者您可以使用 stagger 对象获得更高级的错开。更多信息，请参见 <a href="#">stagger 文档</a>。</p><h2 id="序列化" tabindex="-1">序列化 <a class="header-anchor" href="#序列化" aria-label="Permalink to &quot;序列化&quot;">​</a></h2><p>对于基本的序列化，您可以在每个 tween 上使用 <code>delay</code>（如 <code>gsap.to(&quot;.class&quot;, {delay: 0.5, duration: 1, x: 100})</code>），但我们<strong>强烈</strong>推荐使用 <code>Timeline</code> 进行所有但最简单的序列化任务，因为它提供了更大的灵活性，特别是当您在尝试时间控制时。它允许您一个接一个地追加 tweens，然后作为一个整体控制整个序列。您甚至可以让您想要的 tweens 重叠多少就重叠多少，尽可能深入地嵌套时间线，等等。</p><p>时间线还有方便的 to(), from(), 和 fromTo() 方法，所以您可以非常容易地将它们链接在一起并构建复杂的序列：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建时间线</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始序列化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;elastic&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">180</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="关键帧" tabindex="-1">关键帧 <a class="header-anchor" href="#关键帧" aria-label="Permalink to &quot;关键帧&quot;">​</a></h2><p>如果您发现自己一遍又一遍地动画化相同的目标，您绝对应该查看关键帧，这可以使您的代码更加简洁。它们还让您可以轻松地将动画从 CSS 动画移植过来。</p><p>了解更多关于 <a href="#">关键帧</a> 的信息</p><h2 id="注意事项-提示" tabindex="-1">注意事项 / 提示 <a class="header-anchor" href="#注意事项-提示" aria-label="Permalink to &quot;注意事项 / 提示&quot;">​</a></h2><ul><li>您可以通过 <code>gsap.defaults({ease: ...})</code> 更改默认的 ease。默认值是 <code>&quot;power1.out&quot;</code>。</li><li>随时使用 <code>gsap.killTweensOf(yourObject)</code> 杀死特定对象的所有 tweens。您也可以使用选择器文本，如 <code>gsap.killTweensOf(&quot;#someID&quot;);</code></li><li>如果您发现 GreenSock 工具有用，请考虑加入 <a href="#">Club GSAP</a>，这不仅有助于维持持续开发，而且还让您获得仅限会员的额外插件、课程和其他福利。在俱乐部页面了解更多信息。</li></ul><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>delay(value:Number) : [Number | self]</td><td>获取或设置动画的初始延迟，即在动画开始前的时间长度（以秒为单位）。</td></tr><tr><td>duration(value:Number) : [Number | self]</td><td>获取或设置动画的持续时间，不包括任何重复或重复延迟。</td></tr><tr><td>endTime(includeRepeats:Boolean) : Number</td><td>返回动画将根据父时间线的本地时间完成的时间。</td></tr><tr><td>eventCallback(type:String, callback:Function, params:Array) : [Function | self]</td><td>获取或设置事件回调，如 <code>&quot;onComplete&quot;, &quot;onUpdate&quot;, &quot;onStart&quot;</code> 或 <code>&quot;onRepeat&quot;</code> 以及应该传递给该回调的任何参数。</td></tr><tr><td>globalTime(localTime:Number) : Number</td><td>将本地时间转换为 gsap.globalTimeline 上的对应时间（考虑所有嵌套、时间缩放等）。</td></tr><tr><td>invalidate() : self</td><td>[覆盖] 刷新任何内部记录的起始/结束值，如果您想重新启动动画而不想恢复到任何先前记录的起始值，这可能很有用。</td></tr><tr><td>isActive() : Boolean</td><td>指示动画是否当前处于活动状态（意味着虚拟播放头正在积极地移动跨这个实例的时间跨度，并且它没有暂停，也没有任何它的祖先时间线）。</td></tr><tr><td>iteration() : [Number | self]</td><td>获取或设置 tween 的迭代（当前重复）次数。</td></tr><tr><td>kill(target:Object, propertiesList:String) : self</td><td>完全或部分杀死动画，取决于参数。要杀死意味着立即停止动画，将其从其父时间线中移除，并释放它以供垃圾收集。</td></tr><tr><td>pause(atTime:Number, suppressEvents:Boolean) : self</td><td>暂停实例，可选地跳转到特定时间。</td></tr><tr><td>paused(value:Boolean) : [Boolean | self]</td><td>获取或设置动画的暂停状态，这表明动画是否当前暂停。</td></tr><tr><td>play(from:Number, suppressEvents:Boolean) : self</td><td>开始向前播放，可选地从特定时间开始（默认情况下，播放从播放头当前所在位置开始）。</td></tr><tr><td>progress(value:Number, suppressEvents:Boolean) : [Number | self]</td><td>[覆盖] 获取或设置 tween 的进度，这是一个介于 0 和 1 之间的值，表示虚拟播放头的位置（不包括重复），其中 0 是在开始，0.5 是完成一半，1 是完成。</td></tr><tr><td>repeat(value:Number) : [Number | self]</td><td>获取或设置 tween 应该在其第一次迭代后重复的次数。</td></tr><tr><td>repeatDelay(value:Number) : [Number | self]</td><td>获取或设置重复之间的时间长度（以秒为单位）。</td></tr><tr><td>restart(includeDelay:Boolean, suppressEvents:Boolean) : self</td><td>重新启动并从开始向前播放。</td></tr><tr><td>resume() : self</td><td>恢复播放，不改变方向（向前或向后）。</td></tr><tr><td>reverse(from:*, suppressEvents:Boolean) : self</td><td>反转播放，使所有动画方面向后，包括，例如，tween 的 ease。</td></tr><tr><td>reversed(value:Boolean) : [Boolean | self]</td><td>获取或设置动画的反转状态，这表明动画是否应该向后播放。</td></tr><tr><td>revert() : Self</td><td>撤销动画并杀死它，将目标恢复到动画前的状态，包括移除动画添加的内联样式。</td></tr><tr><td>seek(time:*, suppressEvents:Boolean) : self</td><td>跳转到特定时间，不影响实例是否暂停或反转。</td></tr><tr><td>startTime(value:Number) : [Number | self]</td><td>获取或设置动画在父时间线上开始的时间（在定义的任何延迟之后）。</td></tr><tr><td>targets() : Array</td><td></td></tr><tr><td>then(callback:Function) : Promise</td><td>返回一个承诺，以便您可以使用承诺来跟踪 tween 或时间线何时完成。</td></tr><tr><td>time(value:Number, suppressEvents:Boolean) : [Number | self]</td><td>[覆盖] 获取或设置播放头的本地位置（基本上是当前时间），不包括任何重复或重复延迟。</td></tr><tr><td>timeScale(value:Number) : [Number | self]</td><td>用于缩放动画中的时间的因素，其中 1 = 正常速度（默认），0.5 = 半速，2 = 双倍速度等。</td></tr><tr><td>totalDuration(value:Number) : [Number | self]</td><td>[覆盖] 获取或设置 tween 的总持续时间（以秒为单位），包括任何重复或重复延迟。</td></tr><tr><td>totalProgress(value:Number, suppressEvents:Boolean) : [Number | self]</td><td>[覆盖] 获取或设置 tween 的总进度，这是一个介于 0 和 1 之间的值，表示虚拟播放头的位置（包括重复），其中 0 是在开始，0.5 是完成一半，1 是完成。</td></tr><tr><td>totalTime(time:Number, suppressEvents:Boolean) : [Number | self]</td><td>获取或设置根据总持续时间的播放头位置，包括任何重复和重复延迟。</td></tr><tr><td>yoyo(value:Boolean) : [Boolean | self]</td><td>获取或设置 tween 的 yoyo 状态，其中 true 导致 tween 在每次重复时来回移动，交替向后和向前。</td></tr></tbody></table><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>存储任何您想要的数据的地方（如果存在 <code>vars.data</code>，则最初由其填充）。</td></tr><tr><td>ratio</td><td><strong>[只读]</strong> Tween 的进度（一个介于 0 和 1 之间的值，其中 0.5 在中间）<strong>之后</strong>被 <code>ease</code> 运行。所以这个值可能超出 0-1 范围，像 <code>ease: &quot;back&quot;</code> 或 <code>ease: &quot;elastic&quot;</code> 的情况。它可以用作您自己的插值的乘数，如在 <code>onUpdate</code> 回调中。</td></tr><tr><td>scrollTrigger</td><td>一种方便的方式来访问与 tween 关联的 ScrollTrigger。这只在 tween 有 ScrollTrigger 时才能访问。</td></tr><tr><td>vars</td><td>传递给构造函数的配置对象，其中包含您想要动画化的所有属性/值，以及任何可选的<strong>特殊属性</strong>，如 <code>onComplete</code>, <code>onUpdate</code> 等，如 <code>gsap.to(&quot;.class&quot;,{onComplete: func});</code></td></tr></tbody></table>`,35)]))}const u=a(d,[["render",r]]);export{E as __pageData,u as default};
