import{l as n,c as e,a5 as a,v as s,i as t,a as l}from"./chunks/framework.DJyBczLA.js";const g=JSON.parse('{"title":"GSAP中文文档 - CSS","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/css/start.md","filePath":"gsap/css/start.md","lastUpdated":1733646466000}'),p={name:"gsap/css/start.md"};function r(h,i,d,o,k,c){return l(),e("div",null,i[0]||(i[0]=[a(`<h1 id="gsap中文文档-css" tabindex="-1">GSAP中文文档 - CSS <a class="header-anchor" href="#gsap中文文档-css" aria-label="Permalink to &quot;GSAP中文文档 - CSS&quot;">​</a></h1><p>GSAP (GreenSock Animation Platform) 能够动画化几乎所有与 CSS 相关的 DOM 元素属性。常见的动画属性包括变换、透明度和颜色。但实际上，GSAP 能够处理你提供的任何属性。虽然没有一个官方的属性列表（因为列表会太长），但<strong>如果你有疑问 - 试试吧！</strong></p><h2 id="css-属性" tabindex="-1">CSS 属性 <a class="header-anchor" href="#css-属性" aria-label="Permalink to &quot;CSS 属性&quot;">​</a></h2><p>GSAP 可以动画化任何可动画化的 CSS 属性，以及许多使用 CSS <strong>官方不支持</strong>动画化的属性。</p><h4 id="连字符-css-属性" tabindex="-1">连字符 CSS 属性 <a class="header-anchor" href="#连字符-css-属性" aria-label="Permalink to &quot;连字符 CSS 属性&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">提示</p><p>需要注意的是，连字符名称会变成驼峰命名。所以不是 &quot;font-size&quot;，而是使用 &quot;fontSize&quot;。&quot;background-color&quot; 将成为 &quot;backgroundColor&quot;。</p></div><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一些示例属性。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  backgroundColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;red&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// background-color</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fontSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// font-size</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  boxShadow: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0px 0px 20px 20px red&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 动画化复杂字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  borderRadius: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;50% 50%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  height: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;auto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 auto 和 px 值之间动画化 🪄</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="非动画化属性" tabindex="-1">非动画化属性... <a class="header-anchor" href="#非动画化属性" aria-label="Permalink to &quot;非动画化属性...&quot;">​</a></h3><p>如果你定义了一个非动画化属性 - 比如 <code>position: &quot;absolute&quot;</code> 或 <code>borderStyle: &quot;solid&quot;</code> - GSAP 会立即为你应用这个属性。这些非可 tween 属性将在 tween 开始时设置（除了 <code>display: &quot;none&quot;</code>，出于明显的原因，它将在 tween 结束时应用）。</p><details class="details custom-block"><summary>什么是“非动画化属性”？</summary><p>为了让一个属性可动画化，开始、结束和中间值必须有效。如果你在 <code>rotation: 0</code> 和 <code>rotation: 360</code> 之间动画化，中间有有效的数值。按照这个逻辑，你不能在两个不同的背景图像之间动画化，因为没有有效的 CSS 用于 <strong>一点那个图像和一点点那个图像</strong>。background-image 是一个二元属性，有或没有图像，没有中间动画化。</p></details><div class="tip custom-block"><p class="custom-block-title">动画布局</p><p>一些其他“不可能的属性”是 <strong>布局</strong> 属性。这些对于普通 tween 来说太复杂了 - 但将由 GSAP 的 FLIP 插件 <strong>神奇地</strong> 处理。</p></div><h2 id="变换" tabindex="-1">变换 <a class="header-anchor" href="#变换" aria-label="Permalink to &quot;变换&quot;">​</a></h2><p>GSAP 提供了内置的变换别名，这些别名跨浏览器友好，比动画化 transform 字符串更高效、更可靠。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 写出 transform 字符串 🔥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // transform: &quot;translate(-50%,-50%)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  xPercent: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  yPercent: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在常规 CSS 中，你列出变换的顺序很重要，但 GSAP 总是以相同的顺序应用它们以保持一致性：平移（<code>x</code>, <code>y</code>, <code>z</code>），然后是 <code>scale</code>，然后是 <code>rotationX</code>，然后是 <code>rotationY</code>，然后是 <code>skew</code>，然后是 <code>rotation</code>（与 <code>rotationZ</code> 相同）。</p><details class="details custom-block"><summary>深入探究 — 为何使用快速变换？</summary><p>当你以字符串形式定义变换，比如 <code>&quot;transform: translateX(50px)&quot;</code>，GSAP会将其应用到元素上，然后读取并解析浏览器创建的 <code>matrix()</code> 或 <code>matrix3d()</code>。这个过程是必要的，因为字符串可以包含任意数量或顺序的变换值，比如 <code>&quot;translateX(50px) rotate(40deg) scale(0.5,0.5) translateY(100px) rotate(30deg)&quot;</code>。这种方法涉及很多额外的工作。此外，根据 CSS 规范，操作顺序很重要，这可能会导致不熟悉 CSS 变换的人得到意外的结果。</p><p>当你使用简写属性定义，比如使用 <code>x:50</code> 而不是 <code>&quot;transform: translateX(50px)&quot;</code>，GSAP 可以直接处理那个单一值，无需额外计算。简而言之，使用 GSAP 进行变换可以提供性能提升，优化速度，并提供直观一致的操作顺序。</p><p>我们强烈建议使用GSAP内置的变换别名，除非你特别需要非标准的操作顺序，这种情况很少见。</p></details><h3 id="快速参考" tabindex="-1">快速参考 <a class="header-anchor" href="#快速参考" aria-label="Permalink to &quot;快速参考&quot;">​</a></h3><p>以下是简短的变换和其他一些常用属性的列表。</p><table><thead><tr><th>GSAP</th><th>描述或等效 CSS</th></tr></thead><tbody><tr><td>x: 100</td><td>transform: translateX(100px)</td></tr><tr><td>y: 100</td><td>transform: translateY(100px)</td></tr><tr><td>xPercent: 50</td><td>transform: translateX(50%)</td></tr><tr><td>yPercent: 50</td><td>transform: translateY(50%)</td></tr><tr><td>scale: 2</td><td>transform: scale(2)</td></tr><tr><td>scaleX: 2</td><td>transform: scaleX(2)</td></tr><tr><td>scaleY: 2</td><td>transform: scaleY(2)</td></tr><tr><td>rotation: 90</td><td>transform: rotate(90deg)</td></tr><tr><td>rotation: &quot;1.25rad&quot;</td><td>使用弧度 - 无 CSS 替代品</td></tr><tr><td>skew: 30</td><td>transform: skew(30deg)</td></tr><tr><td>skewX: 30</td><td>transform: skewX(30deg)</td></tr><tr><td>skewY: &quot;1.23rad&quot;</td><td>使用弧度 - 无 CSS 替代品</td></tr><tr><td>transformOrigin: &quot;center 40%&quot;</td><td>transform-origin: center 40%</td></tr><tr><td>opacity: 0</td><td>调整元素的透明度</td></tr><tr><td>autoAlpha: 0</td><td>透明度的简写 &amp; 可见性</td></tr><tr><td>duration: 1</td><td>animation-duration: 1s</td></tr><tr><td>repeat: -1</td><td>animation-iteration-count: infinite</td></tr><tr><td>repeat: 2</td><td>animation-iteration-count: 2</td></tr><tr><td>delay: 2</td><td>animation-delay: 2</td></tr><tr><td>yoyo: true</td><td>animation-direction: alternate</td></tr></tbody></table><details class="details custom-block"><summary>关于变换的注意事项</summary><ul><li>要进行基于百分比的平移，使用 <code>xPercent</code> 和 <code>yPercent</code> 而不是通常基于像素的 <code>x</code> 或 <code>y</code>。这允许你将 px 单位和平百分比变换结合起来使用。</li><li>你可以使用<code>scale</code>作为一个快捷方式，来相同地控制scaleX和scaleY属性。</li><li>你可以定义相对值，比如 <code>rotation: &quot;+=30&quot;</code>。</li><li>你声明变换属性的顺序没有影响。</li><li>GSAP 与浏览器中元素的渲染质量无关。有些浏览器似乎能很好地渲染变换后的元素，而有些则在抗锯齿处理上表现不佳。</li><li>基于百分比的 x/y 平移也适用于 SVG 元素。</li></ul></details><h3 id="复杂字符串" tabindex="-1">复杂字符串 <a class="header-anchor" href="#复杂字符串" aria-label="Permalink to &quot;复杂字符串&quot;">​</a></h3><p>GSAP 可以动画化复杂的值，如 <code>boxShadow: &quot;0px 0px 20px 20px red&quot;</code>, <code>borderRadius: &quot;50% 50%&quot;</code>, 和 <code>border: &quot;5px solid rgb(0,255,0)&quot;</code>。在必要时，它会尝试计算属性是否需要供应商前缀，并相应地应用它。</p><h3 id="单位" tabindex="-1">单位 <a class="header-anchor" href="#单位" aria-label="Permalink to &quot;单位&quot;">​</a></h3><p>GSAP 对单位有合理的默认值。如果你想设置 x 属性，你可以说 <code>x: 24</code> 而不是 x: &quot;24px&quot;，因为 GSAP 使用像素作为 x 的默认单位。如果你想指定一个特定的单位，你可以在末尾追加单位值，并用字符串包裹值。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HTMLelement, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 默认 deg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rotation: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.25rad&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用弧度代替</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用 px</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;20vw&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用视口宽度代替</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>如果当前使用的测量单位与当前的一个不匹配，GSAP 会为你转换它们。例如，将元素的宽度从 &quot;50%&quot; 动画化到 &quot;200px&quot;。</p></div><h2 id="_3d-变换" tabindex="-1">3D 变换 <a class="header-anchor" href="#_3d-变换" aria-label="Permalink to &quot;3D 变换&quot;">​</a></h2><p>你可以在所有现代浏览器中动画化 3D 属性，如 <code>rotationX</code>, <code>rotationY</code>, <code>rotationZ</code>（与常规 <code>rotation</code> 相同）, <code>z</code>, <code>perspective</code>, 和 <code>transformPerspective</code>（查看 Can I Use 了解浏览器对 3D 变换的支持详情）。你可以直观地一起动画化 3D 变换属性和 2D 属性：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rotationX: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scaleX: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  z: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">警告</p><p>为了让你元素具有真正的 3D 视觉透视效果，你必须设置父元素的 perspective 属性，或者设置元素本身的 special <code>transformPerspective</code></p></div><p><code>transformPerspective</code> 就像在 CSS <code>transform</code> 样式中直接添加 <code>perspective()</code>，比如：<code>transform: perspective(500px) rotateX(45deg)</code> 这只应用于特定元素。常见值范围从大约 200 到 1000，数字越低，透视失真越强。如果你想让一组元素共享一个共同的透视（相同的消失点），你应该在那些元素的父/容器上设置常规 <code>perspective</code> 属性。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对父元素（容器）应用透视，使透视应用于所有子元素（通常是最好的）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(container, { perspective: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者使用 &quot;transformPerspective&quot; 应用单个元素的透视</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, { transformPerspective: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//sample css:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.myClass {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">translate3d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(10px, 0px, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">200px) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rotateY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(45deg) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//对应的 GSAP 变换（2 秒内动画化）：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scale: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rotationY: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    z: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//sample CSS 使用 perspective():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.myClass {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">perspective</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(500px) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">translateY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(50px) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(120deg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//对应的 GSAP 变换（设置，不动画化）：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    transformPerspective: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>有关透视的更多信息，请查看<a href="https://3dtransforms.desandro.com/perspective" target="_blank" rel="noreferrer">这篇文章</a>。</p><details class="details custom-block"><summary>关于3D变换的注意事项</summary><ol><li><p>在不支持3D变换的浏览器中，这些变换将被忽略。例如，rotationX可能不起作用，但rotation会。可以参考caniuse网站查看支持3D变换的浏览器版本分布情况。</p></li><li><p>所有变换都是缓存的，所以你可以在补间动画中只定义需要动画化的单独属性，而不必担心它们会丢失。你不需要在每个补间动画中定义所有的变换属性——只需定义你想要动画化的属性。你可以随时使用方法读取与变换相关的值（或任何属性）。如果你想清除这些值（包括应用于元素内联样式的变换），可以使用<code>clearProps: &quot;transform&quot;</code>。如果你想强制GSAP重新从CSS解析变换数据（而不是使用之前补间动画记录的数据），可以在配置对象中传递<code>parseTransform: true</code>。</p></li><li><p>GSAP与浏览器中元素的渲染质量无关。有些浏览器似乎能很好地渲染变换后的元素，而有些则在抗锯齿处理上表现不佳。</p></li><li><p>基于百分比的x/y平移也适用于SVG元素。</p></li><li><p>要了解更多关于CSS 3D变换的信息，可以参考这篇文章。</p></li><li><p>Opera mini不支持3D变换。</p></li></ol></details><h3 id="force3d" tabindex="-1">force3D <a class="header-anchor" href="#force3d" aria-label="Permalink to &quot;force3D&quot;">​</a></h3><p><code>force3D</code> 默认为 <code>&quot;auto&quot;</code> 模式，这意味着变换通过使用 <code>translate3d()</code> 而不是 <code>translate()</code> 自动优化以提高速度。这通常会导致浏览器将该元素放到自己的合成层上，使动画更新更高效。在 <code>&quot;auto&quot;</code> 模式下，GSAP 在 tween 完成时会自动切换回 2D（如果不需要 3D）以释放更多 GPU 内存。如果你想保持在 3D 模式，你可以设置 <code>force3D: true</code>。或者，尽可能保持在 2D 模式，设置 <code>force3D: false</code>。有关性能的更多详情，请参阅<a href="https://css-tricks.com/myth-busting-css-animations-vs-javascript/" target="_blank" rel="noreferrer">《神话破除 CSS 动画 vs JavaScript》</a>。</p><h2 id="transformorigin" tabindex="-1">transformOrigin <a class="header-anchor" href="#transformorigin" aria-label="Permalink to &quot;transformOrigin&quot;">​</a></h2><p>设置所有变换（2D 和/或 3D）发生的原点。默认情况下，它在元素的中心（<code>&quot;50% 50%&quot;</code>）。你可以使用关键词 <code>&quot;top&quot;</code>, <code>&quot;left&quot;</code>, <code>&quot;right&quot;</code>, 或 <code>&quot;bottom&quot;</code> 定义值，或者你可以使用百分比（右下角是 <code>&quot;100% 100%&quot;</code>）或像素。例如，如果你想让一个对象围绕其左上角旋转，你可以这样做：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//围绕元素的左上角旋转</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transformOrigin: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;left top&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>第一个值对应于 x 轴，第二个值对应于 y 轴，所以如果你想让对象围绕从左边缘正好 50px 和从顶部 20px 的偏移点变换，你可以这样做：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//围绕从左上角偏移 50px, 20px 的点旋转/缩放</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">270</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scale: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transformOrigin: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;50px 20px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这也适用于 SVG 元素！</p><p>你可以定义一个 transformOrigin 作为 <strong>3D 值</strong> 通过添加第三个数字，比如要围绕 y 轴从 400px 距离的点旋转，你可以这样做：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//围绕一个在 3D 空间中后退 400px 的点旋转，创造出有趣的效果：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rotationY: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transformOrigin: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;50% 50% -400px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">SVG</p><p>GSAP 确实使 <code>transformOrigin</code> 在 SVG 元素上跨浏览器一致工作。但请记住，SVG 元素根据规范并不官方支持 3D 变换。</p></div><h2 id="svg" tabindex="-1">SVG <a class="header-anchor" href="#svg" aria-label="Permalink to &quot;SVG&quot;">​</a></h2><h3 id="svgorigin" tabindex="-1">svgOrigin <a class="header-anchor" href="#svgorigin" aria-label="Permalink to &quot;svgOrigin&quot;">​</a></h3><p><strong>仅适用于 SVG 元素</strong> 与 <code>transformOrigin</code> 完全相同，但它使用 SVG 的全局坐标空间而不是元素的局部坐标空间。这在例如你想让一堆 SVG 元素围绕一个共同点旋转时非常有用。你可以定义一个 <code>svgOrigin</code> 或一个 <code>transformOrigin</code>，不能同时定义两者（显而易见的原因）。所以如果你想旋转 <code>svgElement</code> 就好像它的原点在 SVG 画布的全局坐标 x: 250, y: 100，你可以这样做：<code>gsap.to(svgElement, {duration: 1, rotation: 270, svgOrigin: &quot;250 100&quot;})</code>。单位不是必需的。它还在 <code>data-svg-origin</code> 属性中记录了值，以便可以重新解析。<code>svgOrigin</code> 不支持基于百分比的值。</p>`,48),s("iframe",{src:"https://codepen.io/GreenSock/pen/ZYRqRx",width:"100%",height:"600",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},null,-1),a(`<h3 id="smoothorigin" tabindex="-1">smoothOrigin <a class="header-anchor" href="#smoothorigin" aria-label="Permalink to &quot;smoothOrigin&quot;">​</a></h3><p><strong>仅适用于 SVG 元素</strong> 当改变 SVG 元素的 <code>transformOrigin</code>（或 <code>svgOrigin</code>）时，CSSPlugin 现在会自动记录/应用一些偏移量，以确保元素不会“跳跃”。你可以通过设置 <code>CSSPlugin.defaultSmoothOrigin = false</code> 来禁用此功能，或者你可以在每个 tween 基础上使用 <code>smoothOrigin: true</code> 或 <code>smoothOrigin: false</code> 控制。</p><details class="details custom-block"><summary>深度解析 - 为什么使用简写变换？</summary><p>在浏览器中（以及根据官方规范），变换和变换原点（transform-origins）的工作方式是，改变原点会导致元素以一种突兀的方式跳跃。例如，如果当变换原点在元素的左上角时，你旋转180度，它最终的位置会与围绕其右下角旋转相同角度时的位置大不相同。由于GSAP专注于为动画师解决实际问题（他们中的大多数人更喜欢平滑地改变变换原点），GSAP中的smoothOrigin特性解决了这个问题。这也意味着，如果你在像Adobe Flash这样的创作程序中创建SVG作品，可能不容易/明显地控制元素的原点在哪里，当你通过GSAP定义transformOrigin时，事情会“自然地工作”。目前，这个特性只适用于SVG元素，因为那里是它更常见的痛点。</p><p>简写变换的优势在于它们允许作者独立地指定简单变换，以一种映射到典型用户界面使用的方式，而不是必须记住<code>transform</code>中保持<code>transform()</code>、<code>rotate()</code>和<code>scale()</code>独立作用的顺序，并在屏幕坐标中执行。这意味着，无论你如何编写它们，这些新属性都会以直观的顺序应用，而不考虑你编写它们的顺序。此外，当你使用CSS转换或动画时，这种优势尤为明显，因为我们通常只想动画化变换的一个方面。使用简写属性，可以减少代码的重复，并且由于它们默认为<code>0</code>，可以完全省略起始属性，这为我们的动画提供了一个清晰、明确的定义。</p></details><h2 id="方向旋转" tabindex="-1">方向旋转 <a class="header-anchor" href="#方向旋转" aria-label="Permalink to &quot;方向旋转&quot;">​</a></h2><p>Tweens 旋转 CSS 属性在特定方向，可以是 <strong>顺时针</strong>（<code>&quot;_cw&quot;</code> 后缀），<strong>逆时针</strong>（<code>&quot;_ccw&quot;</code> 后缀），或 <strong>最短方向</strong>（<code>&quot;_short&quot;</code> 后缀），在这种情况下，插件为你选择方向，基于最短路径。例如，如果元素的旋转目前是 170 度，你想要 tween 它到 -170 度，一个正常的旋转 tween 将总共在逆时针方向上旅行 340 度，但如果你使用 _short 后缀，它将在顺时针方向上旅行 20 度。示例：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rotation: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-170_short&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//甚至可以在 3D 旋转上使用它，并使用相对前缀：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rotation: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-170_short&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rotationX: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-=30_cw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rotationY: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1.5rad_ccw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>注意，值在引号内，因此是一个带有特定后缀指示方向的字符串（<code>_cw</code>, <code>_ccw</code>, 或 <code>_short</code>）。你也可以使用 <code>&quot;+=&quot;</code> 或 <code>&quot;-=&quot;</code> 前缀来表示相对值。方向旋转后缀在所有旋转属性（<code>rotation</code>, <code>rotationX</code>, 和 <code>rotationY</code>）中都受支持；你不需要使用 <code>directionalRotation</code> 作为属性名称。有一个 DirectionalRotationPlugin，你可以用它来动画化不是 DOM 元素的对象，但如果</p><p>你只是用 CSSPlugin 动画化 CSS 相关属性，就没有必要加载那个插件，因为它已经包含了 DirectionalRotationPlugin 的功能。在这里查看一个<a href="http://codepen.io/GreenSock/pen/jiEyG" target="_blank" rel="noreferrer">交互式示例</a>。</p><h2 id="autoalpha" tabindex="-1">autoAlpha <a class="header-anchor" href="#autoalpha" aria-label="Permalink to &quot;autoAlpha&quot;">​</a></h2><p>与 <code>opacity</code> 相同，除了当值达到 <code>0</code> 时，<code>visibility</code> 属性将被设置为 <code>hidden</code> 以提高浏览器渲染性能，并防止点击/与目标交互。当值不是 <code>0</code> 时，<code>visibility</code> 将被设置为 <code>inherit</code>。它不被设置为 <code>visible</code> 以尊重继承（想象父元素被隐藏 - 明确地将子元素设置为可见将导致它出现，这可能不是预期的）。为了方便，如果元素的 <code>visibility</code> 最初设置为 <code>hidden</code> 且 <code>opacity</code> 是 <code>1</code>，它将假设 <code>opacity</code> 也应该从 <code>0</code> 开始。这使得在你的页面上使事物不可见（设置你的 CSS <code>visibility: hidden</code>）然后当你想要的时候淡入它们变得简单。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 淡出并将 visibility 设置为 hidden</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  autoAlpha: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 2 秒内淡回，并将 visibility 设置为 visible</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, autoAlpha: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, delay: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="css-变量" tabindex="-1">CSS 变量 <a class="header-anchor" href="#css-变量" aria-label="Permalink to &quot;CSS 变量&quot;">​</a></h2><p>GSAP 可以在支持它们的浏览器中动画化 CSS 变量。</p>`,13),s("iframe",{src:"https://codepen.io/GreenSock/pen/MoeLdj",width:"100%",height:"400",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},null,-1),a(`<h3 id="clearprops" tabindex="-1">clearProps <a class="header-anchor" href="#clearprops" aria-label="Permalink to &quot;clearProps&quot;">​</a></h3><p>你可以在 <code>clearProps</code> 中输入一个逗号分隔的属性名称列表，这些属性你希望在 tween 完成时从元素的 <code>style</code> 属性中清除（或使用 <code>&quot;all&quot;</code> 或 <code>true</code> 清除所有属性）。这在例如你有一个类（或一些其他选择器）应该在 tween 结束时应用某些样式到元素，否则会被 <code>element.style</code>-特定的数据覆盖的情况下很有用。通常你<strong>不需要</strong>包括供应商前缀。<code>clearProps</code> 还清除了受 GSAP 影响的 SVG 元素的 &quot;transform&quot; 属性，因为 GSAP 总是通过 transform <strong>属性</strong> 应用变换（像 x, y, rotation, scale 等）以避免浏览器错误/怪癖。清除任何与 transform 相关的属性（像 <code>x</code>, <code>y</code>, <code>scale</code>, <code>rotation</code> 等）将清除整个 <code>transform</code>，因为它们全部合并为一个 &quot;transform&quot; CSS 属性。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tweens 3 个属性，然后仅清除 &quot;left&quot; 和 &quot;transform&quot;（因为 &quot;scale&quot; 影响 &quot;transform&quot; css 属性。CSSPlugin 自动应用必要的供应商前缀）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scale: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  left: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  backgroundColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;red&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  clearProps: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scale,left&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意：&quot;scale&quot;（或任何与 transform 相关的属性）清除所有变换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="autoround" tabindex="-1">autoRound <a class="header-anchor" href="#autoround" aria-label="Permalink to &quot;autoRound&quot;">​</a></h3><p>默认情况下，CSSPlugin 会在 tween（中间值）期间将像素值和 <code>zIndex</code> 四舍五入到最接近的整数，因为这可以提高浏览器性能，但如果你宁愿禁用这种行为，可以在 CSS 对象中传递 <code>autoRound: false</code>。你仍然可以使用 <a href="#">SnapPlugin</a> 手动定义你想要四舍五入的属性。</p><p>如果你需要动画化数字属性（而不是 CSS 相关属性），你可以使用 <a href="#">AttrPlugin</a>。要替换 DOM 元素中的文本，请使用 <a href="#">TextPlugin</a>。</p><hr><h2 id="试试你学到的东西" tabindex="-1">试试你学到的东西！ <a class="header-anchor" href="#试试你学到的东西" aria-label="Permalink to &quot;试试你学到的东西！&quot;">​</a></h2>`,8),s("iframe",{src:"https://codepen.io/GreenSock/pen/BaGvbXb",width:"100%",height:"400",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},null,-1),s("h3",{id:"常见问题解答",tabindex:"-1"},[t("常见问题解答 "),s("a",{class:"header-anchor",href:"#常见问题解答","aria-label":'Permalink to "常见问题解答"'},"​")],-1),s("details",{class:"details custom-block"},[s("summary",null,"我如何将这个包含在我的项目中？"),s("p",null,"只需加载 GSAP 的核心 - CSSPlugin 自动包含！")],-1),s("details",{class:"details custom-block"},[s("summary",null,"我需要在 tweens 中使用 css: 包装器吗？"),s("p",null,"不需要。这在 GSAP 最初创建时是必需的，但由于动画化 DOM 元素的频率，GSAP 移除了动画化 CSS 属性的需要。")],-1)]))}const u=n(p,[["render",r]]);export{g as __pageData,u as default};
