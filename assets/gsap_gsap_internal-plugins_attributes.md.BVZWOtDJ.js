import{l as a,a as i,c as t,a5 as n}from"./chunks/framework.DAV8GD4U.js";const o=JSON.parse('{"title":"GSAP中文文档 - 属性插件（Attributes）","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/gsap/internal-plugins/attributes.md","filePath":"gsap/gsap/internal-plugins/attributes.md","lastUpdated":1731921447000}'),e={name:"gsap/gsap/internal-plugins/attributes.md"};function p(l,s,r,h,k,d){return i(),t("div",null,s[0]||(s[0]=[n(`<h1 id="gsap中文文档-属性插件-attributes" tabindex="-1">GSAP中文文档 - 属性插件（Attributes） <a class="header-anchor" href="#gsap中文文档-属性插件-attributes" aria-label="Permalink to &quot;GSAP中文文档 - 属性插件（Attributes）&quot;">​</a></h1><h2 id="属性插件-attributes" tabindex="-1">属性插件（Attributes） <a class="header-anchor" href="#属性插件-attributes" aria-label="Permalink to &quot;属性插件（Attributes）&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">什么是内部插件？</p><p>GSAP使用一个名为AttrPlugin的内部插件来对属性进行动画处理，这个插件<strong>自动包含在GSAP的核心中</strong>，<strong>不需要使用<code>gsap.registerPlugin()</code>来加载</strong>。你可以将内部插件视为GSAP的一部分。</p></div><p>GSAP允许你轻松地对DOM元素的任何数值属性进行补间动画。例如，假设你的DOM元素如下所示：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#rect&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // x在这里指的是x属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  attr: { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, width: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 动画translateX()变换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>你可以同时对无限数量的属性进行补间动画。只需在<code>attr:{}</code>对象内使用相关的属性名即可。GSAP将保留后缀，如&quot;%&quot;，这意味着你可以对像<code>&lt;rect width=&quot;50%&quot;...&gt;</code>这样的值进行补间动画。</p><p><strong>注意：你不能对属性进行单位转换（如px到%）</strong></p><div class="warning custom-block"><p class="custom-block-title">动画CSS</p><p>不要尝试在attr对象内对与CSS相关的属性进行动画处理。GSAP在内部对CSS的处理方式不同。在上面的例子中，<code>attr:{}</code>对象外的<code>x</code>将动画化CSS变换，而attr对象内的<code>x</code>将动画化底层几何形状——矩形元素的x坐标。</p></div>`,8)]))}const E=a(e,[["render",p]]);export{o as __pageData,E as default};
