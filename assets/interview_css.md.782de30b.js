import{_ as e,o,c as l,Q as s}from"./chunks/framework.c6ce8c78.js";const b=JSON.parse('{"title":"CSS 篇","description":"","frontmatter":{},"headers":[],"relativePath":"interview/css.md","lastUpdated":1697859005000}'),a={name:"interview/css.md"},c=s(`<h1 id="css-篇" tabindex="-1">CSS 篇 <a class="header-anchor" href="#css-篇" aria-label="Permalink to &quot;CSS 篇&quot;">​</a></h1><h2 id="一-两种盒模型分别说一下。" tabindex="-1">一. 两种盒模型分别说一下。 <a class="header-anchor" href="#一-两种盒模型分别说一下。" aria-label="Permalink to &quot;一. 两种盒模型分别说一下。&quot;">​</a></h2><ul><li>W3C 盒子模型(标准盒模型)</li><li>IE 盒子模型(怪异盒模型)</li></ul><p>盒模型都是由内容(<code>content</code>)、填充(<code>padding</code>)、边界(<code>margin</code>)、 边框(<code>border</code>)组成。他们的区别就是怪异盒模型把<code>border</code>和<code>padding</code>计算在<code>content</code>之内</p><h2 id="二-如何水平居中" tabindex="-1">二. 如何水平居中？ <a class="header-anchor" href="#二-如何水平居中" aria-label="Permalink to &quot;二. 如何水平居中？&quot;">​</a></h2><ul><li>元素为行内元素，设置父元素 <code>text-align</code> 为 <code>center</code></li><li>如果元素宽度固定，可以设置左右 <code>margin</code> 为 <code>auto</code>;</li><li>如果元素为绝对定位，设置父元素 <code>position</code> 为 <code>relative</code>，元素设 <code>left:0</code>;<code>right:0</code>;<code>margin:auto</code>;</li><li>使用 <code>flex-box</code> 布局，指定 <code>justify-content</code> 属性为 <code>center</code></li><li><code>display</code> 设置为 <code>tabel-ceil</code></li></ul><h2 id="三-如何垂直居中" tabindex="-1">三. 如何垂直居中？ <a class="header-anchor" href="#三-如何垂直居中" aria-label="Permalink to &quot;三. 如何垂直居中？&quot;">​</a></h2><ul><li>将显示方式设置为表格，<code>display</code>:<code>table-cell</code>,同时设置<code>vertial-align\`\`：middle</code></li><li>使用<code>flex</code>布局，设置为<code>align-item：center</code></li><li>绝对定位中设置 <code>bottom:0</code>,<code>top:0</code>,并设置 <code>margin:auto</code></li><li>绝对定位中固定高度时设置 <code>top:50%</code>，<code>margin-top</code> 值为高度一半的负值</li><li>文本垂直居中设置 <code>line-height</code> 为 <code>height</code> 值</li></ul><h2 id="四-flex-怎么用-常用属性有哪些" tabindex="-1">四. flex 怎么用，常用属性有哪些？ <a class="header-anchor" href="#四-flex-怎么用-常用属性有哪些" aria-label="Permalink to &quot;四. flex 怎么用，常用属性有哪些？&quot;">​</a></h2><p><code>flex</code> 主要用于一维布局,<code>flex</code> 容器中存在两条轴， 横轴和纵轴， 容器中的每个单元称为 <code>flexitem</code>。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>注意：当设置 <code>flex</code> 布局之后，子元素的 float、clear、vertical-align 的属性将会失效。</p></div><p><strong>flex 容器有以下属性：</strong></p><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><p><strong>flex 的子元素有以下属性：</strong></p><ul><li>order</li><li>flex-basis</li><li>flex-grow</li><li>flex-shrink</li><li>flex</li><li>align-self</li></ul><h2 id="五-link-与-import-的区别" tabindex="-1">五. link 与@import 的区别 <a class="header-anchor" href="#五-link-与-import-的区别" aria-label="Permalink to &quot;五. link 与@import 的区别&quot;">​</a></h2><ul><li><code>link</code>是<code>HTML</code>方式， <code>@import</code>是<code>CSS</code>方式</li><li><code>link</code>最大限度支持并行下载，<code>@import</code>过多嵌套导致串行下载，出现 FOUC(文档样式短暂失效)</li><li><code>link</code>可以通过<code>rel=&quot;alternate stylesheet&quot;</code>指定候选样式</li><li>浏览器对<code>link</code>支持早于<code>@import</code>，可以使用<code>@import</code>对老浏览器隐藏样式</li><li><code>@import</code>必须在样式规则之前，可以在<code>css</code>文件中引用其他文件</li><li>总体来说：<code>link</code>优于<code>@import</code></li></ul><h2 id="六-display-有哪些值-说明他们的作用" tabindex="-1">六. display 有哪些值？说明他们的作用 <a class="header-anchor" href="#六-display-有哪些值-说明他们的作用" aria-label="Permalink to &quot;六. display 有哪些值？说明他们的作用&quot;">​</a></h2><p><strong>display：</strong> <code>none</code> | <code>inline</code> | <code>block</code> | <code>list-item</code> | <code>inline-block</code> | <code>table</code> | <code>inline-table</code> | <code>table-caption</code> | <code>table-cell</code> | <code>table-row</code> | <code>table-row-group</code> | <code>table-column</code> | <code>table-column-group</code> | <code>table-footer-group</code> | <code>table-header-group</code> | <code>run-in</code> | <code>box</code> | <code>inline-box</code> | <code>flexbox</code> | <code>inline-flexbox</code> | <code>flex</code> | <code>inline-flex</code></p><details class="details custom-block"><summary>展开作用详情</summary><ul><li>none： 隐藏对象。与 visibility 属性的 hidden 值不同，其不为被隐藏的对象保留其物理空间</li><li>inline： 指定对象为内联元素。</li><li>block： 指定对象为块元素。</li><li>list-item： 指定对象为列表项目。</li><li>inline-block： 指定对象为内联块元素。（CSS2）</li><li>table： 指定对象作为块元素级的表格。类同于 html 标签 table（CSS2）</li><li>inline-table： 指定对象作为内联元素级的表格。类同于 html 标签 table（CSS2）</li><li>table-caption： 指定对象作为表格标题。类同于 html 标签 caption（CSS2）</li><li>table-cell： 指定对象作为表格单元格。类同于 html 标签 td（CSS2）</li><li>table-row： 指定对象作为表格行。类同于 html 标签 tr（CSS2）</li><li>table-row-group： 指定对象作为表格行组。类同于 html 标签 tbody（CSS2）</li><li>table-column： 指定对象作为表格列。类同于 html 标签 col（CSS2）</li><li>table-column-group： 指定对象作为表格列组显示。类同于 html 标签 colgroup（CSS2）</li><li>table-header-group： 指定对象作为表格标题组。类同于 html 标签 thead（CSS2）</li><li>table-footer-group： 指定对象作为表格脚注组。类同于 html 标签 tfoot（CSS2）</li><li>run-in： 根据上下文决定对象是内联对象还是块级对象。（CSS3）</li><li>box： 将对象作为弹性伸缩盒显示。（伸缩盒最老版本）（CSS3）</li><li>inline-box： 将对象作为内联块级弹性伸缩盒显示。（伸缩盒最老版本）（CSS3）</li><li>flexbox： 将对象作为弹性伸缩盒显示。（伸缩盒过渡版本）（CSS3）</li><li>inline-flexbox： 将对象作为内联块级弹性伸缩盒显示。（伸缩盒过渡版本）（CSS3）</li><li>flex： 将对象作为弹性伸缩盒显示。（伸缩盒最新版本）（CSS3）</li><li>inline-flex： 将对象作为内联块级弹性伸缩盒显示。（伸缩盒最新版本）（CSS3）</li></ul></details><h2 id="七-bfc-是什么" tabindex="-1">七. BFC 是什么？ <a class="header-anchor" href="#七-bfc-是什么" aria-label="Permalink to &quot;七. BFC 是什么？&quot;">​</a></h2><p>BFC（Block Formatting Context）块级格式化上下文，是 Web 页面中盒模型布局的 CSS 渲染模式，指一个独立的渲染区域或者说是一个隔离的独立容器。</p><p>形成 BFC 的条件：</p><ul><li>根元素</li><li>浮动元素，<code>float</code> 除 <code>none</code>以外的值</li><li>定位元素，<code>position</code>（<code>absolute</code>，<code>fixed</code>）</li><li><code>display</code> 为以下其中之一的值 <code>inline-block</code>，<code>table-cell</code>，<code>table-caption</code></li><li><code>overflow</code> 除了 <code>visible</code> 以外的值（<code>hidden</code>，<code>auto</code>，<code>scroll</code>）</li></ul><p>BFC 的特性：</p><ul><li>内部的 Box 会在垂直反向上一个接一个的放位置</li><li>垂直方向上的距离有<code>margin</code> 距离</li><li><code>BFC</code> 的区域不会与 <code>float</code> 的元素区域重叠</li><li>计算 <code>BFC</code> 的高度时，浮动元素也参与计算</li><li><code>BFC</code> 就是页面上的独立容器，容器里面的子元素不会影响外面元素</li></ul><p>BFC的作用：</p><ul><li>可以包含浮动元素</li><li>不被浮动元素覆盖</li><li>阻止父子元素的<code>margin</code>折叠</li></ul><h2 id="八-css-选择器优先级" tabindex="-1">八. CSS 选择器优先级 <a class="header-anchor" href="#八-css-选择器优先级" aria-label="Permalink to &quot;八. CSS 选择器优先级&quot;">​</a></h2><p>!important &gt; 行内样式 &gt; ID 选择器 &gt; 类名选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>如果权重值一样，则按照样式规则的先后顺序来应用，顺序靠后的覆盖靠前的规则</p></div><h2 id="九-说一下清除浮动的几种方式" tabindex="-1">九. 说一下清除浮动的几种方式 <a class="header-anchor" href="#九-说一下清除浮动的几种方式" aria-label="Permalink to &quot;九. 说一下清除浮动的几种方式&quot;">​</a></h2><p>清除浮动的核心是<code>clear:both</code>;</p><ol><li><p>使用额外标签法（不推荐使用）</p><p>在浮动的盒子下面再放一个标签，使用 <code>clear:both</code>;来清除浮动</p></li><li><p>使用 <code>overflow</code> 清除浮动（不推荐使用）</p><p>先找到浮动盒子的父元素，给父元素添加一个属性：<code>overflow:hidden</code>;就会清除子元素对页面的影响</p></li><li><p>使用伪元素清除浮动(用的最多)</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">after</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">line-height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> block</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">clear</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> both</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">visibility</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> hidden</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*将元素隐藏起来</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   在页面的 clearfix 元素后面添加了一个空的块级元素</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  （这个元素的高为 0 行高也为 0   并且这个元素清除了浮动）*/</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">zoom</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*为了兼容 IE6*/</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ol><h2 id="十-css选择符有哪些" tabindex="-1">十. CSS选择符有哪些？ <a class="header-anchor" href="#十-css选择符有哪些" aria-label="Permalink to &quot;十. CSS选择符有哪些？&quot;">​</a></h2><ul><li>id选择器(#myid)</li><li>类选择器(.myclassname)</li><li>标签选择器(div)</li><li>后代选择器(h1 p)</li><li>相邻后代选择器/子选择器(ul&gt;li)</li><li>兄弟选择器(li~a)</li><li>相邻兄弟选择器(li+a)</li><li>属性选择器(a[rel=&quot;external&quot;])</li><li>伪类选择器(a:hover)</li><li>伪元素选择器(::before)</li><li>通配符选择器(*)</li></ul><h2 id="十一-伪类与伪元素的区别" tabindex="-1">十一. 伪类与伪元素的区别 <a class="header-anchor" href="#十一-伪类与伪元素的区别" aria-label="Permalink to &quot;十一. 伪类与伪元素的区别&quot;">​</a></h2><p>伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的元素时，我们可以通过<code>:hover</code> 来描述这个元素的状态。虽然它和普通的 <code>css</code> 类相似，可以为已有的元素添加样式，但是它只有处于 <code>dom</code> 树无法描述的状态下才能为元素添加样式，所以将其称为伪类。</p><p>伪元素用于<strong>创建</strong>一些不在文档树中的元素，并为其<strong>添加样式</strong>。比如说，我们可以通过<code>:before</code> 来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。</p><h2 id="十二-css-中哪些属性可以继承" tabindex="-1">十二. CSS 中哪些属性可以继承？ <a class="header-anchor" href="#十二-css-中哪些属性可以继承" aria-label="Permalink to &quot;十二. CSS 中哪些属性可以继承？&quot;">​</a></h2><ul><li><p>字体系列</p><p><code>font</code>、<code>font-family</code>、<code>font-weight</code>、<code>font-size</code>、<code>font-style</code>、<code>font-variant</code>、<code>font-stretch</code>、<code>font-size-adjust</code></p></li><li><p>文本系列</p><p><code>text-indent</code>、<code>text-align</code>、<code>text-shadow</code>、<code>line-height</code>、<code>word-spacing</code>、<code>letter-spacing</code>、 <code>text-transform</code>、<code>direction</code>、<code>color</code></p></li><li><p>表格布局属性</p><p><code>caption-side</code>、<code>border-collapse</code>、<code>empty-cells</code></p></li><li><p>列表属性</p><p><code>list-style-type</code>、<code>list-style-image</code>、<code>list-style-position</code>、<code>list-style</code></p></li><li><p>光标属性</p><p><code>cursor</code></p></li><li><p>元素可见性</p><p><code>visibility</code></p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当一个属性不是继承属性时，可以使用inherit关键字指定一个属性应从父元素继承它的值，inherit关键字用于显式地指定继承性，可用于任何继承性/非继承性属性。</p></div><h2 id="十三-请解释一下-css3-的-flex布局-以及适用场景" tabindex="-1">十三. 请解释一下 CSS3 的 Flex布局，以及适用场景？ <a class="header-anchor" href="#十三-请解释一下-css3-的-flex布局-以及适用场景" aria-label="Permalink to &quot;十三. 请解释一下 CSS3 的 Flex布局，以及适用场景？&quot;">​</a></h2><ul><li>任何一个容器都可以指定为Flex布局。行内元素也可以使用Flex布局。设为Flex布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</li><li>容器默认存在两根轴：水平的主轴（<code>mainaxis</code>）和垂直的交叉轴（<code>crossaxis</code>），项目默认沿主轴排列。</li></ul><p><strong>容器属性</strong></p><ul><li><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</li><li><code>flex-wrap</code>属性定义，如果一条轴线排不下，是否需要换行。</li><li><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</li><li><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</li><li><code>align-items</code>属性定义了项目在交叉轴上的对齐方式。</li><li><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</li></ul><p><strong>子元素属性</strong></p><ul><li><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</li><li><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li><li><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</li><li><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</li><li><code>flex</code>属性是<code>flex-grow</code>，<code>flex-shrink</code>和<code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。</li><li><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</li></ul><h2 id="十四-用纯-css-创建一个三角形的原理是什么" tabindex="-1">十四. 用纯 CSS 创建一个三角形的原理是什么？ <a class="header-anchor" href="#十四-用纯-css-创建一个三角形的原理是什么" aria-label="Permalink to &quot;十四. 用纯 CSS 创建一个三角形的原理是什么？&quot;">​</a></h2><p>采用的是相邻边框连接处的均分原理。</p><p>将元素的宽高设为0，只设置 <code>border</code>，把任意三条边隐藏掉（颜色设为<code> transparent</code>），剩下的就是一个三角形。</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">#</span><span style="color:#F78C6C;">demo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-style</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> solid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> transparent transparent red transparent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="十五-为什么要初始化css样式" tabindex="-1">十五. 为什么要初始化CSS样式？ <a class="header-anchor" href="#十五-为什么要初始化css样式" aria-label="Permalink to &quot;十五. 为什么要初始化CSS样式？&quot;">​</a></h2><ul><li>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对<code>CSS</code>初始化往往会出现浏览器之间的页面显示差异。</li><li>初始化样式会对<code>SEO</code>有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。</li><li>最简单的初始化方法：<code>*{padding:0;margin:0;}</code>（强烈不建议）</li></ul><h2 id="十六-使用图片-base64-编码的优点和缺点" tabindex="-1">十六. 使用图片 base64 编码的优点和缺点 <a class="header-anchor" href="#十六-使用图片-base64-编码的优点和缺点" aria-label="Permalink to &quot;十六. 使用图片 base64 编码的优点和缺点&quot;">​</a></h2><p><code>base64</code>编码是一种图片处理格式，通过特定的算法将图片编码成一长串字符串，在页面上显示的时候，可以用该字符串来代替图片的<code>url</code>属性。</p><p>优点：</p><ul><li>减少一个图片的HTTP请求</li></ul><p>缺点：</p><ul><li>根据<code>base64</code>的编码原理，编码后的大小会比原文件大小大1/3，如果把大图片编码到<code>html/css</code>中，不仅会造成文件体积的增加，影响文件的加载速度，还会增加浏览器对<code>html</code>或<code>css</code>文件解析渲染的时间。</li><li>使用<code>base64</code>无法直接缓存，要缓存只能缓存包含<code>base64</code>的文件，比如<code>HTML</code>或者<code>CSS</code>，这相比域直接缓存图片的效果要差很多。</li><li>兼容性的问题，<code>ie8</code>以前的浏览器不支持。</li></ul><h2 id="十七-说说px-em-rem的区别" tabindex="-1">十七. 说说px，em，rem的区别 <a class="header-anchor" href="#十七-说说px-em-rem的区别" aria-label="Permalink to &quot;十七. 说说px，em，rem的区别&quot;">​</a></h2><p><code>css</code>单位中分为相对长度单位、绝对长度单位。</p><table><thead><tr><th style="text-align:center;">单位</th><th style="text-align:center;">属性</th></tr></thead><tbody><tr><td style="text-align:center;">相对长度单位</td><td style="text-align:center;">em、ex、ch、rem、vw、vh、vmin、vmax、%</td></tr><tr><td style="text-align:center;">绝对长度单位</td><td style="text-align:center;">cm、mm、in、px、pt、pc</td></tr></tbody></table><p><strong>px(绝对长度单位)</strong></p><p>px这个单位是大家并不陌生，px这个单位基于像素点，兼容性可以说是相当可以，大家对px的了解肯定是没有很大的问题的。</p><p><strong>em(相对长度单位)</strong></p><ul><li>使用 <ul><li><p>浏览器的默认字体都是<code>16px</code>，那么<code>1em</code>=<code>16px</code>，以此类推计算<code>12px</code>=<code>0.75em</code>，<code>10px</code>=<code>0.625em</code>，<code>2em</code>=<code>32px</code>；</p></li><li><p>这样使用很复杂，很难很好的与<code>px</code>进行对应,也导致书写、使用、视觉的复杂(<code>0.75em</code>、<code>0.625em</code>全是小数点)；</p></li><li><p>为了简化font-size的换算，我们在body中写入一下代码</p></li></ul></li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">body</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">62.5%</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*  公式16px*62.5%=10px  */</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样页面中<code>1em</code>=<code>10px</code>,<code>1.2em</code>=<code>12px</code>,<code>1.4em</code>=<code>14px</code>,<code>1.6em</code>=<code>16px</code>，使得视觉、使用、书写都得到了极大的帮助。</p><ul><li>缺点 <ul><li>em的值并不是固定的</li><li>em会继承父级元素的字体大小（参考物是父元素的font-size；）</li><li>em中所有的字体都是相对于父元素的大小决定的；所以如果一个设置了<code>font-size:1.2em</code>的元素在另一个设置了<code>font-size:1.2em</code>的元素里，而这个元素又在另一个设置了<code>font-size:1.2em</code>的元素里，那么最后计算的结果是1.2X1.2X1.2=<code>1.728em</code></li></ul></li></ul><p><strong>rem(相对长度单位)</strong></p><ul><li>使用 <ul><li><p>浏览器的默认字体都是<code>16px</code>，那么<code>1rem</code>=<code>16px</code>，以此类推计算<code>12px</code>=<code>0.75rem</code>，<code>10px</code>=<code>0.625rem</code>，<code>2rem</code>=<code>32px</code>；</p></li><li><p>这样使用很复杂，很难很好的与<code>px</code>进行对应,也导致书写、使用、视觉的复杂(<code>0.75rem</code>、<code>0.625em</code>全是小数点) ；</p></li><li><p>为了简化<code>font-size</code>的换算，我们在根元素<code>html</code>中加入<code>font-size: 62.5%;</code></p></li></ul></li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">html</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">62.5%</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*  公式16px*62.5%=10px  */</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样页面中<code>1rem</code>=<code>10px</code>,<code>1.2rem</code>=<code>12px</code>,<code>1.4rem</code>=<code>14px</code>,<code>1.6rem</code>=<code>16px</code>;使得视觉、使用、书写都得到了极大的帮助；</p><ul><li>特点 <ul><li><p><code>rem</code>单位可谓集相对大小和绝对大小的优点于一身</p></li><li><p>和<code>em</code>不同的是<code>rem</code>总是相对于根元素(如:root{})，而不像<code>em</code>一样使用级联的方式来计算尺寸。这种相对单位使用起来更简单。</p></li><li><p><code>rem</code>支持<code>IE9</code>及以上，意思是相对于根元素<code>html</code>（网页），不会像<code>em</code>那样，依赖于父元素的字体大小，而造成混乱。使用起来安全了很多。</p></li></ul></li></ul><p><strong>注意：</strong></p><ul><li>值得注意的浏览器支持问题：<code> IE8</code>，<code>Safari 4</code>或 <code>iOS 3.2</code>中不支持rem单位。</li><li>如果你的用户群都使用最新版的浏览器，那推荐使用<code>rem</code>，如果要考虑兼容性，那就使用<code>px</code>,或者两者同时使用。</li></ul><h2 id="十八-display-inline-block-什么时候不会显示间隙-携程" tabindex="-1">十八. display:inline-block 什么时候不会显示间隙？(携程) <a class="header-anchor" href="#十八-display-inline-block-什么时候不会显示间隙-携程" aria-label="Permalink to &quot;十八. display:inline-block 什么时候不会显示间隙？(携程)&quot;">​</a></h2><ul><li>移除空格</li><li>使用<code>margin</code>负值</li><li>使用<code>font-size:0</code></li><li><code>letter-spacing</code></li><li><code>word-spacing</code></li></ul><h2 id="十九-rgba-和opacity的透明效果有什么不同" tabindex="-1">十九. rgba()和opacity的透明效果有什么不同？ <a class="header-anchor" href="#十九-rgba-和opacity的透明效果有什么不同" aria-label="Permalink to &quot;十九. rgba()和opacity的透明效果有什么不同？&quot;">​</a></h2><ul><li><code>rgba()</code>和<code>opacity</code>都能实现透明效果，但最大的不同是<code>opacity</code>作用于元素，以及元素内的所有内容的透明度</li><li>而<code>rgba()</code>只作用于元素的颜色或其背景色。（设置<code>rgba</code>透明的元素的子元素不会继承透明效果！）</li></ul><h2 id="二十-css-sprite-雪碧图-是什么-有什么优缺点" tabindex="-1">二十. css sprite(雪碧图)是什么,有什么优缺点 <a class="header-anchor" href="#二十-css-sprite-雪碧图-是什么-有什么优缺点" aria-label="Permalink to &quot;二十. css sprite(雪碧图)是什么,有什么优缺点&quot;">​</a></h2><ul><li><p>概念</p><p>将多个小图片拼接到一个图片中。通过<code>background-position</code>和元素尺寸调节需要显示的背景图案。</p></li><li><p>优点</p><ul><li>减少<code>HTTP</code>请求数，极大地提高页面加载速度</li><li>增加图片信息重复度，提高压缩比，减少图片大小</li><li>更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现</li></ul></li><li><p>缺点</p><ul><li>图片合并麻烦</li><li>维护麻烦，修改一个图片可能需要从新布局整个图片，样式</li></ul></li></ul><h2 id="二十一-什么是fouc-如何避免" tabindex="-1">二十一. 什么是FOUC?如何避免 <a class="header-anchor" href="#二十一-什么是fouc-如何避免" aria-label="Permalink to &quot;二十一. 什么是FOUC?如何避免&quot;">​</a></h2><ul><li><code>Flash Of Unstyled Content</code>：用户定义样式表加载之前浏览器使用默认样式显示文档，用户样式加载渲染之后再从新显示文档，造成页面闪烁。</li><li><strong>解决方法</strong>：把样式表放到文档的<code>head</code></li></ul><h2 id="二十二-position有哪几个属性-分别有什么用" tabindex="-1">二十二. position有哪几个属性，分别有什么用？ <a class="header-anchor" href="#二十二-position有哪几个属性-分别有什么用" aria-label="Permalink to &quot;二十二. position有哪几个属性，分别有什么用？&quot;">​</a></h2><ul><li><p><strong>static(默认值)</strong></p><p>默认的属性，指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> 和 <code>z-index </code>属性无效。</p></li><li><p><strong>relative(相对定位)</strong></p><p>元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置。元素会以自身为定位，可以对它设置<code>top</code>，<code>right</code>，<code>bottom</code>，<code>left</code>值</p></li><li><p><strong>absolute(绝对定位)</strong></p><p>元素会被移出正常文档流，并不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p></li><li><p><strong>fixed(固定定位)</strong></p><p>元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。</p></li><li><p><strong>sticky(粘性定位)</strong></p><p>元素根据正常文档流进行定位，然后相对它的最近滚动祖先和 最近块级祖先，基于<code>top</code>, <code>right</code>, <code>bottom</code>, 和<code>left</code>的值进行偏移。</p></li></ul><h2 id="二十三-父盒子中子盒子浮动有什么后果" tabindex="-1">二十三. 父盒子中子盒子浮动有什么后果？ <a class="header-anchor" href="#二十三-父盒子中子盒子浮动有什么后果" aria-label="Permalink to &quot;二十三. 父盒子中子盒子浮动有什么后果？&quot;">​</a></h2><p>如果父盒子的高度低于子盒子的高度或者父盒子没有高度的话，会造成<strong>高度塌陷</strong>。</p><p>示例</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pic-box</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">container</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pic-1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">img1.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pic-2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">img2.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pic-3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">img3.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>由于我们没给父盒子设置高度，所以父盒子的高度是由图片撑开的。</p><p><img src="https://img-blog.csdn.net/20170519142404832?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE5MTU3NDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="未浮动"></p><p>如果我们让img3浮动的话，会变成这样。</p><p><img src="https://img-blog.csdn.net/20170519142445808?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE5MTU3NDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="浮动"></p><p>如果要解决高度塌陷，则需要<strong>清除浮动</strong>。</p><h2 id="二十四-html行内元素、块状元素、行内块状元素的区别" tabindex="-1">二十四. HTML行内元素、块状元素、行内块状元素的区别 <a class="header-anchor" href="#二十四-html行内元素、块状元素、行内块状元素的区别" aria-label="Permalink to &quot;二十四. HTML行内元素、块状元素、行内块状元素的区别&quot;">​</a></h2><h3 id="行内元素" tabindex="-1">行内元素 <a class="header-anchor" href="#行内元素" aria-label="Permalink to &quot;行内元素&quot;">​</a></h3><p>代表标签：<code>span</code>、<code>b</code>、<code>i</code></p><p>行内元素特征：</p><ul><li>设置宽高无效</li><li>不会自动进行换行</li><li>对<code>margin</code>仅设置左右方向有效，上下无效</li><li>对<code>padding</code>设置上下左右都有效</li></ul><h3 id="块元素" tabindex="-1">块元素 <a class="header-anchor" href="#块元素" aria-label="Permalink to &quot;块元素&quot;">​</a></h3><p>代表标签：<code>div</code>、<code>p</code>、<code>nav</code>、<code>aside</code>、<code>header</code>、<code>footer</code>、<code>section</code>、<code>article</code>、<code>ul-li</code>、<code>address</code></p><p>块状元素特征：</p><ul><li>能够识别宽高</li><li>对<code>margin</code>和<code>padding</code>的设置上下左右均对其有效</li><li>可以自动换行</li><li>多个块状元素标签写在一起，默认排列方式为从上至下</li></ul><h3 id="行内块元素" tabindex="-1">行内块元素 <a class="header-anchor" href="#行内块元素" aria-label="Permalink to &quot;行内块元素&quot;">​</a></h3><p>行内块状元素综合了行内元素和块状元素的特性，但是各有取舍。因此行内块状元素在日常的使用中，由于其特性，使用的次数也比较多。</p><p>行内块状元素特征：</p><ul><li>不自动换行</li><li>能够识别宽高</li><li>默认排列方式为从左到右</li></ul><h2 id="二十五-行内元素、行内块元素的默认间隙问题" tabindex="-1">二十五. 行内元素、行内块元素的默认间隙问题 <a class="header-anchor" href="#二十五-行内元素、行内块元素的默认间隙问题" aria-label="Permalink to &quot;二十五. 行内元素、行内块元素的默认间隙问题&quot;">​</a></h2><ol><li>将所有的行内块元素直接设置浮动，个人认为最直接的方法，当然是在适当的场景中，因为过度的浮动会产生需要清除浮动的必要</li><li>在产生边距的行内块的父元素设置属性：font-size：0px;</li><li>在父元素上设置，word-spacing(词边距)的值设为合适的负值即可</li><li>在html中将行内块元素在同一行显示，不要进行美观缩进或者换行</li></ol>`,111),n=[c];function i(p,t,d,r,u,y){return o(),l("div",null,n)}const h=e(a,[["render",i]]);export{b as __pageData,h as default};
