import{l as a,c as i,a5 as e,a as l}from"./chunks/framework.DJyBczLA.js";const o=JSON.parse('{"title":"GSAP中文文档 - gsap.delayedCall()","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/gsap/methods/delayed-call.md","filePath":"gsap/gsap/methods/delayed-call.md","lastUpdated":1733646466000}'),n={name:"gsap/gsap/methods/delayed-call.md"};function p(t,s,h,d,r,k){return l(),i("div",null,s[0]||(s[0]=[e(`<h1 id="gsap中文文档-gsap-delayedcall" tabindex="-1">GSAP中文文档 - gsap.delayedCall() <a class="header-anchor" href="#gsap中文文档-gsap-delayedcall" aria-label="Permalink to &quot;GSAP中文文档 - gsap.delayedCall()&quot;">​</a></h1><h2 id="gsap-delayedcall" tabindex="-1">gsap.delayedCall() <a class="header-anchor" href="#gsap-delayedcall" aria-label="Permalink to &quot;gsap.delayedCall()&quot;">​</a></h2><p><code>gsap.delayedCall()</code> 提供了一个简单的方式来在设定的时间后调用一个函数，它与整个渲染循环完全同步（与 <code>setTimeout()</code> 不同，后者可能在浏览器屏幕刷新周期之外触发）。您还可以选择传递任意数量的参数给函数。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 1 秒后调用 myFunction() 并传递 2 个参数:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delayedCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myFunction, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">param1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">param2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 执行操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="取消-杀死一个延迟调用" tabindex="-1">取消/杀死一个延迟调用 <a class="header-anchor" href="#取消-杀死一个延迟调用" aria-label="Permalink to &quot;取消/杀死一个延迟调用&quot;">​</a></h3><p>保存对它的引用，并在需要时调用它的 <code>.kill()</code> 方法：</p><p>如果您不想保留对它的引用，您可以使用 <code>gsap.killTweensOf()</code> 方法，因为 <code>delayedCall()</code> 仅仅是一个带有 <code>onComplete</code> 的补间动画，函数本身是补间动画的“目标”：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建延迟调用并保存引用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delayedCall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delayedCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myFunction, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在需要时取消延迟调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">delayedCall.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>或者，如果您没有保留引用，可以这样做：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假设 myFunction 是您的函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">killTweensOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myFunction)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>通过 <code>gsap.delayedCall()</code>，您可以确保延迟函数的调用与浏览器的屏幕刷新周期同步，这在执行精确的动画时非常有用。它提供了比传统的 <code>setTimeout()</code> 更可靠的解决方案，因为后者可能受到浏览器的最小时间间隔限制，或者在浏览器的刷新周期之外执行。</p>`,11)]))}const E=a(n,[["render",p]]);export{o as __pageData,E as default};
