import{l as a,c as i,a5 as t,a as n}from"./chunks/framework.Cbnp_j6w.js";const E=JSON.parse('{"title":"gsap.fromTo()","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/gsap/methods/gsap.fromTo.md","filePath":"gsap/gsap/methods/gsap.fromTo.md","lastUpdated":1730284782000}'),e={name:"gsap/gsap/methods/gsap.fromTo.md"};function l(p,s,d,r,h,k){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="gsap-fromto" tabindex="-1">gsap.fromTo() <a class="header-anchor" href="#gsap-fromto" aria-label="Permalink to &quot;gsap.fromTo()&quot;">​</a></h1><h3 id="返回-tween" tabindex="-1">返回: Tween <a class="header-anchor" href="#返回-tween" aria-label="Permalink to &quot;返回: Tween&quot;">​</a></h3><p><code>gsap.fromTo()</code> 函数允许您定义动画的<strong>起始和结束</strong>值。这与 <code>from()</code> 和 <code>to()</code> 函数不同，后两者分别使用当前状态作为起始或结束状态。当您需要完全控制动画，尤其是与其他动画串联时，这种方式非常有用。</p><h4 id="示例代码" tabindex="-1">示例代码： <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码：&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 &quot;.box&quot; 的透明度从 0 变化到 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>GSAP 可以动画化<strong>任何对象的任何属性</strong>，因此您<strong>不仅限于</strong> CSS 属性或 DOM 对象。</p><h4 id="控制-tween-实例" tabindex="-1">控制 Tween 实例： <a class="header-anchor" href="#控制-tween-实例" aria-label="Permalink to &quot;控制 Tween 实例：&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tween </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;elastic&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在我们可以控制它</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">progress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Tween 默认会立即播放（尽管您可以设置 <code>delay</code> 或 <code>paused</code> 值），并且在完成时自动清理自身。您可以随意调用 <code>gsap.fromTo()</code>，不必担心清理问题。</p><h4 id="其他类型的补间动画" tabindex="-1">其他类型的补间动画： <a class="header-anchor" href="#其他类型的补间动画" aria-label="Permalink to &quot;其他类型的补间动画：&quot;">​</a></h4><ul><li><code>to()</code> - 您定义要动画化到的<strong>结束</strong>值，GSAP 使用当前值作为起始值。</li><li><code>from()</code> - 您定义要动画化的<strong>起始</strong>值，GSAP 使用当前值作为目的地。</li></ul><h4 id="参数" tabindex="-1">参数： <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数：&quot;">​</a></h4><ol><li><strong>targets</strong> - 您想要动画化的属性的对象。可以是选择器文本如 <code>&quot;.class&quot;</code>, <code>&quot;#id&quot;</code> 等，或直接是对元素、普通对象或对象数组的引用。</li><li><strong>fromVars</strong> - 包含初始（起始）属性/值对的对象。您<strong>不</strong>在这里放置特殊属性，如持续时间、延迟等 - 那些放在 <code>toVars</code> 中。</li><li><strong>toVars</strong> - 包含要动画化的目标属性/值的对象，以及任何特殊属性，如 <code>ease</code>, <code>duration</code>, <code>delay</code> 或 <code>onComplete</code>。</li></ol><h4 id="特殊属性" tabindex="-1">特殊属性： <a class="header-anchor" href="#特殊属性" aria-label="Permalink to &quot;特殊属性：&quot;">​</a></h4><p>您可以将以下任何一个添加到您的 <code>vars</code> 对象中，以赋予您的动画特殊能力：</p><table><thead><tr><th>特殊属性</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>callbackScope</td><td>所有回调（如 onStart, onUpdate, onComplete 等）使用的作用域。</td><td>-</td></tr><tr><td>data</td><td>分配任意数据到这个属性，它会被附加到补间动画实例本身，之后可以通过 <code>yourTween.data</code> 引用。</td><td>-</td></tr><tr><td>delay</td><td>动画开始之前的延迟量（以秒为单位）。</td><td>-</td></tr><tr><td>duration</td><td>动画的持续时间（以秒为单位）。</td><td><code>0.5</code></td></tr><tr><td>ease</td><td>控制动画期间的速率变化，赋予它特定的感觉。例如，<code>&quot;elastic&quot;</code> 或 <code>&quot;strong.inOut&quot;</code>。</td><td><code>&quot;power1.out&quot;</code></td></tr><tr><td>id</td><td>为您的补间动画实例分配一个唯一标识符，以便您可以使用 <code>gsap.getById()</code> 找到它。</td><td>-</td></tr><tr><td>immediateRender</td><td>是否在实例化时立即渲染。如果为 <code>true</code>，则补间动画会立即渲染，即使设置了延迟。</td><td><code>false</code>（<code>to()</code>）<br><code>true</code>（<code>from()</code> 和 <code>fromTo()</code>）</td></tr><tr><td>inherit</td><td>是否从父时间轴的 <code>defaults</code> 对象继承。如果设置为 <code>false</code>，则禁用继承。</td><td><code>true</code></td></tr><tr><td>lazy</td><td>是否延迟值的写入以提高性能。如果为 <code>false</code>，则禁用延迟渲染。</td><td><code>true</code>（零持续时间的补间动画除外）</td></tr><tr><td>onComplete</td><td>动画完成时调用的函数。</td><td>-</td></tr><tr><td>onCompleteParams</td><td>传递给 onComplete 函数的参数数组。</td><td>-</td></tr><tr><td>onInterrupt</td><td>动画被中断时调用的函数，比如在完成前被杀死。</td><td>-</td></tr><tr><td>onInterruptParams</td><td>传递给 onInterrupt 函数的参数数组。</td><td>-</td></tr><tr><td>onRepeat</td><td>每次动画进入新的迭代周期时调用的函数，仅当设置了非零的 <code>repeat</code> 时发生。</td><td>-</td></tr><tr><td>onRepeatParams</td><td>传递给 onRepeat 函数的参数数组。</td><td>-</td></tr><tr><td>onReverseComplete</td><td>动画从相反方向到达开头时调用的函数（不包括重复）。</td><td>-</td></tr><tr><td>onReverseCompleteParams</td><td>传递给 onReverseComplete 函数的参数数组。</td><td>-</td></tr><tr><td>onStart</td><td>动画开始时调用的函数，如果补间动画多次重启，这种情况可能会发生多次。</td><td>-</td></tr><tr><td>onStartParams</td><td>传递给 onStart 函数的参数数组。</td><td>-</td></tr><tr><td>onUpdate</td><td>每次动画更新时调用的函数，在每个移动播放头的“tick”上。</td><td>-</td></tr><tr><td>onUpdateParams</td><td>传递给 onUpdate 函数的参数数组。</td><td>-</td></tr><tr><td>overwrite</td><td>是否立即杀死同一目标的所有补间动画，或者在第一次渲染时寻找活动动画中的冲突并只杀死冲突部分。</td><td><code>false</code></td></tr><tr><td>paused</td><td>是否在创建后立即暂停动画。</td><td><code>false</code></td></tr><tr><td>repeat</td><td>动画应重复的次数，<code>repeat: 1</code> 将播放两次。使用 -1 进行无限重复。</td><td><code>0</code></td></tr><tr><td>repeatDelay</td><td>重复之间等待的时间量（以秒为单位）。</td><td><code>0</code></td></tr><tr><td>repeatRefresh</td><td>是否在每次完整迭代时刷新起始/结束值，对于使用动态值的情况很有用。</td><td>-</td></tr><tr><td>reversed</td><td>是否使动画从一开始就以播放头反向。</td><td>-</td></tr><tr><td>runBackwards</td><td>是否反转起始和结束值，相当于使 <code>to()</code> 补间动画变成 <code>from()</code>。</td><td>-</td></tr><tr><td>stagger</td><td>如果定义了多个目标，可以设置开始时间的偏移，或者使用错开对象获得更高级的错开效果。</td><td>-</td></tr><tr><td>startAt</td><td>为任何属性定义起始值，即使它们没有动画化。</td><td>-</td></tr><tr><td>yoyo</td><td>是否使动画在每次重复时以相反的方向运行，看起来来回移动。</td><td><code>false</code></td></tr><tr><td>yoyoEase</td><td>是否改变 yoyo 阶段的缓动，或者简单地反转补间动画的正常 <code>ease</code>。</td><td><code>false</code></td></tr><tr><td>keyframes</td><td>使用关键帧数组来动画化目标到各种状态，每个关键帧都是一个 vars 对象，充当 <code>to()</code> 补间动画。</td><td>-</td></tr></tbody></table><p>以下是对 <code>gsap.fromTo()</code> 文档中剩余部分的详细解析：</p><h3 id="插件-plugins" tabindex="-1">插件（Plugins） <a class="header-anchor" href="#插件-plugins" aria-label="Permalink to &quot;插件（Plugins）&quot;">​</a></h3><p>插件为 GSAP 的核心功能提供了额外的能力。一些插件简化了与渲染库（如 PIXI.js 或 EaselJS）的协作，而其他插件则增加了如 SVG 形状变形、拖放功能等高级功能。这种方式允许 GSAP 核心保持相对较小的体积，并且只在需要时添加功能。您可以在官方文档中查看所有插件的完整列表。</p><h3 id="基于函数的值-function-based-values" tabindex="-1">基于函数的值（Function-based values） <a class="header-anchor" href="#基于函数的值-function-based-values" aria-label="Permalink to &quot;基于函数的值（Function-based values）&quot;">​</a></h3><p>通过为任何值使用函数，您可以创建极具动态的动画效果。该函数将在补间动画第一次渲染时针对<strong>每个目标</strong>调用一次，由该函数返回的值将被用作实际的动画值。这对于应用条件逻辑或随机化元素非常有用（尽管 GSAP 也有内置的随机化功能）。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 普通值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 基于函数的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>该函数接收三个参数：</p><ul><li><strong>index</strong> - 在数组中目标的索引。</li><li><strong>target</strong> - 目标本身（示例中的 <code>&lt;div&gt;</code> 元素）。</li><li><strong>targets</strong> - 目标数组（与 <code>tween.targets()</code> 相同）。</li></ul><h3 id="随机值-random-values" tabindex="-1">随机值（Random values） <a class="header-anchor" href="#随机值-random-values" aria-label="Permalink to &quot;随机值（Random values）&quot;">​</a></h3><p>您可以像 <code>&quot;random(-100, 100)&quot;</code> 这样定义一个范围的随机值，或像 <code>&quot;random([red, blue, green])&quot;</code> 这样定义一个数组的随机值，GSAP 将为<strong>每个目标</strong>相应地替换随机值。这使得创建高级随机化效果变得简单。您甚至可以设置随机数四舍五入到最接近的任何数字增量。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;random(-100, 100, 5)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为每个目标在 -100 和 100 之间选择一个随机数，四舍五入到最接近的 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>或者使用类似数组的值，GSAP 将随机选择其中之一：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;random([0, 100, 200, 500])&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 随机选择一个值（0, 100, 200, 或 500）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果更喜欢直接使用，您也可以使用 <code>gsap.utils.random()</code> 函数。</p><h3 id="错开-staggers" tabindex="-1">错开（Staggers） <a class="header-anchor" href="#错开-staggers" aria-label="Permalink to &quot;错开（Staggers）&quot;">​</a></h3><p>如果定义了多个目标，您可以通过设置一个值，如 <code>stagger: 0.1</code>（每个开始时间之间 0.1 秒的偏移）来轻松地错开每个目标的开始时间。或者您可以使用错开对象获得更高级的错开效果。</p><h3 id="序列化-sequencing" tabindex="-1">序列化（Sequencing） <a class="header-anchor" href="#序列化-sequencing" aria-label="Permalink to &quot;序列化（Sequencing）&quot;">​</a></h3><p>对于基本的序列化，您可以在每个补间动画上使用 <code>delay</code>，但我们强烈推荐使用 <code>Timeline</code> 进行所有但最简单的序列化任务，因为它提供了更大的灵活性，尤其是在处理时间时。它允许您一个接一个地追加补间动画，然后整体控制整个序列。您甚至可以让您想要的补间动画重叠，尽可能深入地嵌套时间轴，等等。</p><p>时间轴还有方便的 to(), from(), 和 fromTo() 方法，以便您可以非常容易地将它们链接在一起并构建复杂的序列：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建时间轴</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始序列化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;elastic&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">180</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p><strong>注意</strong>：默认情况下，在 <code>fromTo()</code> 补间动画中，<code>immediateRender</code> 是 <code>true</code>，这意味着它们会立即呈现起始状态，不管指定了任何延迟。您可以通过在 <code>vars</code> 参数中传递 <code>immediateRender: false</code> 来覆盖此行为，以便它将等待直到补间动画实际开始时才呈现。</p></div><h3 id="回调-callbacks" tabindex="-1">回调（Callbacks） <a class="header-anchor" href="#回调-callbacks" aria-label="Permalink to &quot;回调（Callbacks）&quot;">​</a></h3><p>回调是在补间动画或时间轴中发生特定事件（如开始、完成、重复、反向完成或更新）后调用的函数。它们对于调试、保持项目的不同部分同步等非常有用。</p><p>希望这次的解析更加全面和准确。如果您还有其他问题或需要进一步的帮助，请告诉我。</p>`,40)]))}const c=a(e,[["render",l]]);export{E as __pageData,c as default};
