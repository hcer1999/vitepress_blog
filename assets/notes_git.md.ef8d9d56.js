import{_ as e,o as t,c as p,Q as a}from"./chunks/framework.c6ce8c78.js";const u=JSON.parse('{"title":"Git 使用教程","description":"","frontmatter":{},"headers":[],"relativePath":"notes/git.md","lastUpdated":1690803885000}'),c={name:"notes/git.md"},s=a(`<h1 id="git-使用教程" tabindex="-1">Git 使用教程 <a class="header-anchor" href="#git-使用教程" aria-label="Permalink to &quot;Git 使用教程&quot;">​</a></h1><p>Git 是目前世界上最先进的分布式版本控制系统，几乎所有的公司都会使用 Git 工具来进行版本控制，Git 成为程序员必要学习的知识之一。你还在等什么，赶快跟我来看看吧~</p><h2 id="安装-git-工具" tabindex="-1">安装 Git 工具 <a class="header-anchor" href="#安装-git-工具" aria-label="Permalink to &quot;安装 Git 工具&quot;">​</a></h2><ul><li><p>首先打开<a href="https://git-scm.com/downloads" target="_blank" rel="noreferrer">Git 官网</a>，下载对应操作系统的版本</p><p>国内用户打开下载可能比较慢，请科学上网或者直接下载我上传的版本，可能版本不是最新的</p><ul><li><a href="https://lanzous.com/ibu2sta" target="_blank" rel="noreferrer">x86 位的电脑点我</a> <code>v2.7.1.2</code></li><li><a href="https://lanzous.com/ibu2tzc" target="_blank" rel="noreferrer">x64 位的电脑点我 </a><code>v2.25.0</code></li></ul></li><li><p>下载后进行默认安装即可，然后右键桌面，即可看到新增两个选项</p><p><img src="http://cdn.bingkele.cc/Fp_ks__5DoLpeBMq-lVsoGRQqVA-" alt="img"></p><ul><li>Git GUI Here 是图形化界面的 Git 工具</li><li><strong>Git Bash Here</strong> 才是我们需要的命令行工具</li></ul></li><li><p>我们打开<strong>Git Bash Here</strong>，就会打开一个类似<code>CMD</code>的命令行工具，到此，Git 工具的安装已完成。</p><p><img src="http://cdn.bingkele.cc/FtFcuNE-AWcEzqOOPx5BrMR0R0E0" alt="img"></p></li></ul><h2 id="配置-git-工具" tabindex="-1">配置 Git 工具 <a class="header-anchor" href="#配置-git-工具" aria-label="Permalink to &quot;配置 Git 工具&quot;">​</a></h2><p>接下来我们需要配置一下 Git 工具的信息</p><p>先打开<strong>Git Bash Here</strong>，然后需要配置这两个信息：</p><ul><li><p>配置用户名</p><div class="language-powershell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">global user.name </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hcer1999</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>配置邮箱</p><div class="language-powershell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">global user.email </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bingkelele007@163.com</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><p><img src="http://cdn.bingkele.cc/FqgXiK-fwwe6jLC3gQhnEJ8aD38j" alt=""></p><p>因为 Git 是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。</p><h2 id="使用-git-工具" tabindex="-1">使用 Git 工具 <a class="header-anchor" href="#使用-git-工具" aria-label="Permalink to &quot;使用 Git 工具&quot;">​</a></h2><p>我们已经配置好信息了，可以正式开始使用 Git 工具了。</p><p>首先，我们需要管理某个项目，就需要在这个项目的根目录中初始化 Git 仓库。</p><h3 id="初始化仓库" tabindex="-1">初始化仓库 <a class="header-anchor" href="#初始化仓库" aria-label="Permalink to &quot;初始化仓库&quot;">​</a></h3><p>我们先在项目的根目录空白处右击，打开<code>Git Bash Here</code>，然后输入以下代码，即可初始化一个 Git 仓库。</p><div class="language-powershell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git init</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="http://cdn.bingkele.cc/Fs6SPLT-afpHhWXwOHdAiXYExpI8" alt=""></p><p>然后它会在当前目录下生成一个<code>.git</code>的隐藏文件夹(要打开显示隐藏文件夹才能看到)。</p><p>这个文件夹是 Git 来跟踪管理版本的，没事<strong>千万不要乱改这个目录里的文件</strong>，否则，会照成仓库损坏。</p><h3 id="提交文件至仓库中" tabindex="-1">提交文件至仓库中 <a class="header-anchor" href="#提交文件至仓库中" aria-label="Permalink to &quot;提交文件至仓库中&quot;">​</a></h3><p>我们假如现在在这个仓库中写了一些代码，我新建一个文本文档并写入一堆 1 作为演示：</p><p>然后在 Git 命令行中，输入<code>git status</code>,可以查看当前仓库的状态。</p><p><img src="http://cdn.bingkele.cc/Folgc4AuQ-_v7nRAQVO5vjRLRyFE" alt=""></p><p>然后，我们需要将他添加到<strong>暂存区</strong>，大家先不用管暂存区是什么东西，可以理解为中转站，文件必须先添加到暂存区才能再添加到<strong>仓库区</strong>。</p><p>需要将文件添加到暂存区，需要这个指令<code>git add 文件名</code>，如果需要一次性添加所有文件，则可以使用<code>git add .</code>，这个点代表当前目录下所有文件。</p><p>我们提交之后如果成功，则不会有任何提示。然后我们再次输入<code>git status</code>来查看当前仓库的状态。</p><p><img src="http://cdn.bingkele.cc/Fs3uRlFptHvK-FDcLGLs1HEMZc8m" alt=""></p><p>最后，我们需要使用<code>git commit</code>来将暂存区的文件添加到仓库区。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>每次<code>commit</code>需要带上<code>-m 注释</code>,例如<code>git commit -m &#39;第一次提交&#39;</code>，注释需要用双引号包起来。</p></div><p><img src="http://cdn.bingkele.cc/FkQu4p8OIaKQBfC7RokR8_I_tU0C" alt="img"></p><h3 id="检测文件变更" tabindex="-1">检测文件变更 <a class="header-anchor" href="#检测文件变更" aria-label="Permalink to &quot;检测文件变更&quot;">​</a></h3><p>如果我们对已经提交的文件进行修改，会怎么样？</p><p>我现在对<code>text.txt</code>，在最后添加一行 22222</p><p>然后使用<code>gita status</code>查看状态</p><p><img src="http://cdn.bingkele.cc/Fv02E04geqWwAmx_w0JC3l0lorNg" alt=""></p><p>上面的命令告诉我们<code>text.txt</code>文件已被修改，但是未被提交。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>Git 工具只能检测到文本的改动，例如网页文件各类重新代码文件等。但是不能检测到图片和视频文件的改动。</p></div><p>我们可以使用<code>git diff</code>命令查看文件的改动，例如<code>git diff text.txt</code></p><p><img src="http://cdn.bingkele.cc/Fh_wuf1R_2BqLX7dq8u_TUt-qPdJ" alt=""></p><p>我们可以清晰的看到文件有哪些改动</p><p>修改后，我们可以再次提交文件</p><p>提交完成后，可以使用<code>git log</code>命令查看当前仓库的提交信息</p><p><img src="http://cdn.bingkele.cc/FoY125n2iHBB487Hi2oRpSdPXvL5" alt=""></p><p>我们可以清晰的看到，每次提交的时间信息，提交的人的信息，以及我们的备注。</p><h3 id="版本回退" tabindex="-1">版本回退 <a class="header-anchor" href="#版本回退" aria-label="Permalink to &quot;版本回退&quot;">​</a></h3><p>我们学会了修改文件，现在我继续对<code>text.txt</code>文件进行修改，再新增一行 3333，并提交到仓库中</p><p><img src="http://cdn.bingkele.cc/Fpk5-sf1wZ8FzZvh_bLa4omRvywl" alt=""></p><p>OK，现在我们已经有了三次提交了，但是如果我们感觉这段代码写的不好，想回退到第二次提交的状态该怎么操作呢？有如下两种命令：</p><div class="language-powershell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git reset </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">hard HEAD^</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令表示回退到上个版本，如果我们要回退到上上个版本只需要把<code>HEAD^</code>改成<code>HEAD^^</code>，以此类推。</p><p>但是，如果我们有 100 个版本，我们要回退到底 2 个版本，那我们岂不是要敲 90 多个^吗。</p><p>所以，我们可以使用以下简便命命令操作：</p><div class="language-powershell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git reset </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">hard 版本号</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>版本号我们通过<code>git log</code>命令可以看到每次提交的<code>commit</code>后面的那一大串字符串。</p><p>我们先看看当前<code>text.txt</code>的文件内容,可以使用 <code>cat text.txt</code>查看。</p><p><img src="http://cdn.bingkele.cc/FmOy0MRo1Q9qzUGUOaKo3dSYeprI" alt=""></p><p>可以看到，现在是第三个版本，所以内容有里面有一堆 3。</p><p>我们使用第二种方法回退到上个版本</p><p><img src="http://cdn.bingkele.cc/FpdRVzcuLU-308dozR659DY2uda6" alt=""></p><p>OK，我们现在成功回退到第 2 个版本了，我们再使用<code>cat</code>命令看看文件内容</p><p><img src="http://cdn.bingkele.cc/FnNb98ATMs6C7WvbBHH7TunH6HYT" alt=""></p><p>可以看到，文件内容成功回退到第二次提交时的内容了</p><h3 id="恢复版本" tabindex="-1">恢复版本 <a class="header-anchor" href="#恢复版本" aria-label="Permalink to &quot;恢复版本&quot;">​</a></h3><p>现在我们已经回退到第二个版本，那么如果我们需要再次回到第三个版本中，那该怎么操作呢？</p><p>我们当然也可以使用<code>git reset --hard 版本号</code>来恢复到第三个版本，<strong>但是</strong>，如果我们不知道第三个版本的版本号，恰巧 Git 窗口又是重新打开的，没有记录了，那怎么查看第三个版本的版本号呢？</p><p>我们可以使用<code>git reflog</code>命令查看所有历史记录的版本</p><p><img src="http://cdn.bingkele.cc/FoJsRGQf-i4ZvqY15GtLlRhWlqVT" alt=""></p><p>OK，我们现在已经看到第三次提交的版本号了，我们直接复制出来使用<code>git reset --hard</code> 命令恢复即可。</p><p><img src="http://cdn.bingkele.cc/FuXj6Y_5HJatc5FGg5yny_Z_hRv3" alt=""></p><p>我们可以看到文件的内容已经恢复成第三次提交时的内容了。</p><h3 id="创建分支" tabindex="-1">创建分支 <a class="header-anchor" href="#创建分支" aria-label="Permalink to &quot;创建分支&quot;">​</a></h3><p>我们在开发大型项目的时候，往往会多人协作，每个人负责不同的版块的开发，这个时候，我们就需要用到 Git 工具的创建分支功能了。</p><p>当我们没有创建分支的时候，默认是操作的主分支，即<code>master</code>分支。</p><p>创建分支使用<code>git checkout 分支名</code>命令</p><p>切换到某个分支可以用<code>git branch 分支名</code>命令</p><p>我们可以在创建分支之后直接切换到该分支，只需要在后面加上<code>-b</code>即可。首先，我们来创建一个<code>dev</code>分支</p><p><img src="http://cdn.bingkele.cc/ForQ_O-o4swd9vEwDM_FzxTWQPZL" alt=""></p><p>我们可以看到，成功创建了一个<code>dev</code>的分支，并且已经切换到这个分支中。</p><p><strong>我们在分支中的操作不会影响到主分支中的文件</strong></p><h3 id="合并分支" tabindex="-1">合并分支 <a class="header-anchor" href="#合并分支" aria-label="Permalink to &quot;合并分支&quot;">​</a></h3><p>那我们在<code>dev</code>分支下创建一个<code>test.txt</code>，然后将此文件添加到仓库区中</p><p><img src="http://cdn.bingkele.cc/FtgssA3ukbhO5ZTFukiqmnC4wErZ" alt=""></p><p>然后我们切换回主分支，使用<code>git checkout master</code>命令</p><p>再查看当前目录下的文件</p><p><img src="http://cdn.bingkele.cc/FoImYi_vdXnwpZhSTJw6s2JWEkfu" alt=""></p><p>我们发现并没有刚才创建的<code>test.txt</code>文件，这是怎么回事呢？</p><p>我刚才说过，在分支下的操作并不会影响到主分支中的文件，这样就很方便我们进行多人协作开发。</p><p>好了，假如我们现在<code>dev</code>分支的功能已经开发完了，要怎么合并到主分支中呢？</p><p>我们先切换到 master 分支中，然后使用<code>git merge 要合并的分支名</code>来进行合并,例如：</p><p><img src="http://cdn.bingkele.cc/FoLIcXa6vt4ggxzJbJ0MW8585eKF" alt=""></p><p>至此，已经成功将其他分支的内容合并到主分支中</p><p>总结一下关于分支的命令：</p><ul><li>查看分支：git branch</li><li>创建分支：git branch name</li><li>切换分支：git checkout name</li><li>创建+切换分支：git checkout -b name</li><li>合并分支：git merge name</li><li>删除分支：git branch -d name</li></ul><h2 id="使用远程仓库" tabindex="-1">使用远程仓库 <a class="header-anchor" href="#使用远程仓库" aria-label="Permalink to &quot;使用远程仓库&quot;">​</a></h2><p>先打开<a href="https://github.com/" target="_blank" rel="noreferrer">Github</a>的官方网站，注册个账号</p><p>然后点击右上角的小加号然后选择<code>New repository</code>创建一个仓库</p><p><img src="http://cdn.bingkele.cc/FjvZ38As-GS8v2-AVx69bysRtYub" alt=""></p><p>然后在页面中输入对应的信息</p><p><img src="http://cdn.bingkele.cc/FvTlIlVJV2wMMLZMvTogpfICccAi" alt=""></p><p>如果你没勾选生成初始化<code>README</code>文档，俺么在仓库的页面中，我们可以看到这样的信息</p><p><img src="http://cdn.bingkele.cc/FsX3vnm1EE0xz75uUhH9WLG-5BKM" alt=""></p><p>我们发现<code>git init</code> <code>git add</code> <code>git commit</code>这三个命令我们已经执行过了。</p><p>然后我们只要执行最后的两条命令即可将项目上传至<code>Github</code>上</p><p>直接复制下来，在 Git 窗口中粘贴执行</p><p><img src="http://cdn.bingkele.cc/FokOoBV54c0-hAOfY4D7oPMdGbEp" alt=""></p><p>没有任何提示，这个时候我们输入<code>git remote -v</code>可以查看远程仓库的详细信息</p><p><img src="http://cdn.bingkele.cc/FuoEuGoUkNu60mYO_KBYUq0KAyKR" alt=""></p><p>可以看到，有远程仓库的连接信息</p><p>这个时候，我们只需要执行最后一行命令即可将项目上传至远程仓库中</p><p>再次复制过来执行一下，会弹出两个消息框，需要输入<code>github</code>的账号密码</p><p><img src="http://cdn.bingkele.cc/Fn8WhQ3ZxZVXXz4J8pFPY_E2SVMQ" alt=""></p><p><img src="http://cdn.bingkele.cc/Fg8J7aoZG60XhQ-J5Os_6RUCgYFv" alt=""></p><p>输入完<code>github</code>的账号密码后，就会立即将项目中的文件上传至<code>github</code></p><p><img src="http://cdn.bingkele.cc/FizU_ktWjpkr5bn3LxHFE3W3vaNQ" alt=""></p><p>出现这样的提示，说明我们的项目上传成功了</p><p>我们回到<code>github</code>的仓库页面中，会发现我们项目里的文件出现在了页面中</p><p><img src="http://cdn.bingkele.cc/FgdAfBD9BTrg04HYiglvt8iTD_wQ" alt=""></p><p><strong>OK 啦，这就是本篇的全部内容啦，感谢观看~</strong></p><p><strong>高级的操作以后再更新吧，学会这些你就已经可以满足日常开发的需求啦~</strong></p>`,119),o=[s];function i(l,n,r,d,g,h){return t(),p("div",null,o)}const b=e(c,[["render",i]]);export{u as __pageData,b as default};
