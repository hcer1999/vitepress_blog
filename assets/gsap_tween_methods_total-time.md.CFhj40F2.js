import{l as e,a as t,c as s,a5 as i}from"./chunks/framework.DAV8GD4U.js";const m=JSON.parse('{"title":"GSAP中文文档 - tween 方法 - 总时间（totalTime）","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/tween/methods/total-time.md","filePath":"gsap/tween/methods/total-time.md","lastUpdated":1731921447000}'),l={name:"gsap/tween/methods/total-time.md"};function n(o,a,r,p,d,h){return t(),s("div",null,a[0]||(a[0]=[i(`<h1 id="gsap中文文档-tween-方法-总时间-totaltime" tabindex="-1">GSAP中文文档 - tween 方法 - 总时间（totalTime） <a class="header-anchor" href="#gsap中文文档-tween-方法-总时间-totaltime" aria-label="Permalink to &quot;GSAP中文文档 - tween 方法 - 总时间（totalTime）&quot;">​</a></h1><h2 id="总时间-totaltime" tabindex="-1">总时间（totalTime） <a class="header-anchor" href="#总时间-totaltime" aria-label="Permalink to &quot;总时间（totalTime）&quot;">​</a></h2><p>省略参数时返回当前值（获取器），而定义参数则设置该值（设置器），并返回实例本身以便于链式调用。</p><p>获取或设置播放头的位置，根据 <code>totalDuration</code> 计算，<strong>包括任何重复和重复延迟</strong>。例如，如果一个补间有一个 <code>duration</code> 为 2 和 <code>repeat</code> 为 3，<code>totalTime</code> 在补间的整个过程中将从 0 变化到 8（播放一次然后重复 3 次，总共 4 个周期），而 <code>time</code> 将总共 4 次从 0 变化到 2。如果您添加了一个 <code>repeatDelay</code> 为 1，那么 <code>totalTime</code> 在补间的整个过程中将从 0 变化到 11。</p><p>此方法既作为获取器也作为设置器。省略参数时返回当前值（获取器），而定义参数则设置该值（设置器），并返回实例本身以便于链式调用。</p><p><code>totalTime</code> 永远不会超过 <code>totalDuration</code>，也不会小于 0（值将被适当裁剪）。负值将从动画的<strong>末尾</strong>解释。例如，-2 将是结束前 2 秒。如果动画的 <code>totalDuration</code> 是 6 并且您执行 <code>myAnimation.totalTime(-2)</code>，它将跳转到 <code>totalTime</code> 为 4。</p><h3 id="参数-parameters" tabindex="-1">参数（Parameters） <a class="header-anchor" href="#参数-parameters" aria-label="Permalink to &quot;参数（Parameters）&quot;">​</a></h3><ul><li><strong>value</strong>: Number（可选） <ul><li>设置补间的总时间。</li></ul></li></ul><h3 id="返回值-returns" tabindex="-1">返回值（Returns） <a class="header-anchor" href="#返回值-returns" aria-label="Permalink to &quot;返回值（Returns）&quot;">​</a></h3><ul><li>Number <ul><li>如果未提供参数，返回当前总时间。</li></ul></li><li>self <ul><li>如果提供了参数，返回实例本身以便于链式调用。</li></ul></li></ul><h3 id="示例代码-example-code" tabindex="-1">示例代码（Example Code） <a class="header-anchor" href="#示例代码-example-code" aria-label="Permalink to &quot;示例代码（Example Code）&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取总时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myAnimation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">totalTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置总时间，跳转到新值，就像 seek() 一样</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myAnimation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">totalTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,12)]))}const k=e(l,[["render",n]]);export{m as __pageData,k as default};
