import{l as s,c as e,a5 as i,a as l}from"./chunks/framework.DJyBczLA.js";const k=JSON.parse('{"title":"GSAP中文文档 - timeline 方法 - 播放（play）","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/timeline/methods/play.md","filePath":"gsap/timeline/methods/play.md","lastUpdated":1733646466000}'),n={name:"gsap/timeline/methods/play.md"};function p(t,a,r,h,d,o){return l(),e("div",null,a[0]||(a[0]=[i(`<h1 id="gsap中文文档-timeline-方法-播放-play" tabindex="-1">GSAP中文文档 - timeline 方法 - 播放（play） <a class="header-anchor" href="#gsap中文文档-timeline-方法-播放-play" aria-label="Permalink to &quot;GSAP中文文档 - timeline 方法 - 播放（play）&quot;">​</a></h1><h2 id="播放-play" tabindex="-1">播放（play） <a class="header-anchor" href="#播放-play" aria-label="Permalink to &quot;播放（play）&quot;">​</a></h2><p>开始向前播放，可以选择性地从特定时间开始（默认情况下，播放从播放头当前所在位置开始）。这也确保实例既不暂停也不反向播放。</p><p>如果您定义了一个“从”时间（第一个参数，也可能是时间线实例的标签），播放头会立即移动到那里，如果在播放头原来的位置和新时间之间有任何事件/回调，它们将不会被触发，因为默认情况下 <code>suppressEvents</code>（第二个参数）是 <code>true</code>。想象一下，就像在唱片机上拿起唱针，移动到新位置后再放回唱片上。如果您不希望在最初的移动过程中抑制事件/回调，只需将 <code>suppressEvents</code> 参数设置为 <code>false</code>。</p><h3 id="方法签名" tabindex="-1">方法签名 <a class="header-anchor" href="#方法签名" aria-label="Permalink to &quot;方法签名&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>play(from: Number | String, suppressEvents: Boolean): self</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>开始向前播放，可以选择性地从特定时间开始。</p><h3 id="参数-parameters" tabindex="-1">参数（Parameters） <a class="header-anchor" href="#参数-parameters" aria-label="Permalink to &quot;参数（Parameters）&quot;">​</a></h3><ul><li><p><strong>from</strong>: Number | String</p><ul><li>要开始播放的特定时间或标签。</li></ul></li><li><p><strong>suppressEvents</strong>: Boolean（可选）</p><ul><li>默认值为 <code>true</code>。如果设置为 <code>false</code>，则在跳转过程中会触发事件/回调。</li></ul></li></ul><h3 id="返回值-returns" tabindex="-1">返回值（Returns） <a class="header-anchor" href="#返回值-returns" aria-label="Permalink to &quot;返回值（Returns）&quot;">​</a></h3><ul><li>self <ul><li>返回实例本身，便于链式调用。</li></ul></li></ul><h2 id="示例代码-example-code" tabindex="-1">示例代码（Example Code） <a class="header-anchor" href="#示例代码-example-code" aria-label="Permalink to &quot;示例代码（Example Code）&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从播放头当前所在位置开始播放</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从动画的确切2秒处开始播放</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从动画的确切2秒处开始播放，但在最初的移动过程中不抑制事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>**注意：**如果时间线的 <code>timeScale</code> 在调用 <code>play()</code> 时正好为 0，它将被更改为 1（否则它不会播放）。如果您打算从 0 开始逐渐增加时间缩放，可以在调用 <code>play()</code> 之前将其设置为一个非常小的数字，如 <code>tl.timeScale(tl.timeScale() || 0.001).play()</code>，以避免它跳到 1。</p>`,14)]))}const u=s(n,[["render",p]]);export{k as __pageData,u as default};
