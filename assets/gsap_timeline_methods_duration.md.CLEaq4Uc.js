import{l as e,c as i,a5 as s,a as t}from"./chunks/framework.DJyBczLA.js";const u=JSON.parse('{"title":"GSAP中文文档 - timeline 方法 - 持续时间(duration)","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/timeline/methods/duration.md","filePath":"gsap/timeline/methods/duration.md","lastUpdated":1733646466000}'),n={name:"gsap/timeline/methods/duration.md"};function l(d,a,r,o,p,c){return t(),i("div",null,a[0]||(a[0]=[s(`<h1 id="gsap中文文档-timeline-方法-持续时间-duration" tabindex="-1">GSAP中文文档 - timeline 方法 - 持续时间(duration) <a class="header-anchor" href="#gsap中文文档-timeline-方法-持续时间-duration" aria-label="Permalink to &quot;GSAP中文文档 - timeline 方法 - 持续时间(duration)&quot;">​</a></h1><h2 id="持续时间-duration" tabindex="-1">持续时间（duration） <a class="header-anchor" href="#持续时间-duration" aria-label="Permalink to &quot;持续时间（duration）&quot;">​</a></h2><p>获取时间线的持续时间，或者如果用作设置器，调整时间线的 <code>timeScale</code> 以适应指定的持续时间。</p><h3 id="方法签名" tabindex="-1">方法签名 <a class="header-anchor" href="#方法签名" aria-label="Permalink to &quot;方法签名&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>duration( value: Number ): [Number | self]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>[覆盖] 获取时间线的持续时间，或者如果用作设置器，调整时间线的 <code>timeScale</code> 以适应指定的持续时间。</p><h3 id="参数-parameters" tabindex="-1">参数（Parameters） <a class="header-anchor" href="#参数-parameters" aria-label="Permalink to &quot;参数（Parameters）&quot;">​</a></h3><ul><li><strong>value</strong>: Number（可选） <ul><li>（默认值为 <code>NaN</code>）省略参数时返回当前值（获取器），而定义参数则设置该值（设置器）并返回实例本身以便于链式调用。</li></ul></li></ul><h3 id="返回值-returns" tabindex="-1">返回值（Returns） <a class="header-anchor" href="#返回值-returns" aria-label="Permalink to &quot;返回值（Returns）&quot;">​</a></h3><ul><li>Number | self <ul><li>省略参数时返回当前值（获取器），定义参数时设置该值（设置器）并返回实例本身以便于链式调用。</li></ul></li></ul><h3 id="详细信息-details" tabindex="-1">详细信息（Details） <a class="header-anchor" href="#详细信息-details" aria-label="Permalink to &quot;详细信息（Details）&quot;">​</a></h3><p>获取时间线的 <code>duration</code>，或者如果用作设置器，调整时间线的 <code>timeScale</code> 以适应指定的持续时间。<code>duration()</code> 与 <code>totalDuration()</code> 相同，除非时间线实例有一个非零的 <code>repeat</code>，在这种情况下 <code>totalDuration</code> 包括 <code>repeat</code> 和 <code>repeatDelays</code>，而 <code>duration</code> 不包括。</p><p>例如，如果一个时间线有一个 <code>duration</code> 为 2 和一个 <code>repeat</code> 为 3，它的 <code>totalDuration</code> 将是 8（一次标准播放加上 3 次重复等于 4 个总周期）。</p><p>由于时间线的 <code>duration</code> 由其内容决定，使用此方法作为设置器将简单地导致 <code>timeScale</code> 被调整以适应当前内容到指定的 <code>duration</code>，但 <code>duration</code> 值本身将保持不变。</p><p>例如，如果时间线中有 20 秒的补间，并且你执行 <code>myTimeline.duration(10)</code>，<code>timeScale</code> 将被更改为 2。如果你立即再次检查 <code>duration</code>，它仍然会返回 20，因为从技术上讲这就是所有子补间/时间线的持续时间，但由于 <code>timeScale</code> 的原因，播放速度将加倍。</p><p>此方法既作为获取器也作为设置器。省略参数时返回当前值（获取器），而定义参数则设置该值（设置器），并返回实例本身以便于链式调用，如 <code>myAnimation.duration(2).play(1);</code></p><h2 id="示例代码-example-code" tabindex="-1">示例代码（Example Code） <a class="header-anchor" href="#示例代码-example-code" aria-label="Permalink to &quot;示例代码（Example Code）&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取当前持续时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentDuration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调整 myAnimation 的 timeScale，使其在父时间线上正好持续 10 秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,18)]))}const m=e(n,[["render",l]]);export{u as __pageData,m as default};
