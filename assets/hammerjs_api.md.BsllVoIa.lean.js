import{l as i,c as a,a5 as n,a as e}from"./chunks/framework.DJyBczLA.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"hammerjs/api.md","filePath":"hammerjs/api.md","lastUpdated":1733646466000}'),t={name:"hammerjs/api.md"};function l(p,s,h,r,d,k){return e(),a("div",null,s[0]||(s[0]=[n(`<p>以下是Hammer.js API文档的内容，我将保持原格式并提供详细解析：</p><h2 id="general-api" tabindex="-1">General API <a class="header-anchor" href="#general-api" aria-label="Permalink to &quot;General API&quot;">​</a></h2><ul><li>Hammer</li><li>Hammer.defaults</li><li>Hammer.Manager</li><li>Hammer.Recognizer</li><li>Hammer.input event</li><li>Event object</li><li>Constants</li><li>Utils</li></ul><h3 id="hammer" tabindex="-1">Hammer <a class="header-anchor" href="#hammer" aria-label="Permalink to &quot;Hammer&quot;">​</a></h3><p>创建一个带有默认识别器集的管理器实例，并返回该管理器实例。默认集包含<code>tap</code>、<code>doubletap</code>、<code>pan</code>、<code>swipe</code>、<code>press</code>、<code>pinch</code>和<code>rotate</code>识别器实例。</p><p>您应该只在默认设置满意的情况下，或者已经设置了自定义初始设置的情况下使用此方法。</p><h4 id="constructor-htmlelement-options" tabindex="-1">Constructor(HTMLElement, [options]) <a class="header-anchor" href="#constructor-htmlelement-options" aria-label="Permalink to &quot;Constructor(HTMLElement, [options])&quot;">​</a></h4><p>仅需元素和选项。这些选项将与<code>Hammer.defaults</code>合并。同时，<code>Hammer.defaults.preset</code>中定义的识别器集也将被添加。</p><p>如果传入一个空的<code>recognizer</code>选项，则不会添加任何初始识别器。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myElement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hitarea&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hammer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myElement)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="hammer-defaults" tabindex="-1">Hammer.defaults <a class="header-anchor" href="#hammer-defaults" aria-label="Permalink to &quot;Hammer.defaults&quot;">​</a></h3><p>创建实例时的默认值，将与您的选项合并。</p><ul><li><p><strong>touchAction: ‘compute’</strong><br> 接受<code>compute</code>、<code>auto</code>、<code>pan-y</code>、<code>pan-x</code>和<code>none</code>值。默认选项将根据您的识别器为您选择正确的值。</p></li><li><p><strong>domEvents: false</strong><br> 让Hammer也触发DOM事件。这会稍微慢一些，默认情况下是禁用的。如果您想使用事件委托，建议将其设置为<code>true</code>。</p></li><li><p><strong>enable: true</strong><br> 接受一个布尔值，或一个返回布尔值的函数。</p></li><li><p><strong>cssProps: {….}</strong><br> 一组CSS属性，这些属性可以改善输入事件的处理。详细信息请查看JSDoc。</p></li><li><p><strong>preset: [….]</strong><br> 调用<code>Hammer()</code>时，默认的识别器设置。创建新的管理器时，这些将被跳过。</p></li></ul><h3 id="hammer-manager" tabindex="-1">Hammer.Manager <a class="header-anchor" href="#hammer-manager" aria-label="Permalink to &quot;Hammer.Manager&quot;">​</a></h3><p>管理器是您元素的所有识别器实例的容器。它为您设置输入事件侦听器，并在元素上为您设置<code>touch-action</code>属性。</p><h4 id="constructor-htmlelement-options-1" tabindex="-1">Constructor(HTMLElement, [options]) <a class="header-anchor" href="#constructor-htmlelement-options-1" aria-label="Permalink to &quot;Constructor(HTMLElement, [options])&quot;">​</a></h4><p>仅需元素和选项。这些选项将与<code>Hammer.defaults</code>合并。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Hammer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myElement)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>您可以使用<code>recognizers</code>选项设置初始识别器集。数组应该像这样构建：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Hammer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myElement, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  recognizers: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // RecognizerClass, [options], [recognizeWith, ...], [requireFailure, ...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [Hammer.Rotate],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [Hammer.Pinch, { enable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rotate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [Hammer.Swipe, { direction: Hammer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DIRECTION_HORIZONTAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="set-options" tabindex="-1">set(options) <a class="header-anchor" href="#set-options" aria-label="Permalink to &quot;set(options)&quot;">​</a></h4><p>更改管理器实例上的选项。推荐使用此方法，因为它会在需要时更新<code>touchAction</code>值。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ enable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="get-string-add-recognizer-and-remove-recognizer" tabindex="-1">get(string), add(Recognizer) and remove(Recognizer) <a class="header-anchor" href="#get-string-add-recognizer-and-remove-recognizer" aria-label="Permalink to &quot;get(string), add(Recognizer) and remove(Recognizer)&quot;">​</a></h4><p>向管理器添加一个新的<code>Recognizer</code>实例。添加的顺序也是识别器执行的顺序。就像<code>get</code>方法一样，它返回添加的<code>Recognizer</code>实例。</p><p><code>get</code>和<code>remove</code>方法接受事件名称（来自识别器）或识别器实例作为参数。</p><p>添加和移除也接受识别器数组。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 都返回myPinchRecognizer实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pinch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myPinchRecognizer)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myPinchRecognizer) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回识别器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([mySecondRecognizer, myThirdRecognizer])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myPinchRecognizer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rotate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([myPinchRecognizer, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rotate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="on-events-handler-and-off-events-handler" tabindex="-1">on(events, handler) and .off(events, [handler]) <a class="header-anchor" href="#on-events-handler-and-off-events-handler" aria-label="Permalink to &quot;on(events, handler) and .off(events, [handler])&quot;">​</a></h4><p>监听添加的识别器触发的事件，或移除绑定的事件。接受多个用空格分隔的事件。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pinch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ev.scale)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="stop-force" tabindex="-1">stop([force]) <a class="header-anchor" href="#stop-force" aria-label="Permalink to &quot;stop([force])&quot;">​</a></h4><p>停止识别当前输入会话。如果强制停止，识别器循环会立即停止。</p><h4 id="destroy" tabindex="-1">destroy() <a class="header-anchor" href="#destroy" aria-label="Permalink to &quot;destroy()&quot;">​</a></h4><p>取消所有事件和输入事件的绑定，使管理器不可用。它不会取消任何dom事件侦听器的绑定。</p><h3 id="hammer-recognizer" tabindex="-1">Hammer.Recognizer <a class="header-anchor" href="#hammer-recognizer" aria-label="Permalink to &quot;Hammer.Recognizer&quot;">​</a></h3><p>每个识别器都从这个类扩展而来。所有识别器还有<code>enable</code>选项，这是一个布尔值或一个动态启用/禁用识别器的回调函数。</p><h4 id="constructor-options" tabindex="-1">Constructor([options]) <a class="header-anchor" href="#constructor-options" aria-label="Permalink to &quot;Constructor([options])&quot;">​</a></h4><p>仅需设置选项。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pinch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Hammer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Pinch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pinch) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加到管理器实例</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="set-options-1" tabindex="-1">set(options) <a class="header-anchor" href="#set-options-1" aria-label="Permalink to &quot;set(options)&quot;">​</a></h4><p>更改识别器实例上的选项。推荐使用此方法，因为它会在需要时更新<code>touchAction</code>值。</p><h4 id="recognizewith-otherrecognizer-and-droprecognizewith-otherrecognizer" tabindex="-1">recognizeWith(otherRecognizer) and dropRecognizeWith(otherRecognizer) <a class="header-anchor" href="#recognizewith-otherrecognizer-and-droprecognizewith-otherrecognizer" aria-label="Permalink to &quot;recognizeWith(otherRecognizer) and dropRecognizeWith(otherRecognizer)&quot;">​</a></h4><p>与给定的其他识别器同时运行识别器，双向进行。这适用于将平移与结束时的滑动组合，或者在捏合的同时旋转目标。断开连接只会移除识别器上的链接，而不是其他识别器上的。两个方法都接受识别器数组。</p><p>如果识别器已添加到管理器中，则这些方法也接受其他识别器的事件名称作为字符串。</p><h4 id="requirefailure-otherrecognizer-and-droprequirefailure-otherrecognizer" tabindex="-1">requireFailure(otherRecognizer) and dropRequireFailure(otherRecognizer) <a class="header-anchor" href="#requirefailure-otherrecognizer-and-droprequirefailure-otherrecognizer" aria-label="Permalink to &quot;requireFailure(otherRecognizer) and dropRequireFailure(otherRecognizer)&quot;">​</a></h4><p>仅当其他识别器失败时运行识别器。断开连接只会移除识别器上的链接，而不是其他识别器上的。两个方法都接受识别器数组。</p><p>如果识别器已添加到管理器中，则这些方法也接受其他识别器的事件名称作为字符串。</p><h3 id="hammer-input-event" tabindex="-1">Hammer.input event <a class="header-anchor" href="#hammer-input-event" aria-label="Permalink to &quot;Hammer.input event&quot;">​</a></h3><p>Hammer触发一个“秘密”事件<code>hammer.input</code>。它在接收到每个输入时被触发，使您能够处理原始输入。小而强大的功能。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hammertime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hammer.input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ev.pointers)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="event-object" tabindex="-1">Event object <a class="header-anchor" href="#event-object" aria-label="Permalink to &quot;Event object&quot;">​</a></h3><p>Hammer触发的所有事件都会接收一个包含以下属性的事件对象。</p><table><thead><tr><th>Name</th><th>Value</th></tr></thead><tbody><tr><td>type</td><td>事件名称，例如<code>panstart</code>。</td></tr><tr><td>deltaX</td><td>X轴上的移动。</td></tr><tr><td>deltaY</td><td>Y轴上的移动。</td></tr><tr><td>deltaTime</td><td>自第一个输入以来的总时间（毫秒）。</td></tr><tr><td>distance</td><td>移动的距离。</td></tr><tr><td>angle</td><td>移动的角度。</td></tr><tr><td>velocityX</td><td>X轴上的速度，单位为px/ms。</td></tr><tr><td>velocityY</td><td>Y轴上的速度，单位为px/ms</td></tr><tr><td>velocity</td><td>最高的速度X/Y值。</td></tr><tr><td>direction</td><td>移动的方向。匹配<code>DIRECTION</code>常量。</td></tr><tr><td>offsetDirection</td><td>从起始点移动的方向。匹配<code>DIRECTION</code>常量。</td></tr><tr><td>scale</td><td>多点触控时的缩放。单点触控时为1。</td></tr><tr><td>rotation</td><td>多点触控时的旋转（度）。单点触控时为0。</td></tr><tr><td>center</td><td>多点触控的中心位置，或只是单个指针。</td></tr><tr><td>srcEvent</td><td>源事件对象，类型为<code>TouchEvent</code>、<code>MouseEvent</code>或<code>PointerEvent</code>。</td></tr><tr><td>target</td><td>接收事件的目标。</td></tr><tr><td>pointerType</td><td>主要指针类型，可能是<code>touch</code>、<code>mouse</code>、<code>pen</code>或<code>kinect</code>。</td></tr><tr><td>eventType</td><td>事件类型，匹配<code>INPUT</code>常量。</td></tr><tr><td>isFirst</td><td>第一次输入时为<code>true</code>。</td></tr><tr><td>isFinal</td><td>最终（最后一次）输入时为<code>true</code>。</td></tr><tr><td>pointers</td><td>包含所有指针的数组，包括结束的指针（<code>touchend</code>、<code>mouseup</code>）。</td></tr><tr><td>changedPointers</td><td>包含所有新/移动/丢失的指针的数组。</td></tr><tr><td>preventDefault</td><td><code>srcEvent.preventDefault()</code>方法的引用。仅限专家使用！</td></tr></tbody></table><h3 id="constants" tabindex="-1">Constants <a class="header-anchor" href="#constants" aria-label="Permalink to &quot;Constants&quot;">​</a></h3><p>所有常量都在<code>Hammer</code>对象中定义。由于它们是二进制标志，您可以在它们上使用位运算符。MDN有一些关于这方面的优秀文档。</p><h4 id="directions" tabindex="-1">Directions <a class="header-anchor" href="#directions" aria-label="Permalink to &quot;Directions&quot;">​</a></h4><p>用于设置识别器的方向，以及读取事件的值。</p><table><thead><tr><th>Name</th><th>Value</th></tr></thead><tbody><tr><td>DIRECTION_NONE</td><td>1</td></tr><tr><td>DIRECTION_LEFT</td><td>2</td></tr><tr><td>DIRECTION_RIGHT</td><td>4</td></tr><tr><td>DIRECTION_UP</td><td>8</td></tr><tr><td>DIRECTION_DOWN</td><td>16</td></tr><tr><td>DIRECTION_HORIZONTAL</td><td>6</td></tr><tr><td>DIRECTION_VERTICAL</td><td>24</td></tr><tr><td>DIRECTION_ALL</td><td>30</td></tr></tbody></table><h4 id="input-events" tabindex="-1">Input Events <a class="header-anchor" href="#input-events" aria-label="Permalink to &quot;Input Events&quot;">​</a></h4><p>Hammer将所有类型的输入（mousedown、mousemove、touchmove、pointercancel）映射到这些常量。</p><table><thead><tr><th>Name</th><th>Value</th></tr></thead><tbody><tr><td>INPUT_START</td><td>1</td></tr><tr><td>INPUT_MOVE</td><td>2</td></tr><tr><td>INPUT_END</td><td>4</td></tr><tr><td>INPUT_CANCEL</td><td>8</td></tr></tbody></table><h4 id="recognizer-states" tabindex="-1">Recognizer States <a class="header-anchor" href="#recognizer-states" aria-label="Permalink to &quot;Recognizer States&quot;">​</a></h4><p>识别器内部使用这些状态来定义其状态。</p><table><thead><tr><th>Name</th><th>Value</th></tr></thead><tbody><tr><td>STATE_POSSIBLE</td><td>1</td></tr><tr><td>STATE_BEGAN</td><td>2</td></tr><tr><td>STATE_CHANGED</td><td>4</td></tr><tr><td>STATE_ENDED</td><td>8</td></tr><tr><td>STATE_RECOGNIZED</td><td>STATE_ENDED</td></tr><tr><td>STATE_CANCELLED</td><td>16</td></tr><tr><td>STATE_FAILED</td><td>32</td></tr></tbody></table><h3 id="utils" tabindex="-1">Utils <a class="header-anchor" href="#utils" aria-label="Permalink to &quot;Utils&quot;">​</a></h3><h4 id="hammer-on-element-types-handler" tabindex="-1">Hammer.on(element, types, handler) <a class="header-anchor" href="#hammer-on-element-types-handler" aria-label="Permalink to &quot;Hammer.on(element, types, handler)&quot;">​</a></h4><p><code>addEventListener</code>的包装器，接受多个事件类型。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hammer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load resize scroll&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ev.type)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="hammer-off-element-types-handler" tabindex="-1">Hammer.off(element, types, handler) <a class="header-anchor" href="#hammer-off-element-types-handler" aria-label="Permalink to &quot;Hammer.off(element, types, handler)&quot;">​</a></h4><p>像<code>Hammer.on</code>一样，这是<code>removeEventListener</code>的包装器，接受多个事件类型。</p><h4 id="hammer-each-obj-handler" tabindex="-1">Hammer.each(obj, handler) <a class="header-anchor" href="#hammer-each-obj-handler" aria-label="Permalink to &quot;Hammer.each(obj, handler)&quot;">​</a></h4><p>遍历数组或对象的自有属性。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hammer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hammer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="hammer-merge-obj1-obj2" tabindex="-1">Hammer.merge(obj1, obj2) <a class="header-anchor" href="#hammer-merge-obj1-obj2" aria-label="Permalink to &quot;Hammer.merge(obj1, obj2)&quot;">​</a></h4><p>将obj2的属性合并到obj1中。属性不会被覆盖。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaults </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hammer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, defaults)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// options.a == true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// options.b == false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// options.c == [1,2,3]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="hammer-extend-obj1-obj2" tabindex="-1">Hammer.extend(obj1, obj2) <a class="header-anchor" href="#hammer-extend-obj1-obj2" aria-label="Permalink to &quot;Hammer.extend(obj1, obj2)&quot;">​</a></h4><p>将obj2的属性扩展到obj1中。属性将被覆盖。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hammer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1, obj2)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj1.a == true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj1.b == true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj1.c == [4,5,6]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="hammer-inherit-child-base-properties" tabindex="-1">Hammer.inherit(child, base, [properties]) <a class="header-anchor" href="#hammer-inherit-child-base-properties" aria-label="Permalink to &quot;Hammer.inherit(child, base, [properties])&quot;">​</a></h4><p>简单的类继承。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hammer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inherit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dog, Animal, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  bark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Spaikie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="hammer-bindfn-fn-scope" tabindex="-1">Hammer.bindFn(fn, scope) <a class="header-anchor" href="#hammer-bindfn-fn-scope" aria-label="Permalink to &quot;Hammer.bindFn(fn, scope)&quot;">​</a></h4><p><code>Function.bind</code>的简单替代方案。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myContext) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// is true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Hammer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myFunction, myContext), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="hammer-prefixed-obj-name" tabindex="-1">Hammer.prefixed(obj, name) <a class="header-anchor" href="#hammer-prefixed-obj-name" aria-label="Permalink to &quot;Hammer.prefixed(obj, name)&quot;">​</a></h4><p>从浏览器获取（带前缀的）属性。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hammer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prefixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body.style, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;userSelect&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns &quot;webkitUserSelect&quot; on Chrome 35</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,91)]))}const c=i(t,[["render",l]]);export{o as __pageData,c as default};
