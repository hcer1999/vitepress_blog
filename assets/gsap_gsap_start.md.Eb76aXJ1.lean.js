import{l as n,c as l,a5 as i,v as a,a as p}from"./chunks/framework.Cbnp_j6w.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/gsap/start.md","filePath":"gsap/gsap/start.md","lastUpdated":1730284782000}'),e={name:"gsap/gsap/start.md"};function t(h,s,k,r,d,E){return p(),l("div",null,s[0]||(s[0]=[i(`<p><strong><code>gsap</code> 对象是访问 GSAP 大部分功能的主要入口。它只是一个通用对象，具有各种方法和属性，用于创建和控制补间动画（Tweens）和时间轴（Timelines），这两个是理解 GSAP 的两个最重要的概念。</strong></p><p><strong>快速概览</strong></p><p>要快速了解 <code>gsap</code> 对象，可以观看 Snorkl.tv 提供的 “GSAP 3 Express” 课程中的视频 - 这是学习基础知识的最佳方式之一。</p><p>要充分利用 GSAP，理解补间动画和时间轴是什么至关重要：</p><h3 id="什么是补间动画-tween" tabindex="-1">什么是补间动画（Tween）？ <a class="header-anchor" href="#什么是补间动画-tween" aria-label="Permalink to &quot;什么是补间动画（Tween）？&quot;">​</a></h3><p>补间动画是执行所有动画工作的组件 - 可以将其视为 <strong>高性能属性设置器</strong>。你提供目标（你想要动画化的对象）、持续时间以及你想要动画的任何属性，然后当补间动画的播放头移动到新位置时，它会计算出该点的属性值，并相应地应用它们。</p><h4 id="创建补间动画的常用方法" tabindex="-1">创建补间动画的常用方法： <a class="header-anchor" href="#创建补间动画的常用方法" aria-label="Permalink to &quot;创建补间动画的常用方法：&quot;">​</a></h4><ul><li>gsap.to()</li><li>gsap.from()</li><li>gsap.fromTo()</li></ul><p>对于简单的动画（没有复杂的序列），以上方法就足够了！例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在 1 秒的时间内旋转并移动具有 &quot;box&quot; 类的元素（&quot;x&quot; 是 translateX() 变换的简写）。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">27</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,10),a("html",null,[a("iframe",{src:"https://codepen.io/GreenSock/pen/wvwEOZL",width:"100%",height:"500",frameborder:"0",allowfullscreen:""})],-1),i(`<p>你可以使用 <code>delay</code> 特殊属性进行基本的序列化，但时间轴使得序列化和复杂的编排变得更加容易。</p><h3 id="什么是时间轴-timeline" tabindex="-1">什么是时间轴（Timeline）？ <a class="header-anchor" href="#什么是时间轴-timeline" aria-label="Permalink to &quot;什么是时间轴（Timeline）？&quot;">​</a></h3><p>时间轴是 <strong>补间动画的容器</strong>。它是终极的序列化工具，允许你随时定位动画，然后使用诸如 pause()、play()、progress()、reverse()、timeScale() 等方法轻松控制整个序列。</p><p>创建任意数量的时间轴。你甚至可以 <strong>嵌套它们</strong>，这对于模块化你的动画代码非常出色！每个动画（补间动画和时间轴）都被放置在父时间轴上（默认是 globalTimeline）。移动时间轴的播放头会级联到其子元素，以便播放头保持对齐。时间轴完全是关于组合事物和协调时间/播放头 - 它实际上从不直接在目标上设置属性（补间动画处理这个）。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>                        PLAYHEAD</span></span>
<span class="line"><span>|--------------timeline-----|-----------|</span></span>
<span class="line"><span>|--tween1--|                |</span></span>
<span class="line"><span>           |-----tween2-----|-----------|</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="创建时间轴的方法" tabindex="-1">创建时间轴的方法： <a class="header-anchor" href="#创建时间轴的方法" aria-label="Permalink to &quot;创建时间轴的方法：&quot;">​</a></h4><ul><li>gsap.timeline()</li></ul><p>GSAP 的 API 允许你即时控制几乎所有事物，例如播放头位置、任何子元素的开始时间，甚至播放/暂停/反转时间轴或更改 timeScale 本身。</p><h2 id="在时间轴中对事物进行序列化" tabindex="-1">在时间轴中对事物进行序列化 <a class="header-anchor" href="#在时间轴中对事物进行序列化" aria-label="Permalink to &quot;在时间轴中对事物进行序列化&quot;">​</a></h2><p>首先，创建一个时间轴：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后使用便利方法之一 - to()、from() 或 fromTo() 添加补间动画：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>你可以这样做多少次都行。注意我们在时间轴实例（这种情况下是变量 <code>tl</code>）上调用 <code>.to()</code>，而不是 <code>gsap</code> 对象。这会创建一个补间动画并立即将其放入特定的时间轴中。另一方面，<code>gsap.to()</code> 创建一个独立的补间动画。默认情况下，动画将一个接一个地进行序列化。你甚至可以使用方法链来简化你的代码，如下所示：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//一个接一个地序列化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//注意这里没有分号！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>**注意：**整个 GSAP 平台都是面向对象的，你可以使用 gsap.to() 创建单独的补间动画实例，然后使用 timeline.add() 添加每一个，但直接在时间轴实例上调用 .to()、.from() 或 .fromTo() 来做同样的事情会更简单，步骤更少。</p><h2 id="使用位置参数控制放置" tabindex="-1">使用位置参数控制放置 <a class="header-anchor" href="#使用位置参数控制放置" aria-label="Permalink to &quot;使用位置参数控制放置&quot;">​</a></h2><p>使用可选的位置参数来精确定义你希望将动画放置在时间轴上的哪个位置。一个数字表示绝对时间（秒为单位），或者带有 <code>&quot;+=&quot;</code> 或 <code>&quot;-=&quot;</code> 前缀的字符串表示相对于时间轴末尾的偏移量。例如，<code>&quot;+=2&quot;</code> 将在末尾之后 2 秒开始，创建一个 2 秒的间隔。<code>&quot;-=2&quot;</code> 将创建一个 2 秒的重叠。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//从时间轴开始的确切时间 1.5 秒处开始：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-=0.75&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //与末尾重叠 0.75 秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;+=1&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //之前增加 1 秒间隔</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="标签" tabindex="-1">标签 <a class="header-anchor" href="#标签" aria-label="Permalink to &quot;标签&quot;">​</a></h2><p>使用标签标记时间轴上的特定位置，以便你可以在播放期间放置动画或导航到那里。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在确切的 3 秒处添加标签</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;step2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;step2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在 step2 标签处开始</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;step2+=0.75&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在 step2 标签后 0.75 秒</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//然后稍后，我们可以 seek() 到那个位置：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;step2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="控制补间动画和时间轴" tabindex="-1">控制补间动画和时间轴 <a class="header-anchor" href="#控制补间动画和时间轴" aria-label="Permalink to &quot;控制补间动画和时间轴&quot;">​</a></h2><p>补间动画和时间轴都扩展自一个暴露了大量有用方法和属性的动画类。以下是最常用的一些：</p><ul><li>pause()</li><li>play()</li><li>progress()</li><li>restart()</li><li>resume()</li><li>reverse()</li><li>seek()</li><li>time()</li><li>duration()</li><li>timeScale()</li><li>kill()</li></ul><p>你可以使用变量引用补间动画或时间轴实例，然后随时控制它：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//只有在你稍后想要控制它时才需要创建变量...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tween </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&quot;tl&quot; 是时间轴的简称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//添加动画。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//现在我们可以控制它们...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//速度加倍</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//跳到 3 秒处</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">progress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//播放到一半</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,27)]))}const c=n(e,[["render",t]]);export{o as __pageData,c as default};
