import{l as e,c as t,a5 as s,v as a,a as n}from"./chunks/framework.DJyBczLA.js";const E=JSON.parse('{"title":"GSAP中文文档 - 时间线（Timeline）","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/timeline/start.md","filePath":"gsap/timeline/start.md","lastUpdated":1733646466000}'),l={name:"gsap/timeline/start.md"};function d(p,i,h,r,k,o){return n(),t("div",null,i[0]||(i[0]=[s(`<h1 id="gsap中文文档-时间线-timeline" tabindex="-1">GSAP中文文档 - 时间线（Timeline） <a class="header-anchor" href="#gsap中文文档-时间线-timeline" aria-label="Permalink to &quot;GSAP中文文档 - 时间线（Timeline）&quot;">​</a></h1><p>时间线是一个强大的序列化工具，它作为补间和其他时间线的容器，使得控制它们作为一个整体变得简单，并精确管理它们的时间。没有时间线，构建复杂的序列会更加繁琐，因为您需要为每个动画使用 <code>delay</code>。例如：</p><h3 id="无时间线-仅使用带有延迟的补间" tabindex="-1">无时间线（仅使用带有延迟的补间） <a class="header-anchor" href="#无时间线-仅使用带有延迟的补间" aria-label="Permalink to &quot;无时间线（仅使用带有延迟的补间）&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, delay: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等待1秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, delay: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等待2秒</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果您想使第一个动画更长怎么办？您需要调整之后的所有延迟。如果您想要 <code>pause()</code> 整个序列或 <code>restart()</code> 它或 <code>reverse()</code> 它或在运行时重复它两次怎么办？这可能会变得相当混乱，但 GSAP 的时间线使其变得非常简单：</p><h3 id="有时间线-更干净-更通用" tabindex="-1">有时间线（更干净，更通用） <a class="header-anchor" href="#有时间线-更干净-更通用" aria-label="Permalink to &quot;有时间线（更干净，更通用）&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ repeat: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, repeatDelay: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 然后我们可以轻松控制整个序列...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>现在我们可以调整时间，而不用担心延迟的连锁变化！增加第一个补间的持续时间，一切都会自动调整。</p><h2 id="快速概览" tabindex="-1">快速概览 <a class="header-anchor" href="#快速概览" aria-label="Permalink to &quot;快速概览&quot;">​</a></h2><p>快速了解 GSAP 时间线的概览，请查看 Snorkl.tv 提供的 &quot;GSAP 3 Express&quot; 课程中的视频 - 这是学习 GSAP 3 基础知识的最佳方式之一。</p>`,10),a("iframe",{width:"100%",height:"500",src:"https://www.youtube.com/embed/L2BsDjK03B4?si=BzOGkxIDU51mV9eG",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:""},null,-1),s(`<h2 id="在时间线上定位动画" tabindex="-1">在时间线上定位动画 <a class="header-anchor" href="#在时间线上定位动画" aria-label="Permalink to &quot;在时间线上定位动画&quot;">​</a></h2><p>默认情况下，动画被添加到时间线的 <code>末尾</code>，以便它们一个接一个地顺序播放，但您可以使用位置参数精确控制它们的位置。它通常在 <code>vars</code> 参数之后使用，并且具有以下灵活的语法选项：</p><ul><li><code>绝对时间</code>（以秒为单位），从时间线的开始测量，作为一个 <code>数字</code>，如 <code>3</code></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从时间线的开始正好插入3秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>标签</code>，如 <code>&quot;someLabel&quot;</code>。如果标签不存在，它将被添加到时间线的末尾。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 &quot;someLabel&quot; 标签处插入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;someLabel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>&quot;&lt;&quot;</code> 前一个动画的 <code>开始</code>。将 <code>&lt;</code> 视为指向前一个动画开始的指针。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在前一个动画的开始处插入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>&quot;&gt;&quot;</code> 前一个动画的 <code>结束</code>。将 <code>&gt;</code> 视为指向前一个动画结束的指针。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在前一个动画的结束处插入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p>一个复杂的字符串，其中 <code>&quot;+=&quot;</code> 和 <code>&quot;-=&quot;</code> 前缀表示 <code>相对</code> 值。当一个数字跟随 <code>&lt;</code> 或 <code>&quot;&gt;&quot;</code> 时，它被解释为相对的，所以 <code>&quot;&lt;2&quot;</code> 与 <code>&quot;&lt;+=2&quot;</code> 相同。示例：</p><ul><li><code>&quot;+=1&quot;</code> - 比时间线结束早1秒（创建间隙）</li><li><code>&quot;-=1&quot;</code> - 比时间线结束晚1秒（重叠）</li><li><code>&quot;myLabel+=2&quot;</code> - 比标签 <code>&quot;myLabel&quot;</code> 晚2秒</li><li><code>&quot;&lt;+=3&quot;</code> - 比前一个动画的开始晚3秒</li><li><code>&quot;&lt;3&quot;</code> - 与 <code>&quot;&lt;+=3&quot;</code> 相同（见上文）（当跟随 <code>&lt;</code> 或 <code>&quot;&gt;&quot;</code> 时，<code>&quot;+=&quot;</code> 是隐含的）</li><li><code>&quot;&gt;-0.5&quot;</code> - 比前一个动画的结束早0.5秒。就像说 &quot;前一个动画的结束加上 -0.5&quot;</li></ul></li><li><p>一个基于 <code>百分比</code> 的复杂字符串。当紧跟 <code>&quot;+=&quot;</code> 或 <code>&quot;-=&quot;</code> 前缀时，百分比是基于 <code>被插入动画</code> 的总持续时间。当紧跟 <code>&lt;</code> 或 <code>&quot;&gt;&quot;</code> 时，它是基于 <code>前一个动画</code> 的总持续时间。注意：总持续时间包括重复/悠悠。示例：</p><ul><li><code>&quot;-=25%&quot;</code> - 与时间线结束重叠，重叠部分为插入动画总持续时间的25%</li><li><code>&quot;+=50%&quot;</code> - 超过时间线结束，超过部分为插入动画总持续时间的50%，创建间隙</li><li><code>&quot;&lt;25%&quot;</code> - 从前一个动画的开始25%处。与 <code>&quot;&gt;-75%&quot;</code> 相同，即从前一个动画的结束处负75%</li><li><code>&quot;&lt;+=25%&quot;</code> - 从前一个动画的开始处插入动画总持续时间的25%。与 <code>&quot;&lt;25%&quot;</code> 不同，后者的百分比是基于前一个动画的总持续时间，而任何紧跟 <code>&quot;+=&quot;</code> 或 <code>&quot;-=&quot;</code> 的都基于插入动画的总持续时间。</li><li><code>&quot;myLabel+=30%&quot;</code> - 从标签 <code>&quot;myLabel&quot;</code> 处插入动画总持续时间的30%</li></ul></li><li><p>基于百分比的值是在 GSAP 3.7.0 中添加的</p></li></ul><p><strong>“前一个动画”</strong> 指的是最近插入的动画，而不一定是最接近时间线末尾的动画。</p><h3 id="位置参数交互式演示" tabindex="-1">位置参数交互式演示 <a class="header-anchor" href="#位置参数交互式演示" aria-label="Permalink to &quot;位置参数交互式演示&quot;">​</a></h3><hr>`,14),a("iframe",{src:"https://codepen.io/GreenSock/pen/PopXddg",width:"100%",height:"600",scrolling:"no",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},null,-1),s(`<h2 id="特殊属性和回调" tabindex="-1">特殊属性和回调 <a class="header-anchor" href="#特殊属性和回调" aria-label="Permalink to &quot;特殊属性和回调&quot;">​</a></h2><p>将这些添加到您的 vars 对象中，以给您的动画赋予特殊能力：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  onComplete: myFunction,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  repeat: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  repeatDelay: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  yoyo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>autoRemoveChildren</td><td>布尔值</td><td>如果设置为 <code>true</code>，则子补间/时间线完成后将自动被杀死/移除。这通常不是您想要的，因为它阻止了向后时间（比如如果您想 <code>reverse()</code> 或设置进度较低等）。然而，它可以提高速度和内存管理。根时间线使用 <code>autoRemoveChildren: true</code>。</td></tr><tr><td>callbackScope</td><td>对象</td><td>用于所有回调（<code>onStart</code>、<code>onUpdate</code>、<code>onComplete</code> 等）的作用域。作用域是回调内部 <code>this</code> 引用的对象。</td></tr><tr><td>defaults</td><td>对象</td><td>一个简单的方式设置默认值，这些默认值会被子动画继承。详见 “defaults” 部分。</td></tr><tr><td>delay</td><td>数字</td><td>动画开始前的延迟时间，以秒为单位。</td></tr><tr><td>onComplete</td><td>函数</td><td>当动画完成时应该调用的函数。</td></tr><tr><td>onCompleteParams</td><td>数组</td><td>传递给 <code>onComplete</code> 函数的参数数组。例如，<code>gsap.timeline({onComplete: myFunction, onCompleteParams: [&quot;param1&quot;, &quot;param2&quot;]});</code>。</td></tr><tr><td>onInterrupt</td><td>函数</td><td>当动画被中断时调用的函数。注意，如果动画正常完成，则不会触发此事件。</td></tr><tr><td>onInterruptParams</td><td>数组</td><td>传递给 <code>onInterrupt</code> 函数的参数数组。例如，<code>gsap.to(&quot;.class&quot;, {x:100, onInterrupt:myFunction, onInterruptParams:[&quot;param1&quot;, &quot;param2&quot;]});</code>。</td></tr><tr><td>onRepeat</td><td>函数</td><td>每次动画重复时应该调用的函数。</td></tr><tr><td>onRepeatParams</td><td>数组</td><td>传递给 <code>onRepeat</code> 函数的参数数组。例如，<code>gsap.timeline({onRepeat: myFunction, onRepeatParams: [&quot;param1&quot;, &quot;param2&quot;]});</code>。</td></tr><tr><td>onReverseComplete</td><td>函数</td><td>当动画从反向到达开始时应该调用的函数。例如，如果调用了 <code>reverse()</code>，则补间会向开始移动，当其 <code>time</code> 达到 <code>0</code> 时，<code>onReverseComplete</code> 将被调用。如果动画被放置在一个时间线实例中，并且播放动画反向到达（或超过）开始，也会发生这种情况。</td></tr><tr><td>onReverseCompleteParams</td><td>数组</td><td>传递给 <code>onReverseComplete</code> 函数的参数数组。例如，<code>gsap.timeline({onReverseComplete: myFunction, onReverseCompleteParams: [&quot;param1&quot;, &quot;param2&quot;]});</code>。</td></tr><tr><td>onStart</td><td>函数</td><td>当动画开始时（当其 <code>time</code> 从 <code>0</code> 变为其他值时）应该调用的函数。</td></tr><tr><td>onStartParams</td><td>数组</td><td>传递给 <code>onStart</code> 函数的参数数组。例如，<code>gsap.timeline({onStart: myFunction, onStartParams: [&quot;param1&quot;, &quot;param2&quot;]});</code>。</td></tr><tr><td>onUpdate</td><td>函数</td><td>每次动画更新时（在动画活动期间的每帧）应该调用的函数。</td></tr><tr><td>onUpdateParams</td><td>数组</td><td>传递给 <code>onUpdate</code> 函数的参数数组。例如，<code>gsap.timeline({onUpdate: myFunction, onUpdateParams: [&quot;param1&quot;, &quot;param2&quot;]});</code>。</td></tr><tr><td>paused</td><td>布尔值</td><td>如果为 <code>true</code>，则动画将在创建后立即暂停。</td></tr><tr><td>repeat</td><td>数字</td><td>动画在第一次迭代后应重复的次数。例如，如果 <code>repeat</code> 是 <code>1</code>，则动画将总共播放两次（初始播放加上1次重复）。要无限重复，请使用 <code>-1</code>。<code>repeat</code> 应始终为整数。</td></tr><tr><td>repeatDelay</td><td>数字</td><td>重复之间的时间，以秒为单位。例如，如果 <code>repeat</code> 是 <code>2</code> 且 <code>repeatDelay</code> 是 <code>1</code>，则动画将首先播放，然后等待1秒再重复，然后再次播放，然后再等待1秒再进行最后一次重复。</td></tr><tr><td>repeatRefresh</td><td>布尔值</td><td>设置 <code>repeatRefresh: true</code> 会导致重复时间线在每次完整迭代（不包括悠悠）时 <code>invalidate()</code> 其所有子补间，并在内部重新记录它们的起始/结束值。这在您使用动态值（相对的、随机的或基于函数的）时很有用。例如，<code>x: &quot;random(-100, 100)&quot;</code> 将在每次重复时获得一个新的随机 x 值。<code>duration</code>、<code>delay</code> 和 <code>stagger</code> 不会刷新。</td></tr><tr><td>smoothChildTiming</td><td>布尔值</td><td>控制子动画是否自动重新定位（更改它们的 <code>startTime</code>）以在运行时更改属性时保持平滑播放。例如，想象时间线的播放头在一个孩子补间上，该补间完成了 75%，移动元素的左边从 0 到 100，然后调用该补间的 <code>reverse()</code> 方法。如果 <code>smoothChildTiming</code> 是 <code>false</code>（默认值，除了全局时间线外），补间将在原地翻转，保持其 <code>startTime</code> 一致。因此，时间线的播放头现在将在补间的 25% 完成点而不是 75%。详见 &quot;时间线如何工作？&quot; 部分。</td></tr><tr><td>yoyo</td><td>布尔值</td><td>如果为 <code>true</code>，则每隔一次重复周期将朝相反方向运行，使补间看起来来回移动（先前然后后）。这不会直接影响 <code>reversed</code> 属性。所以如果 <code>repeat</code> 是 <code>2</code> 且 <code>yoyo</code> 是 <code>false</code>，它看起来像：开始 - 1 - 2 - 3 - 1 - 2 - 3 - 1 - 2 - 3 - 结束。但如果 <code>yoyo</code> 是 <code>true</code>，它看起来像：开始 - 1 - 2 - 3 - 3 - 2 - 1 - 1 - 2 - 3 - 结束。</td></tr></tbody></table><h2 id="设置默认值" tabindex="-1">设置默认值 <a class="header-anchor" href="#设置默认值" aria-label="Permalink to &quot;设置默认值&quot;">​</a></h2><p>在时间线的 <code>defaults</code> 对象中的任何内容都会被其子动画继承，当它们被创建时，所以如果您发现自己一次又一次地设置相同的 <code>ease</code> 或 <code>duration</code>（或任何值），这可以帮助使您的代码更简洁。例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 无默认值（长）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">270</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;elastic&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;elastic&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">180</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;elastic&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 有默认值（短）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ defaults: { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;elastic&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">270</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子补间将继承父时间线的持续时间和效果！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">180</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>您以这种方式设置的任何默认值都会被推入每个子补间 - 它不仅限于某个特定的属性子集。继承的默认值随时可以被子动画上的属性声明覆盖。</p><h2 id="嵌套" tabindex="-1">嵌套 <a class="header-anchor" href="#嵌套" aria-label="Permalink to &quot;嵌套&quot;">​</a></h2><p>在时间线内嵌套时间线，深度不限。这使您可以模块化代码并使其更易于维护。例如，您可以按部分构建动画，并将它们缝合在主时间线中，如下所示：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> intro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...在这里添加动画...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> middle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...在这里添加动画...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> conclusion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...在这里添加动画...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将它们缝合在主时间线中...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> master </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">master</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">middle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;+=2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用2秒的间隔</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conclusion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-=1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重叠1秒</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="其他时间线特性" tabindex="-1">其他时间线特性 <a class="header-anchor" href="#其他时间线特性" aria-label="Permalink to &quot;其他时间线特性&quot;">​</a></h2><ul><li><p>使用其 <code>timeScale()</code> 方法加速或减慢整个时间线。您甚至可以对其进行补间，以平滑地逐渐加速或减慢动画！</p></li><li><p>使用其 <code>progress()</code> 或 <code>totalProgress()</code> 方法获取或设置时间线的进度（<code>totalProgress()</code> 只包括任何重复）。例如，要跳到半路，设置 <code>myTimeline.progress(0.5);</code>。</p></li><li><p>对 <code>time()</code>, <code>totalTime()</code>, <code>progress()</code>, 或 <code>totalProgress()</code> 进行补间，以快进或倒带时间线。您甚至可以将滑块附加到其中一个，使用户能够拖动向前或向后穿过时间线。</p></li><li><p>使用构造函数的 <code>vars</code> 对象添加 <code>onComplete</code>, <code>onStart</code>, <code>onUpdate</code>, <code>onRepeat</code> 和/或 <code>onReverseComplete</code> 回调，如 <code>var tl = gsap.timeline({onComplete: myFunction});</code>。</p></li><li><p>将时间线设置为重复任何次数或无限重复。您甚至可以设置每个重复周期之间的延迟，和/或使重复周期悠悠，看起来每隔一个周期就反转方向。</p></li><li><p>使用 <code>currentLabel()</code> 或使用 <code>nextLabel()</code> 和 <code>previousLabel()</code> 在时间线的各个位置找到标签。</p></li></ul><p><strong>示例代码：</strong></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//create the timeline that repeats 3 times with 1 second between each repeat and then call myFunction() when it completes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ repeat: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, repeatDelay: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, onComplete: myFunction })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//add a tween</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//add another tween 0.5 seconds after the end of the timeline (makes sequencing easy)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;+=0.5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//reverse anytime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Add a &quot;spin&quot; label 3-seconds into the timeline</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;spin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//insert a rotation tween at the &quot;spin&quot; label (you could also define the insertion point as the time instead of a label)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rotation: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;+=360&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;spin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//go to the &quot;spin&quot; label and play the timeline from there</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;spin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//nest another timeline inside your timeline...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nested </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nested.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nested, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;+=3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//add nested timeline after a 3-second gap</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="时间线如何工作" tabindex="-1">时间线如何工作？ <a class="header-anchor" href="#时间线如何工作" aria-label="Permalink to &quot;时间线如何工作？&quot;">​</a></h2><p>每个动画（补间和时间线）都放置在父时间线上。从某种意义上说，它们都有自己的播放头（它的 &quot;time&quot; 指的就是这个，或者 &quot;totalTime&quot;，除了包括重复和重复延迟外，其他都是相同的），当父播放头移动到新位置时，它也会更新子播放头。当时间线在特定时间渲染时，它会循环遍历其子元素，并说 &quot;好的，你应该渲染就像你的播放头在 ____&quot; 如果那个子元素是一个有时间线和子元素的时间线，它也会对其子元素做同样的事情，一直这样下去。所以播放头通常保持同步。</p><p>当您取消暂停动画（<code>resume()</code> 或 <code>play()</code>）时，它本质上是拿起播放头并移动它，使其内部播放头与父播放头在那一刻的位置同步，从而使播放完美平滑。除非时间线的 <code>smoothChildTiming</code> 是 <code>false</code>，在这种情况下，那个子元素不会移动 - 其 <code>startTime</code> 将保持锁定在原来的位置。</p><p>所以基本上当 <code>smoothChildTiming</code> 是 <code>true</code> 时，引擎会实时重新排列事物，以确保播放头对齐，使播放感觉无缝和平滑。当您 <code>reverse()</code> 或更改 <code>timeScale</code> 等时，也会发生同样的事情 - 动画的 <code>startTime</code> 自动调整。但有时您可能不希望这种行为 - 那就是 <code>smoothChildTiming: false</code> 在父时间线上很有用的时候。</p><p>再多一个例子：假设您有一个 10 秒的补间，它正好坐在根时间线上，您已经进行了 2 秒的补间。假设它正好在根上从 0 开始，以使这个例子简单，当它在 2 秒时，您执行 <code>tween.seek(5)</code>。根的播放头不受影响 - 它继续像往常一样进行，但在为了让那个补间跳到 5 秒并适当播放，补间的 <code>startTime</code> 被更改为 -3。这样，补间的播放头和根播放头就完全对齐了。</p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li>您可以通过 <code>gsap.globalTimeline</code> 访问 GSAP 的全局时间线，但要小心，因为如果，例如，您暂停它或调整它的时间缩放，那会影响一切，包括延迟调用。您可以使用 <code>gsap.exportRoot()</code> 代替，基本上将所有现有的根动画（可选地排除延迟调用）包装成一个新的时间线实例，将这些与您将来创建的动画隔离开来。例如，如果您在游戏进行中有很多动画，然后用户点击一个按钮弹出一个模态窗口，应该将所有游戏动画速度减慢到原来的 1/10...但您希望模态动画以全速运行，这是使用 <code>exportRoot()</code> 的完美案例。</li></ul><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>autoRemoveChildren</code> : Boolean</td><td>如果 <code>true</code>，则子补间和时间线完成后将自动被移除。</td></tr><tr><td><code>data</code> : *</td><td>一个存储任何您想要的数据的地方（如果存在 <code>vars.data</code>，则最初由其填充）。</td></tr><tr><td><code>labels</code> : Object</td><td>存储已添加到时间线的任何标签。</td></tr><tr><td><code>parent</code> : Timeline</td><td>动画所附加的父时间线。任何不在您创建的时间线中的东西，默认都放在 <code>gsap.globalTimeline</code> 上。</td></tr><tr><td><code>scrollTrigger</code>: ScrollTrigger | undefined</td><td>一个方便的方式来访问与时间线相关联的 ScrollTrigger。这只在时间线有 ScrollTrigger 时才能访问。</td></tr><tr><td><code>smoothChildTiming</code> : Boolean</td><td>控制子补间和时间线是否自动重新定位（更改它们的 <code>startTime</code>）以在运行时更改属性时保持平滑播放。</td></tr><tr><td><code>vars</code> : Object</td><td>通过构造函数传递给原始时间线的配置对象，如 <code>gsap.timeline({onComplete: func});</code></td></tr></tbody></table><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>add</code> (child:[Tween | Timeline | Label | Callback | Array], position:[Number | String | Label] ) : self</td><td>[覆盖] 将补间、时间线、回调或标签（或它们的数组）添加到时间线中。</td></tr><tr><td><code>addLabel</code> (label:String, position:[Number | String] ) : self</td><td>将标签添加到时间线中，便于标记重要的位置/时间。</td></tr><tr><td><code>addPause</code> (position:[String | Number | Label], callback:Function, params:Array ) : self</td><td>在特定时间或标签处插入特殊回调，暂停时间线的播放。</td></tr><tr><td><code>call</code> ( callback:Function, params:Array, position:* ) : self</td><td>将回调添加到时间线的末尾（或使用 <code>position</code> 参数在其他地方） - 这是一个方便的方法，与 <code>add</code> (gsap.delayedCall(...) )\` 完全相同，但代码更少。</td></tr><tr><td><code>clear</code> (labels:Boolean ) : self</td><td>清空时间线中的所有补间、时间线和回调（以及可选的标签）。</td></tr><tr><td><code>currentLabel</code> (value:String ) : [String | self]</td><td>获取当前时间之前最近的标签，或跳转到提供的标签（行为取决于是否向方法传递参数）。</td></tr><tr><td><code>delay</code> (value:Number ) : [Number | self]</td><td>获取或设置动画的初始 <code>delay</code>，这是动画开始之前的秒数。</td></tr><tr><td><code>duration</code> (value:Number ) : [Number | self]</td><td>[覆盖] 获取时间线的持续时间，或者如果用作设置器，则调整时间线的时间缩放以适应指定的持续时间。</td></tr><tr><td><code>endTime</code> (includeRepeats:Boolean ) : [Number | self]</td><td>返回动画根据父时间线的本地时间将完成的时间。</td></tr><tr><td><code>eventCallback</code> (type:String, callback:Function, params:Array ) : [Function | self]</td><td>获取或设置事件回调，如 <code>onComplete</code>, <code>onUpdate</code>, <code>onStart</code>, <code>onReverseComplete</code> 或 <code>onRepeat</code> 以及应该传递给该回调的任何参数。</td></tr><tr><td><code>from</code> (target:[ Object | Array | String ], vars:Object, position:[ Number | String ] ) : self</td><td>将 <code>.from()</code> 补间添加到时间线的末尾（或使用 <code>position</code> 参数在其他地方） - 这是一个方便的方法，与 <code>add(gsap.from(...) )</code> 完全相同，但代码更少。</td></tr><tr><td><code>fromTo</code> (target:[ Object | Array | String ], fromVars:Object, toVars:Object, position:[ Number | String ] ) : self</td><td>将 <code>.fromTo()</code> 补间添加到时间线的末尾 - 这是一个方便的方法，与 <code>add(gsap.fromTo(...) )</code> 完全相同，但代码更少。</td></tr><tr><td><code>getById</code> (id:String ) : Animation</td><td></td></tr><tr><td><code>getChildren</code> (nested:Boolean, tweens:Boolean, timelines:Boolean, ignoreBeforeTime:Number ) : Array</td><td>返回一个数组，包含此时间线中嵌套的所有补间和/或时间线。</td></tr><tr><td><code>getTweensOf</code> (target:[Object | Selector text | Array], nested:Boolean ) : Array</td><td>返回特定对象在此时间线中的补间。</td></tr><tr><td><code>globalTime</code> (localTime:Number ) : Number</td><td>将本地时间转换为 <code>gsap.globalTimeline</code> 上的对应时间（考虑所有嵌套、时间缩放等）。</td></tr><tr><td><code>invalidate</code> () : self</td><td>[覆盖] 清除任何内部记录的起始/结束值，这在您想要重新启动动画而不恢复到任何先前记录的起始值时非常有用。</td></tr><tr><td><code>isActive</code> () : Boolean</td><td>指示动画是否当前处于激活状态（即虚拟播放头正在积极地移动过该实例的时间跨度，并且它没有被暂停，它的任何祖先时间线也没有被暂停）。</td></tr><tr><td><code>iteration</code> (value:Number ) : [Number | self]</td><td>获取或设置时间线的迭代次数（当前重复）。</td></tr><tr><td><code>kill</code> () : Timeline</td><td>立即终止时间线并将其从父时间线中移除，停止其动画。</td></tr><tr><td><code>killTweensOf</code> (targets:Selector text | Array | Object, props:String, onlyActive:Boolean ) : Timeline</td><td>杀死此时间线中影响提供的 <code>targets</code> 的所有补间。您可以选择性地指定要杀死的特定属性。</td></tr><tr><td><code>nextLabel</code> (time:Number ) : String</td><td>返回从提供的 <code>time</code> 起时间线中的下一个标签。如果没有提供 <code>time</code>，则使用时间线的当前播放头时间。</td></tr><tr><td><code>pause</code> (atTime:*, suppressEvents:Boolean ) : self</td><td>暂停实例，可以选择性地跳转到特定时间。</td></tr><tr><td><code>paused</code> (value:Boolean ) : [Boolean | self]</td><td>获取或设置动画的暂停状态，指示动画是否当前处于暂停状态。</td></tr><tr><td><code>play</code> (from:*, suppressEvents:Boolean ) : self</td><td>开始向前播放，可以选择性地从特定时间开始（默认情况下，播放从播放头当前所在位置开始）。</td></tr><tr><td><code>previousLabel</code> (time:Number ) : String</td><td>返回从提供的 <code>time</code> 起时间线中的上一个标签。如果没有提供 <code>time</code>，则使用时间线的当前播放头时间。</td></tr><tr><td><code>progress</code> (value:Number, suppressEvents:Boolean ) : [Number | self]</td><td>[覆盖] 获取或设置时间线的进度，这是一个介于 0 和 1 之间的值，表示虚拟播放头的位置（不包括重复），其中 0 是开始，0.5 是完成一半，1 是完成。</td></tr><tr><td><code>recent</code> () : [Tween | Timeline | Callback]</td><td>返回最近添加的子补间/时间线/回调，无论其在时间线中的位置如何。</td></tr><tr><td><code>remove</code> (value:[Tween | Timeline | Callback | Label] ) : self</td><td>从时间线中移除补间、时间线、回调或标签（或它们的数组）。</td></tr><tr><td><code>removeLabel</code> (label:String ) : self</td><td>从时间线中移除标签，并返回该标签的时间。</td></tr><tr><td><code>removePause</code> (position:[Number | Label] ) : self</td><td>移除通过其 <code>.addPause()</code> 方法添加到时间线的暂停。</td></tr><tr><td><code>repeat</code> (value:Number ) : [Number | self]</td><td>获取或设置时间线在第一次迭代后应重复的次数。</td></tr><tr><td><code>repeatDelay</code> (value:Number ) : [Number | self]</td><td>获取或设置重复之间的时间，以秒为单位。</td></tr><tr><td><code>restart</code> (includeDelay:Boolean, suppressEvents:Boolean ) : self</td><td>重新开始并从开头向前播放。</td></tr><tr><td><code>resume</code> () : self</td><td>恢复播放，不改变方向（向前或反向）。</td></tr><tr><td><code>reverse</code> (from:*, suppressEvents:Boolean ) : self</td><td>反向播放，使动画的所有方面都向后播放，包括例如补间的缓动。</td></tr><tr><td><code>reversed</code> (value:Boolean ) : [Boolean | self]</td><td>获取或设置动画的反向状态，指示动画是否应该反向播放。</td></tr><tr><td><code>revert</code> () : Self</td><td>撤销时间线并终止它，将目标恢复到动画前的状态，包括移除时间线添加的内联样式。</td></tr><tr><td><code>seek</code> (position:*, suppressEvents:Boolean ) : self</td><td>[覆盖] 跳转到特定时间（或标签），不影响实例是否暂停或反向播放。</td></tr><tr><td><code>set</code> (target:[ Object | Array | String ], vars:Object, position:[ Number | String ] ) : self</td><td>将零持续时间的补间添加到时间线的末尾（或使用 <code>position</code> 参数在其他地方），当虚拟播放头到达时间线上的该位置时，立即设置值 - 这是一个方便的方法，与 <code>add(gsap.to(target, {duration: 0, ...}) )</code> 完全相同，但代码更少。</td></tr><tr><td>**shiftChildren(amount:Number, adjustLabels:Boolean, ignoreBeforeTime:Number ) : self</td><td>将时间线的孩子的 <code>startTime</code> 移动一定量，并可选地调整标签。</td></tr><tr><td><code>startTime</code> (value:Number ) : [Number | self]</td><td>获取或设置动画在其父时间线上开始的时间（在定义的任何延迟之后）。</td></tr><tr><td><code>then</code> (callback:Function ) : Promise</td><td>返回一个承诺，以便您可以使用承诺来跟踪补间或时间线何时完成。</td></tr><tr><td><code>time</code> (value:Number, suppressEvents:Boolean ) : [Number | self]</td><td>[覆盖] 获取或设置播放头的本地位置（基本上是当前时间），不包括任何重复或重复延迟。</td></tr><tr><td><code>timeScale</code> (value:Number ) : [Number | self]</td><td>用于缩放动画中的时间的因素，其中 1 = 正常速度（默认值），0.5 = 半速，2 = 双倍速度等。</td></tr><tr><td><code>to</code> (target:[ Object | Array | String ], vars:Object, position:[ Number | String ] ) : self</td><td>将 <code>gsap.to()</code> 补间添加到时间线的末尾（或使用 <code>position</code> 参数在其他地方） - 这是一个方便的方法，与 <code>add(gsap.to(...) )</code> 完全相同，但代码更少。</td></tr><tr><td><code>totalDuration</code> (value:Number ) : [Number | self]</td><td>获取或设置包括任何重复或重复延迟在内的时间线的总持续时间（以秒为单位）。</td></tr><tr><td><code>totalProgress</code> (value:Number, suppressEvents:Boolean ) : [Number | self]</td><td>[覆盖] 获取或设置时间线的总进度，这是一个介于 0 和 1 之间的值，表示虚拟播放头的位置（包括重复），其中 0 是开始，0.5 是半路，1 是结束（完成）。</td></tr><tr><td><code>totalTime</code> (time:Number, suppressEvents:Boolean ) : [Number | self]</td><td>获取或设置根据 <code>totalDuration</code> 的播放头位置，包括任何重复和重复延迟。</td></tr><tr><td><code>tweenFromTo</code> (fromPosition:[Number | Label], toPosition:[Number | Label], vars:Object ) : Tween</td><td>创建一个线性补间，从特定时间或标签到另一个时间或标签，并在到达后停止。</td></tr><tr><td><code>tweenTo</code> (position:[Number | Label], vars:Object ) : Tween</td><td>创建一个线性补间，到特定时间或标签，并在到达后停止。</td></tr><tr><td><code>yoyo</code> (value:Boolean ) : [Boolean | self]</td><td>获取或设置时间线的悠悠状态，其中 true 导致时间线来回移动，每隔一次重复交替向后和向前。</td></tr></tbody></table>`,26)]))}const g=e(l,[["render",d]]);export{E as __pageData,g as default};
