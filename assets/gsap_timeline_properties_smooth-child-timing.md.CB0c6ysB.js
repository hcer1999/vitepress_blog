import{l as o,a as d,c as i,a5 as t}from"./chunks/framework.DAV8GD4U.js";const p=JSON.parse('{"title":"GSAP中文文档 - timeline 属性 - 平滑子补间（smoothChildTiming）","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/timeline/properties/smooth-child-timing.md","filePath":"gsap/timeline/properties/smooth-child-timing.md","lastUpdated":1731921447000}'),c={name:"gsap/timeline/properties/smooth-child-timing.md"};function a(s,e,m,l,r,n){return d(),i("div",null,e[0]||(e[0]=[t('<h1 id="gsap中文文档-timeline-属性-平滑子补间-smoothchildtiming" tabindex="-1">GSAP中文文档 - timeline 属性 - 平滑子补间（smoothChildTiming） <a class="header-anchor" href="#gsap中文文档-timeline-属性-平滑子补间-smoothchildtiming" aria-label="Permalink to &quot;GSAP中文文档 - timeline 属性 - 平滑子补间（smoothChildTiming）&quot;">​</a></h1><h2 id="平滑子补间-smoothchildtiming" tabindex="-1">平滑子补间（smoothChildTiming） <a class="header-anchor" href="#平滑子补间-smoothchildtiming" aria-label="Permalink to &quot;平滑子补间（smoothChildTiming）&quot;">​</a></h2><p>控制子补间和时间线是否在属性动态更改时自动重新定位（更改它们的 <code>startTime</code>）以保持平滑播放。</p><h2 id="详细信息-details" tabindex="-1">详细信息（Details） <a class="header-anchor" href="#详细信息-details" aria-label="Permalink to &quot;详细信息（Details）&quot;">​</a></h2><p>控制子补间和时间线是否在属性动态更改时自动重新定位（更改它们的 <code>startTime</code>）以保持平滑播放。</p><p>例如，想象时间线的播放头位于一个已完成75%的子补间上，该补间将 <code>obj.x</code> 从0移动到100，然后调用该补间的 <code>reverse()</code> 方法。如果 <code>smoothChildTiming</code> 设置为 <code>false</code>（默认值，除了根时间线外），补间将在原地翻转，保持其 <code>startTime</code> 一致。因此，时间线的播放头现在将在补间的25%完成点而不是75%。记住，时间线的播放头位置和方向不受子补间/时间线更改的影响。<code>obj.x</code> 将从75跳到25，但补间在时间线中的位置将保持一致。</p><p>然而，如果 <code>smoothChildTiming</code> 设置为 <code>true</code>，那么子补间的 <code>startTime</code> 将被调整，以便时间线的播放头与 <code>reverse()</code> 被调用之前立即的同一位置（75%完成）相交，从而使播放看起来完美平滑。<code>obj.x</code> 仍然是75，并且随着播放头的移动，它将继续从那里开始，但由于补间现在被反转了，<code>obj.x</code> 将向0而不是100移动。最终，这是一个在优先考虑平滑的即时播放（<code>true</code>）和子补间和时间线的一致位置（<code>false</code>）之间的决策。</p><p>一些可能影响 <code>startTime</code> 的属性/方法示例（当 <code>smoothChildTiming</code> 设置为 <code>true</code> 时）：<code>reversed</code>, <code>timeScale</code>, <code>progress</code>, <code>totalProgress</code>, <code>time</code>, <code>totalTime</code>, <code>delay</code>, <code>pause</code>, <code>resume</code>, <code>duration</code>, 和 <code>totalDuration</code>。</p><p><code>gsap.globalTimeline</code> 的 <code>smoothChildTiming</code> 设置为 <code>true</code>。</p>',9)]))}const g=o(c,[["render",a]]);export{p as __pageData,g as default};
