import{l as t,a as e,c as n,a5 as s,v as i}from"./chunks/framework.DAV8GD4U.js";const E=JSON.parse('{"title":"GSAP中文文档 - gsap.to()","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/gsap/methods/to.md","filePath":"gsap/gsap/methods/to.md","lastUpdated":1731921447000}'),d={name:"gsap/gsap/methods/to.md"};function l(p,a,r,h,o,k){return e(),n("div",null,a[0]||(a[0]=[s(`<h1 id="gsap中文文档-gsap-to" tabindex="-1">GSAP中文文档 - gsap.to() <a class="header-anchor" href="#gsap中文文档-gsap-to" aria-label="Permalink to &quot;GSAP中文文档 - gsap.to()&quot;">​</a></h1><h2 id="gsap-to" tabindex="-1">gsap.to() <a class="header-anchor" href="#gsap-to" aria-label="Permalink to &quot;gsap.to()&quot;">​</a></h2><p>最常见的动画类型是 <code>to()</code> 补间，因为它允许您定义目标值（大多数人会考虑对某些值进行动画处理）：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 旋转并移动具有 &quot;box&quot; 类的元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (&quot;x&quot; 是 translateX() 变换的简写) 1 秒内完成动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">27</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,4),i("iframe",{src:"https://codepen.io/GreenSock/pen/wvwEOZL",width:"100%",height:"400",scrolling:"no",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},null,-1),s(`<p>GSAP 自动计算出当前值（您不需要定义起始值，但可以在 <code>fromTo()</code> 补间中定义）。由于 GSAP 可以为任何对象的任何属性设置动画，因此您不仅限于 CSS 属性或 DOM 对象。您可能会惊讶于有多少东西可以用 GSAP 制作动画并且它“正常工作”。</p><p>要稍后控制 Tween 实例，请将其分配给一个变量（GSAP 很方便地面向对象）：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tween </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;elastic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在我们可以控制它！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">progress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,3),i("iframe",{src:"https://codepen.io/GreenSock/pen/OJLgdyg",width:"100%",height:"300",scrolling:"no",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},null,-1),s(`<p>要简单地触发动画并让它们运行，不需要使用变量。默认情况下，补间会立即播放（尽管您可以设置 <code>delay</code> 或 <code>paused</code> 值），并且当它们完成时，它们会自动处理掉自己。您可以根据需要多次调用 <code>gsap.to()</code> ，而无需担心清理问题。</p><p>其他类型的补间：</p><ul><li><code>from()</code> - 您定义“from”动画的起始值，GSAP 使用当前值作为目标（就像向后运行的补间动画）</li><li><code>fromTo()</code> - 您定义起始值和结束值。</li></ul><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><ol><li><strong>目标</strong> - 您想要为其属性设置动画的对象。这可以是选择器文本，如 &quot;.class&quot; 、 &quot;#id&quot; 等（GSAP 在内部使用 <code>document.querySelectorAll()</code> ），也可以是对元素、通用对象甚至是对象数组的直接引用。</li><li><strong>vars</strong> - 包含要设置动画的所有属性/值的对象，以及任何特殊属性，例如 <code>ease</code> 、 <code>duration</code> 、 <code>delay</code> 或 <code>onComplete</code>。</li></ol><h2 id="特殊属性" tabindex="-1">特殊属性 <a class="header-anchor" href="#特殊属性" aria-label="Permalink to &quot;特殊属性&quot;">​</a></h2><p>将其中任何一个添加到您的 <code>vars</code> 对象中，以赋予您的动画特殊能力：</p><table><thead><tr><th>特殊属性</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>callbackScope</td><td>所有回调（如 <code>onStart</code>，<code>onUpdate</code>，<code>onComplete</code> 等）使用的作用域。</td><td>-</td></tr><tr><td>data</td><td>分配任意数据到这个属性，它会被附加到补间动画实例本身，之后可以通过 <code>yourTween.data</code> 引用。</td><td>-</td></tr><tr><td>delay</td><td>动画开始之前的延迟量（以秒为单位）。</td><td>-</td></tr><tr><td>duration</td><td>动画的持续时间（以秒为单位）。</td><td><code>0.5</code></td></tr><tr><td>ease</td><td>控制动画期间的速率变化，赋予它特定的感觉。例如，<code>&quot;elastic&quot;</code> 或 <code>&quot;strong.inOut&quot;</code>。</td><td><code>&quot;power1.out&quot;</code></td></tr><tr><td>id</td><td>为您的补间动画实例分配一个唯一标识符，以便您可以使用 <code>gsap.getById()</code> 找到它。</td><td>-</td></tr><tr><td>immediateRender</td><td>是否在实例化时立即渲染。如果为 <code>true</code>，则补间动画会立即渲染，即使设置了延迟。</td><td><code>false</code>（<code>to()</code>）<br><code>true</code>（<code>from()</code> 和 <code>fromTo()</code>）</td></tr><tr><td>inherit</td><td>是否从父时间轴的 <code>defaults</code> 对象继承。如果设置为 <code>false</code>，则禁用继承。</td><td><code>true</code></td></tr><tr><td>lazy</td><td>是否延迟值的写入以提高性能。如果为 <code>false</code>，则禁用延迟渲染。</td><td><code>true</code>（零持续时间的补间动画除外）</td></tr><tr><td>onComplete</td><td>动画完成时调用的函数。</td><td>-</td></tr><tr><td>onCompleteParams</td><td>传递给 <code>onComplete</code> 函数的参数数组。</td><td>-</td></tr><tr><td>onInterrupt</td><td>动画被中断时调用的函数，比如在完成前被杀死。</td><td>-</td></tr><tr><td>onInterruptParams</td><td>传递给 <code>onInterrupt</code> 函数的参数数组。</td><td>-</td></tr><tr><td>onRepeat</td><td>每次动画进入新的迭代周期时调用的函数，仅当设置了非零的 <code>repeat</code> 时发生。</td><td>-</td></tr><tr><td>onRepeatParams</td><td>传递给 <code>onRepeat</code> 函数的参数数组。</td><td>-</td></tr><tr><td>onReverseComplete</td><td>动画从相反方向到达开头时调用的函数（不包括重复）。</td><td>-</td></tr><tr><td>onReverseCompleteParams</td><td>传递给 <code>onReverseComplete</code> 函数的参数数组。</td><td>-</td></tr><tr><td>onStart</td><td>动画开始时调用的函数，如果补间动画多次重启，这种情况可能会发生多次。</td><td>-</td></tr><tr><td>onStartParams</td><td>传递给 <code>onStart</code> 函数的参数数组。</td><td>-</td></tr><tr><td>onUpdate</td><td>每次动画更新时调用的函数，在每个移动播放头的“tick”上。</td><td>-</td></tr><tr><td>onUpdateParams</td><td>传递给 <code>onUpdate</code> 函数的参数数组。</td><td>-</td></tr><tr><td>overwrite</td><td>是否立即杀死同一目标的所有补间动画，或者在第一次渲染时寻找活动动画中的冲突并只杀死冲突部分。</td><td><code>false</code></td></tr><tr><td>paused</td><td>是否在创建后立即暂停动画。</td><td><code>false</code></td></tr><tr><td>repeat</td><td>动画应重复的次数，<code>repeat: 1</code> 将播放两次。使用 <code>-1</code> 进行无限重复。</td><td><code>0</code></td></tr><tr><td>repeatDelay</td><td>重复之间等待的时间量（以秒为单位）。</td><td><code>0</code></td></tr><tr><td>repeatRefresh</td><td>是否在每次完整迭代时刷新起始/结束值，对于使用动态值的情况很有用。</td><td>-</td></tr><tr><td>reversed</td><td>是否使动画从一开始就以播放头反向。</td><td>-</td></tr><tr><td>runBackwards</td><td>是否反转起始和结束值，相当于使 <code>to()</code> 补间动画变成 <code>from()</code>。</td><td>-</td></tr><tr><td>stagger</td><td>如果定义了多个目标，可以设置开始时间的偏移，或者使用错开对象获得更高级的错开效果。</td><td>-</td></tr><tr><td>startAt</td><td>为任何属性定义起始值，即使它们没有动画化。</td><td>-</td></tr><tr><td>yoyo</td><td>是否使动画在每次重复时以相反的方向运行，看起来来回移动。</td><td><code>false</code></td></tr><tr><td>yoyoEase</td><td>是否改变 yoyo 阶段的缓动，或者简单地反转补间动画的正常 <code>ease</code>。</td><td><code>false</code></td></tr><tr><td>keyframes</td><td>使用关键帧数组来动画化目标到各种状态，每个关键帧都是一个 <code>vars</code> 对象，充当 <code>to()</code> 补间动画。</td><td>-</td></tr></tbody></table><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h2><p>插件为 GSAP 的核心添加了额外的功能。有些插件可以更轻松地使用 PIXI.js 或 EaselJS 等渲染库，而其他插件则添加超能力，例如变形 SVG 形状、添加拖放功能等。这使得 GSAP 核心保持相对较小，并且仅在以下情况下才允许添加功能：你需要它们。请在此处查看插件的完整列表。</p><h2 id="基于功能的值" tabindex="-1">基于功能的值 <a class="header-anchor" href="#基于功能的值" aria-label="Permalink to &quot;基于功能的值&quot;">​</a></h2><p>通过对任何值使用函数来获得令人难以置信的动态动画，并且在第一次补间渲染时，每个目标都会调用一次该函数，并且该函数返回的任何内容都将用作该值。这对于应用条件逻辑或随机化事物非常有用（尽管 GSAP 也内置了随机化功能......向下滚动即可查看）。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 普通值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 基于函数的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>该函数传递三个参数：</p><ol><li><strong>index</strong> - 数组中目标的索引。例如，如果有 3 个 <code>&lt;div&gt;</code> 类为“.box”的元素，并且您 <code>gsap.to(&quot;.box&quot;, ...)</code> ，则该函数将被调用 3 次（每个目标一次）；索引首先是 0 ，然后是 1 ，最后是 2 。</li><li><strong>target</strong> - 目标本身（本例中的 <code>&lt;div&gt;</code> 元素）</li><li><strong>targets</strong> - 目标数组（与 <code>tween.targets()</code> 相同）</li></ol><h2 id="随机值" tabindex="-1">随机值 <a class="header-anchor" href="#随机值" aria-label="Permalink to &quot;随机值&quot;">​</a></h2><p>将随机值定义为字符串，例如表示范围的 <code>&quot;random(-100, 100)&quot;</code> 或表示数组的 \`&quot;random([red</p><p>, blue, green])&quot;\` ，GSAP 将为每个目标相应地交换随机值！这使得高级随机效应变得简单。您甚至可以将随机数四舍五入到任何数字最接近的增量！例如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 为每个目标选择一个 -100 到 100 之间的随机数，四舍五入到最接近的 5！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;random(-100, 100, 5)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>或者使用类似数组的值，GSAP 将随机选择其中之一：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;random([0, 100, 200, 500])&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 随机选择其中一个值 (0, 100, 200, 或 500)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果您愿意，还有一个 <code>gsap.utils.random()</code> 函数可以直接使用。</p><h2 id="相对值" tabindex="-1">相对值 <a class="header-anchor" href="#相对值" aria-label="Permalink to &quot;相对值&quot;">​</a></h2><p>使用 &quot;+=&quot; 或 &quot;-=&quot; 前缀来指示相对值。例如， <code>gsap.to(&quot;.class&quot;, {x:&quot;-=20&quot;});</code> 将为 x 制作比补间开始时少 20 像素的动画。 <code>{x:&quot;+=20&quot;}</code> 将添加 20。要以相对方式使用变量，只需添加 &quot;+=&quot; 或 &quot;-=&quot; 前缀，例如 <code>{x: &quot;+=&quot; + yourVariable}</code> 。</p><h2 id="交错" tabindex="-1">交错 <a class="header-anchor" href="#交错" aria-label="Permalink to &quot;交错&quot;">​</a></h2><p>如果定义了多个目标，您可以通过设置像 <code>stagger: 0.1</code> 这样的值（每个开始时间之间间隔 0.1 秒）轻松地交错（偏移）每个目标的开始时间。或者您可以通过使用获得更高级的交错一个交错的物体。有关更多信息，请参阅<a href="https://greensock.com/docs/v3/Staggers" target="_blank" rel="noreferrer">交错文档</a>。</p><h2 id="序列" tabindex="-1">序列 <a class="header-anchor" href="#序列" aria-label="Permalink to &quot;序列&quot;">​</a></h2><p>对于基本排序，您可以在每个补间上使用 <code>delay</code> （例如 <code>gsap.to(&quot;.class&quot;, { delay: 0.5, duration: 1, x: 100})</code> ），但我们强烈建议使用<a href="https://greensock.com/docs/v3/GSAP/Timeline" target="_blank" rel="noreferrer">时间线</a>。</p><p>时间线还具有方便的 <code>to()</code>、<code>from()</code> 和 <code>fromTo()</code> 方法，因此您可以轻松地将它们链接在一起并构建复杂的序列：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建时间线</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;elastic&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.class3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">180</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="关键帧" tabindex="-1">关键帧 <a class="header-anchor" href="#关键帧" aria-label="Permalink to &quot;关键帧&quot;">​</a></h2><p>如果您发现自己一遍又一遍地对同一目标进行动画处理，那么您一定应该查看<a href="https://greensock.com/docs/v3/GSAP/Keyframes" target="_blank" rel="noreferrer">关键帧</a>，它可以使您的代码更加简洁。它们还可以让您轻松地从 CSS 动画移植动画。</p><p>了解更多关于<a href="https://greensock.com/docs/v3/GSAP/Keyframes" target="_blank" rel="noreferrer">关键帧</a>的信息。</p><h2 id="回调" tabindex="-1">回调 <a class="header-anchor" href="#回调" aria-label="Permalink to &quot;回调&quot;">​</a></h2><p>回调是在补间或时间轴中发生某些事件（例如开始、完成、重复、反向完成或更新时）后调用的函数。它们对于调试、保持项目的不同部分同步以及许多其他事情非常有用。</p>`,35)]))}const g=t(d,[["render",l]]);export{E as __pageData,g as default};
