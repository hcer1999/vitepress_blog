import{l as s,c as a,a as e,a7 as i}from"./chunks/framework.dOJbCP6k.js";const _=JSON.parse('{"title":"gsap.registerPlugin()","description":"","frontmatter":{},"headers":[],"relativePath":"gsap/gsap/methods/gsap.registerPlugin.md","filePath":"gsap/gsap/methods/gsap.registerPlugin.md","lastUpdated":1721038367000}'),t={name:"gsap/gsap/methods/gsap.registerPlugin.md"},n=i(`<h1 id="gsap-registerplugin" tabindex="-1">gsap.registerPlugin() <a class="header-anchor" href="#gsap-registerplugin" aria-label="Permalink to &quot;gsap.registerPlugin()&quot;">​</a></h1><p>向 GSAP 核心注册插件可确保两者无缝协作，并防止构建工具/捆绑程序中的树抖动问题。您只需要在使用插件之前注册一次即可，例如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//list as many as you&#39;d like</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MotionPathPlugin, TextPlugin)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>多次注册同一个插件没有什么坏处（但也没有帮助）。</p><p>GSAP 插件的非 ES 模块版本（如 CDN 上的缩小文件）尝试在加载时自动注册，只要它们在核心 GSAP 引擎之后加载，通常在浏览器中效果很好，但它仍然是一个很好的选择习惯注册插件，因为在构建环境（浏览器之外）中，tree shake 可能会咬你。</p><p>请记住，这并不能替代加载或导入插件本身。在加载插件后使用此方法只是为了让 GSAP 的核心了解该插件并防止在使用构建工具时发生树抖动。</p><h2 id="什么是插件-​" tabindex="-1">什么是插件？ ​ <a class="header-anchor" href="#什么是插件-​" aria-label="Permalink to &quot;什么是插件？ ​&quot;">​</a></h2><p>插件为 GSAP 的核心添加了额外的功能。有些插件可以更轻松地使用某些渲染库（例如 PIXI.js 或 EaselJS），而其他插件则添加了执行特殊操作的功能，例如变形 SVG、添加拖放功能等）。这使得 GSAP 核心保持相对较小，并允许您在需要时添加功能。</p>`,8),p=[n];function r(l,g,o,d,h,c){return e(),a("div",null,p)}const P=s(t,[["render",r]]);export{_ as __pageData,P as default};
